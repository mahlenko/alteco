/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChart.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChart.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XYChart": () => (/* binding */ XYChart)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _XYChartDefaultTheme__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./XYChartDefaultTheme */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChartDefaultTheme.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_render_Rectangle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/render/Rectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js");
/* harmony import */ var _core_render_SerialChart__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/render/SerialChart */ "./node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _core_render_Button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/render/Button */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Order__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/util/Order */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");














/**
 * Creates an XY chart.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info
 * @important
 */
var XYChart = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(XYChart, _super);
    function XYChart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A list of horizontal axes.
         */
        Object.defineProperty(_this, "xAxes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListAutoDispose()
        });
        /**
         * A list of vertical axes.
         */
        Object.defineProperty(_this, "yAxes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListAutoDispose()
        });
        /**
         * A [[Container]] located on top of the chart, used to store top horizontal
         * axes.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "topAxesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.chartContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, layout: _this._root.verticalLayout }))
        });
        /**
         * A [[Container]] located in the middle the chart, used to store vertical axes
         * and plot area container.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "yAxesAndPlotContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.chartContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, layout: _this._root.horizontalLayout }))
        });
        /**
         * A [[Container]] located on bottom of the chart, used to store bottom
         * horizontal axes.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "bottomAxesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.chartContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, layout: _this._root.verticalLayout }))
        });
        /**
         * A [[Container]] located on left of the chart, used to store left-hand
         * vertical axes.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "leftAxesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.yAxesAndPlotContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, layout: _this._root.horizontalLayout }))
        });
        /**
         * A [[Container]] located in the middle of the chart, used to store actual
         * plots (series).
         *
         * NOTE: `plotContainer` will automatically have its `background` preset. If
         * you need to modify background or outline for chart's plot area, you can
         * use `plotContainer.get("background")` for that.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "plotContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.yAxesAndPlotContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, maskContent: false }))
        });
        /**
         * A [[Container]] axis grid elements are stored in.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "gridContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.plotContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, isMeasured: false }))
        });
        /**
         * A [[Container]] axis background grid elements are stored in.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "topGridContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, isMeasured: false })
        });
        /**
         * A [[Container]] located on right of the chart, used to store right-hand
         * vertical axes.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "rightAxesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.yAxesAndPlotContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, layout: _this._root.horizontalLayout }))
        });
        /**
         * A [[Container]] axis headers are stored in.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
         * @default Container.new()
         */
        Object.defineProperty(_this, "axisHeadersContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.plotContainer.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, {}))
        });
        /**
         * A button that is shown when chart is not fully zoomed out.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info
         * @default Button.new()
         */
        Object.defineProperty(_this, "zoomOutButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.plotContainer.children.push(_core_render_Button__WEBPACK_IMPORTED_MODULE_4__.Button["new"](_this._root, {
                themeTags: ["zoom"],
                icon: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics["new"](_this._root, {
                    themeTags: ["button", "icon"]
                })
            }))
        });
        Object.defineProperty(_this, "_movePoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { x: 0, y: 0 }
        });
        Object.defineProperty(_this, "_wheelDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(XYChart.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._defaultThemes.push(_XYChartDefaultTheme__WEBPACK_IMPORTED_MODULE_6__.XYChartDefaultTheme["new"](this._root));
            _super.prototype._afterNew.call(this);
            this._disposers.push(this.xAxes);
            this._disposers.push(this.yAxes);
            var root = this._root;
            var verticalLayout = this._root.verticalLayout;
            var zoomOutButton = this.zoomOutButton;
            zoomOutButton.events.on("click", function () {
                _this.zoomOut();
            });
            zoomOutButton.set("opacity", 0);
            zoomOutButton.states.lookup("default").set("opacity", 1);
            this.chartContainer.set("layout", verticalLayout);
            var plotContainer = this.plotContainer;
            plotContainer.children.push(this.seriesContainer);
            this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));
            this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));
            plotContainer.children.push(this.topGridContainer);
            plotContainer.children.push(this.bulletsContainer);
            plotContainer.children.moveValue(zoomOutButton);
            // Setting trasnparent background so that full body of the plot container
            // is interactive
            plotContainer.set("interactive", true);
            plotContainer.set("interactiveChildren", false);
            plotContainer.set("background", _core_render_Rectangle__WEBPACK_IMPORTED_MODULE_7__.Rectangle["new"](root, {
                themeTags: ["xy", "background"],
                fill: _core_util_Color__WEBPACK_IMPORTED_MODULE_8__.Color.fromHex(0x000000),
                fillOpacity: 0
            }));
            this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                _this._handlePlotDown(event.originalEvent);
            }));
            this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                _this._handlePlotUp(event.originalEvent);
            }));
            this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                _this._handlePlotMove(event.originalEvent);
            }));
        }
    });
    Object.defineProperty(XYChart.prototype, "_removeSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            var xAxis = series.get("xAxis");
            if (xAxis) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.remove(xAxis.series, series);
            }
            var yAxis = series.get("yAxis");
            if (yAxis) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.remove(yAxis.series, series);
            }
            _super.prototype._removeSeries.call(this, series);
        }
    });
    Object.defineProperty(XYChart.prototype, "_handleSetWheel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var wheelX = this.get("wheelX");
            var wheelY = this.get("wheelY");
            var plotContainer = this.plotContainer;
            if (wheelX !== "none" || wheelY !== "none") {
                plotContainer.set("wheelable", true);
                this._wheelDp = plotContainer.events.on("wheel", function (event) {
                    var wheelEvent = event.originalEvent;
                    var plotPoint = plotContainer._display.toLocal(_this._root.documentPointToRoot({ x: wheelEvent.clientX, y: wheelEvent.clientY }));
                    var wheelStep = _this.get("wheelStep", 0.2);
                    var shiftY = wheelEvent.deltaY / 100;
                    var shiftX = wheelEvent.deltaX / 100;
                    if ((wheelX === "zoomX" || wheelX === "zoomXY") && shiftX != 0) {
                        _this.xAxes.each(function (axis) {
                            if (axis.get("zoomX")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                                var newStart = start - wheelStep * (end - start) * shiftX * position;
                                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                                if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity)) {
                                    axis.zoom(newStart, newEnd);
                                }
                            }
                        });
                    }
                    if ((wheelY === "zoomX" || wheelY === "zoomXY") && shiftY != 0) {
                        _this.xAxes.each(function (axis) {
                            if (axis.get("zoomX")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                                var newStart = start - wheelStep * (end - start) * shiftY * position;
                                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                                if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity)) {
                                    axis.zoom(newStart, newEnd);
                                }
                            }
                        });
                    }
                    if ((wheelX === "zoomY" || wheelX === "zoomXY") && shiftX != 0) {
                        _this.yAxes.each(function (axis) {
                            if (axis.get("zoomY")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                                var newStart = start - wheelStep * (end - start) * shiftX * position;
                                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                                if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity)) {
                                    axis.zoom(newStart, newEnd);
                                }
                            }
                        });
                    }
                    if ((wheelY === "zoomY" || wheelY === "zoomXY") && shiftY != 0) {
                        _this.yAxes.each(function (axis) {
                            if (axis.get("zoomY")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                                var newStart = start - wheelStep * (end - start) * shiftY * position;
                                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                                if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity)) {
                                    axis.zoom(newStart, newEnd);
                                }
                            }
                        });
                    }
                    if ((wheelX === "panX" || wheelX === "panXY") && shiftX != 0) {
                        _this.xAxes.each(function (axis) {
                            if (axis.get("panX")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                                var newStart = start + wheelStep * (end - start) * shiftX * position;
                                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                                axis.zoom(newStart, newEnd);
                            }
                        });
                    }
                    if ((wheelY === "panX" || wheelY === "panXY") && shiftY != 0) {
                        _this.xAxes.each(function (axis) {
                            if (axis.get("panX")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                                var newStart = start + wheelStep * (end - start) * shiftY * position;
                                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                                axis.zoom(newStart, newEnd);
                            }
                        });
                    }
                    if ((wheelX === "panY" || wheelX === "panXY") && shiftX != 0) {
                        _this.yAxes.each(function (axis) {
                            if (axis.get("panY")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                                var newStart = start + wheelStep * (end - start) * shiftX * position;
                                var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                                axis.zoom(newStart, newEnd);
                            }
                        });
                    }
                    if ((wheelY === "panY" || wheelY === "panXY") && shiftY != 0) {
                        _this.yAxes.each(function (axis) {
                            if (axis.get("panY")) {
                                var start = axis.get("start");
                                var end = axis.get("end");
                                var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                                var newStart = start + wheelStep * (end - start) * shiftY * position;
                                var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                                axis.zoom(newStart, newEnd);
                            }
                        });
                    }
                });
                this._disposers.push(this._wheelDp);
            }
            else {
                plotContainer.set("wheelable", false);
                if (this._wheelDp) {
                    this._wheelDp.dispose();
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_handlePlotDown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            // TODO: handle multitouch
            if (this.get("panX") || this.get("panY")) {
                var plotContainer = this.plotContainer;
                var local = plotContainer._display.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {
                    this._downPoint = local;
                    var panX = this.get("panX");
                    var panY = this.get("panY");
                    if (panX) {
                        this.xAxes.each(function (axis) {
                            axis._panStart = axis.get("start");
                            axis._panEnd = axis.get("end");
                        });
                    }
                    if (panY) {
                        this.yAxes.each(function (axis) {
                            axis._panStart = axis.get("start");
                            axis._panEnd = axis.get("end");
                        });
                    }
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_handlePlotUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_event) {
            // TODO: handle multitouch
            this._downPoint = undefined;
        }
    });
    Object.defineProperty(XYChart.prototype, "_handlePlotMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            // TODO: handle multitouch
            var downPoint = this._downPoint;
            if (downPoint) {
                var plotContainer_1 = this.plotContainer;
                var local_1 = plotContainer_1._display.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                var panX = this.get("panX");
                var panY = this.get("panY");
                if (panX) {
                    var scrollbarX = this.get("scrollbarX");
                    if (scrollbarX) {
                        scrollbarX.events.disableType("rangechanged");
                    }
                    this.xAxes.each(function (axis) {
                        if (axis.get("panX")) {
                            //const maxDeviation = axis.get("maxDeviation", 0);
                            var panStart = axis._panStart;
                            var panEnd = axis._panEnd;
                            var difference = (panEnd - panStart);
                            var deltaX = difference * (downPoint.x - local_1.x) / plotContainer_1.width();
                            if (axis.get("renderer").get("inversed")) {
                                deltaX *= -1;
                            }
                            var start = panStart + deltaX;
                            var end = panEnd + deltaX;
                            //axis.set("start", Math.max(-maxDeviation, start));
                            //axis.set("end", Math.min(1 + maxDeviation, end));
                            axis.set("start", start);
                            axis.set("end", end);
                        }
                    });
                    if (scrollbarX) {
                        scrollbarX.events.enableType("rangechanged");
                    }
                }
                if (panY) {
                    var scrollbarY = this.get("scrollbarY");
                    if (scrollbarY) {
                        scrollbarY.events.disableType("rangechanged");
                    }
                    this.yAxes.each(function (axis) {
                        if (axis.get("panY")) {
                            //const maxDeviation = axis.get("maxDeviation", 0);
                            var panStart = axis._panStart;
                            var panEnd = axis._panEnd;
                            var difference = (panEnd - panStart);
                            var deltaY = difference * (downPoint.y - local_1.y) / plotContainer_1.height();
                            if (axis.get("renderer").get("inversed")) {
                                deltaY *= -1;
                            }
                            var start = panStart - deltaY;
                            var end = panEnd - deltaY;
                            //axis.set("start", Math.max(-maxDeviation, start));
                            //axis.set("end", Math.min(1 + maxDeviation, end));
                            axis.set("start", start);
                            axis.set("end", end);
                        }
                    });
                    if (scrollbarY) {
                        scrollbarY.events.enableType("rangechanged");
                    }
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_handleCursorPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var cursor = this.get("cursor");
            if (cursor) {
                var cursorPoint_1 = cursor.getPrivate("point");
                var snapToSeries = cursor.get("snapToSeries");
                if (snapToSeries && cursorPoint_1) {
                    var dataItems_1 = [];
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(snapToSeries, function (series) {
                        if (!series.isHidden() && !series.isHiding()) {
                            var startIndex = series.getPrivate("startIndex", 0);
                            var endIndex = series.getPrivate("endIndex", series.dataItems.length - 1);
                            for (var i = startIndex; i < endIndex; i++) {
                                var dataItem = series.dataItems[i];
                                if (dataItem && !dataItem.isHidden()) {
                                    dataItems_1.push(dataItem);
                                }
                            }
                        }
                    });
                    var minDistance_1 = Infinity;
                    var closestItem_1;
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(dataItems_1, function (dataItem) {
                        var point = dataItem.get("point");
                        if (point) {
                            var distance = Math.hypot(cursorPoint_1.x - point.x, cursorPoint_1.y - point.y);
                            if (distance < minDistance_1) {
                                minDistance_1 = distance;
                                closestItem_1 = dataItem;
                            }
                        }
                    });
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(snapToSeries, function (series) {
                        var tooltip = series.get("tooltip");
                        if (tooltip) {
                            tooltip._setDataItem(undefined);
                        }
                    });
                    if (closestItem_1) {
                        var series = closestItem_1.component;
                        series.showDataItemTooltip(closestItem_1);
                        var point = closestItem_1.get("point");
                        if (point) {
                            cursor.handleMove(series.toGlobal(point), true);
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_updateCursor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var cursor = this.get("cursor");
            if (cursor) {
                cursor.handleMove();
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_addCursor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (cursor) {
            this.plotContainer.children.push(cursor);
        }
    });
    Object.defineProperty(XYChart.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._prepareChildren.call(this);
            this.series.each(function (series) {
                _this._colorize(series);
            });
            if (this.isDirty("wheelX") || this.isDirty("wheelY")) {
                this._handleSetWheel();
            }
            if (this.isDirty("cursor")) {
                var previous = this._prevSettings.cursor;
                var cursor = this.get("cursor");
                if (cursor !== previous) {
                    this._disposeProperty("cursor");
                    if (previous) {
                        previous.dispose();
                    }
                    if (cursor) {
                        cursor._setChart(this);
                        this._addCursor(cursor);
                        this._pushPropertyDisposer("cursor", cursor.events.on("selectended", function () {
                            _this._handleCursorSelectEnd();
                        }));
                    }
                    //this.setRaw("cursor", cursor) // to reset previous value
                    this._prevSettings.cursor = cursor;
                }
            }
            if (this.isDirty("scrollbarX")) {
                var previous = this._prevSettings.scrollbarX;
                var scrollbarX = this.get("scrollbarX");
                if (scrollbarX !== previous) {
                    this._disposeProperty("scrollbarX");
                    if (previous) {
                        previous.dispose();
                    }
                    if (scrollbarX) {
                        if (!scrollbarX.parent) {
                            this.topAxesContainer.children.push(scrollbarX);
                        }
                        this._pushPropertyDisposer("scrollbarX", scrollbarX.events.on("rangechanged", function (e) {
                            _this._handleScrollbar(_this.xAxes, e.start, e.end);
                        }));
                        // Used to populate `ariaLabel` with meaningful values
                        scrollbarX.setPrivate("positionTextFunction", function (position) {
                            var axis = _this.xAxes.getIndex(0);
                            return axis ? axis.getTooltipText(position) || "" : "";
                        });
                    }
                    this._prevSettings.scrollbarX = scrollbarX;
                }
            }
            if (this.isDirty("scrollbarY")) {
                var previous = this._prevSettings.scrollbarY;
                var scrollbarY = this.get("scrollbarY");
                if (scrollbarY !== previous) {
                    this._disposeProperty("scrollbarY");
                    if (previous) {
                        previous.dispose();
                    }
                    if (scrollbarY) {
                        if (!scrollbarY.parent) {
                            this.rightAxesContainer.children.push(scrollbarY);
                        }
                        this._pushPropertyDisposer("scrollbarY", scrollbarY.events.on("rangechanged", function (e) {
                            _this._handleScrollbar(_this.yAxes, e.start, e.end);
                        }));
                        // Used to populate `ariaLabel` with meaningful values
                        scrollbarY.setPrivate("positionTextFunction", function (position) {
                            var axis = _this.yAxes.getIndex(0);
                            return axis ? axis.getTooltipText(position) || "" : "";
                        });
                    }
                    this._prevSettings.scrollbarY = scrollbarY;
                }
            }
            this._handleZoomOut();
        }
    });
    Object.defineProperty(XYChart.prototype, "_processSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            _super.prototype._processSeries.call(this, series);
            this._colorize(series);
        }
    });
    Object.defineProperty(XYChart.prototype, "_colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            var colorSet = this.get("colors");
            if (colorSet) {
                if (series.get("fill") == null) {
                    var color = colorSet.next();
                    series._setSoft("stroke", color);
                    series._setSoft("fill", color);
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_handleCursorSelectEnd", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var cursor = this.get("cursor");
            var behavior = cursor.get("behavior");
            var downPositionX = cursor.getPrivate("downPositionX", 0);
            var downPositionY = cursor.getPrivate("downPositionY", 0);
            var positionX = cursor.getPrivate("positionX", 0.5);
            var positionY = cursor.getPrivate("positionY", 0.5);
            this.xAxes.each(function (axis) {
                if (behavior === "zoomX" || behavior === "zoomXY") {
                    var position0 = axis.toAxisPosition(downPositionX);
                    var position1 = axis.toAxisPosition(positionX);
                    axis.zoom(position0, position1);
                }
                axis.setPrivate("updateScrollbar", true);
            });
            this.yAxes.each(function (axis) {
                if (behavior === "zoomY" || behavior === "zoomXY") {
                    var position0 = axis.toAxisPosition(downPositionY);
                    var position1 = axis.toAxisPosition(positionY);
                    axis.zoom(position0, position1);
                }
                axis.setPrivate("updateScrollbar", true);
            });
        }
    });
    Object.defineProperty(XYChart.prototype, "_handleScrollbar", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axes, start, end) {
            axes.each(function (axis) {
                var axisStart = axis.fixPosition(start);
                var axisEnd = axis.fixPosition(end);
                var zoomAnimation = axis.zoom(axisStart, axisEnd);
                var updateScrollbar = "updateScrollbar";
                axis.setPrivateRaw(updateScrollbar, false);
                if (zoomAnimation) {
                    zoomAnimation.events.on("stopped", function () {
                        axis.setPrivateRaw(updateScrollbar, true);
                    });
                }
                else {
                    axis.setPrivateRaw(updateScrollbar, true);
                }
            });
        }
    });
    Object.defineProperty(XYChart.prototype, "_processAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axes, container) {
            var _this = this;
            return axes.events.onAll(function (change) {
                if (change.type === "clear") {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(change.oldValues, function (axis) {
                        _this._removeAxis(axis);
                    });
                }
                else if (change.type === "push") {
                    container.children.push(change.newValue);
                    change.newValue.processChart(_this);
                }
                else if (change.type === "setIndex") {
                    container.children.setIndex(change.index, change.newValue);
                    change.newValue.processChart(_this);
                }
                else if (change.type === "insertIndex") {
                    container.children.insertIndex(change.index, change.newValue);
                    change.newValue.processChart(_this);
                }
                else if (change.type === "removeIndex") {
                    _this._removeAxis(change.oldValue);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            });
        }
    });
    Object.defineProperty(XYChart.prototype, "_removeAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axis) {
            if (!axis.isDisposed()) {
                var axisParent = axis.parent;
                if (axisParent) {
                    axisParent.children.removeValue(axis);
                }
                var gridContainer = axis.gridContainer;
                var gridParent = gridContainer.parent;
                if (gridParent) {
                    gridParent.children.removeValue(gridContainer);
                }
                var topGridContainer = axis.topGridContainer;
                var topGridParent = topGridContainer.parent;
                if (topGridParent) {
                    topGridParent.children.removeValue(topGridContainer);
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_updateChartLayout", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var left = this.leftAxesContainer.width();
            var right = this.rightAxesContainer.width();
            var bottomAxesContainer = this.bottomAxesContainer;
            bottomAxesContainer.set("paddingLeft", left);
            bottomAxesContainer.set("paddingRight", right);
            var topAxesContainer = this.topAxesContainer;
            topAxesContainer.set("paddingLeft", left);
            topAxesContainer.set("paddingRight", right);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYChart.prototype, "processAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_axis) { }
    });
    ;
    Object.defineProperty(XYChart.prototype, "_handleAxisSelection", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axis) {
            var _a;
            var start = axis.fixPosition(axis.get("start", 0));
            var end = axis.fixPosition(axis.get("end", 1));
            if (start > end) {
                _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)([end, start], 2), start = _a[0], end = _a[1];
            }
            if (this.xAxes.indexOf(axis) != -1) {
                if (axis.getPrivate("updateScrollbar")) {
                    var scrollbarX = this.get("scrollbarX");
                    if (scrollbarX && !scrollbarX.getPrivate("isBusy")) {
                        scrollbarX.setRaw("start", start);
                        scrollbarX.setRaw("end", end);
                        scrollbarX.updateGrips();
                    }
                }
            }
            else if (this.yAxes.indexOf(axis) != -1) {
                if (axis.getPrivate("updateScrollbar")) {
                    var scrollbarY = this.get("scrollbarY");
                    if (scrollbarY && !scrollbarY.getPrivate("isBusy")) {
                        scrollbarY.setRaw("start", start);
                        scrollbarY.setRaw("end", end);
                        scrollbarY.updateGrips();
                    }
                }
            }
            this._handleZoomOut();
        }
    });
    Object.defineProperty(XYChart.prototype, "_handleZoomOut", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var zoomOutButton = this.zoomOutButton;
            if (zoomOutButton && zoomOutButton.parent) {
                var visible_1 = false;
                this.xAxes.each(function (axis) {
                    if (axis.get("start") != 0 || axis.get("end") != 1) {
                        visible_1 = true;
                    }
                });
                this.yAxes.each(function (axis) {
                    if (axis.get("start") != 0 || axis.get("end") != 1) {
                        visible_1 = true;
                    }
                });
                if (visible_1) {
                    if (zoomOutButton.isHidden()) {
                        zoomOutButton.show();
                    }
                }
                else {
                    zoomOutButton.hide();
                }
            }
        }
    });
    /**
     * Checks if point is within plot area.
     *
     * @param   point  Reference point
     * @return         Is within plot area?
     */
    Object.defineProperty(XYChart.prototype, "inPlot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            var plotContainer = this.plotContainer;
            if (point.x >= -0.1 && point.y >= -0.1 && point.x <= plotContainer.width() + 0.1 && point.y <= plotContainer.height() + 0.1) {
                return true;
            }
            return false;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYChart.prototype, "arrangeTooltips", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var plotContainer = this.plotContainer;
            var w = plotContainer.width();
            var h = plotContainer.height();
            var plotT = plotContainer._display.toGlobal({ x: 0, y: 0 });
            var plotB = plotContainer._display.toGlobal({ x: w, y: h });
            var tooltips = [];
            var sum = 0;
            var minDistance = Infinity;
            var movePoint = this._movePoint;
            var maxTooltipDistance = this.get("maxTooltipDistance");
            var closest;
            var closestPoint;
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_10__.isNumber(maxTooltipDistance)) {
                this.series.each(function (series) {
                    var tooltip = series.get("tooltip");
                    if (tooltip) {
                        var point = tooltip.get("pointTo");
                        if (point) {
                            var distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);
                            if (distance < minDistance) {
                                minDistance = distance;
                                closest = series;
                                closestPoint = point;
                            }
                        }
                    }
                });
            }
            this.series.each(function (series) {
                var tooltip = series.get("tooltip");
                if (tooltip) {
                    var hidden = false;
                    var point = tooltip.get("pointTo");
                    if (point) {
                        if (maxTooltipDistance >= 0) {
                            var point_1 = tooltip.get("pointTo");
                            if (point_1) {
                                if (series != closest) {
                                    var distance = Math.hypot(closestPoint.x - point_1.x, closestPoint.y - point_1.y);
                                    if (distance > maxTooltipDistance) {
                                        hidden = true;
                                    }
                                }
                            }
                        }
                        if (!_this.inPlot(_this._tooltipToLocal(point)) || !tooltip.dataItem) {
                            hidden = true;
                        }
                        else {
                            sum += point.y;
                        }
                        if (hidden || series.isHidden() || series.isHiding()) {
                            tooltip.hide(0);
                        }
                        else {
                            tooltip.show();
                            tooltips.push(tooltip);
                        }
                    }
                }
            });
            if (this.get("arrangeTooltips")) {
                var tooltipContainer_1 = this._root.tooltipContainer;
                tooltips.sort(function (a, b) { return _core_util_Order__WEBPACK_IMPORTED_MODULE_11__.compareNumber(a.get("pointTo").y, b.get("pointTo").y); });
                var count = tooltips.length;
                var average = sum / count;
                if (average > h / 2 + plotT.y) {
                    tooltips.reverse();
                    var prevY_1 = plotB.y;
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(tooltips, function (tooltip) {
                        var height = tooltip.height();
                        var centerY = tooltip.get("centerY");
                        if (centerY instanceof _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.Percent) {
                            height *= centerY.value;
                        }
                        height += tooltip.get("marginBottom", 0);
                        tooltip.set("bounds", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY_1 });
                        prevY_1 = Math.min(prevY_1 - height, tooltip._fy - height);
                        tooltipContainer_1.children.moveValue(tooltip, 0);
                    });
                }
                else {
                    var prevY_2 = 0;
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_9__.each(tooltips, function (tooltip) {
                        var height = tooltip.height();
                        var centerY = tooltip.get("centerY");
                        if (centerY instanceof _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.Percent) {
                            height *= centerY.value;
                        }
                        height += tooltip.get("marginBottom", 0);
                        tooltip.set("bounds", { left: plotT.x, top: prevY_2, right: plotB.x, bottom: Math.max(plotT.y + h, prevY_2 + height) });
                        tooltipContainer_1.children.moveValue(tooltip, 0);
                        prevY_2 = Math.max(prevY_2 + height, tooltip._fy + height);
                    });
                }
            }
        }
    });
    Object.defineProperty(XYChart.prototype, "_tooltipToLocal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return this.plotContainer._display.toLocal(point);
        }
    });
    /**
     * Fully zooms out the chart.
     */
    Object.defineProperty(XYChart.prototype, "zoomOut", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.xAxes.each(function (axis) {
                axis.setPrivate("updateScrollbar", true);
                axis.zoom(0, 1);
            });
            this.yAxes.each(function (axis) {
                axis.setPrivate("updateScrollbar", true);
                axis.zoom(0, 1);
            });
        }
    });
    Object.defineProperty(XYChart, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "XYChart"
    });
    Object.defineProperty(XYChart, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_SerialChart__WEBPACK_IMPORTED_MODULE_12__.SerialChart.classNames.concat([XYChart.className])
    });
    return XYChart;
}(_core_render_SerialChart__WEBPACK_IMPORTED_MODULE_12__.SerialChart));

//# sourceMappingURL=XYChart.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChartDefaultTheme.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChartDefaultTheme.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XYChartDefaultTheme": () => (/* binding */ XYChartDefaultTheme)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_Theme__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/Theme */ "./node_modules/@amcharts/amcharts5/.internal/core/Theme.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_ColorSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/ColorSet */ "./node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js");
/* harmony import */ var _themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../themes/DefaultTheme */ "./node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/* harmony import */ var _core_util_Object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");









/**
 * @ignore
 */
var XYChartDefaultTheme = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(XYChartDefaultTheme, _super);
    function XYChartDefaultTheme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(XYChartDefaultTheme.prototype, "setupDefaultRules", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.setupDefaultRules.call(this);
            var ic = this._root.interfaceColors;
            var language = this._root.language;
            var r = this.rule.bind(this);
            /**
             * ========================================================================
             * charts/xy
             * ========================================================================
             */
            r("XYChart").setAll({
                colors: _core_util_ColorSet__WEBPACK_IMPORTED_MODULE_1__.ColorSet["new"](this._root, {}),
                paddingLeft: 20,
                paddingRight: 20,
                paddingTop: 16,
                paddingBottom: 16,
                panX: false,
                panY: false,
                wheelStep: 0.25,
                arrangeTooltips: true
            });
            /**
             * ------------------------------------------------------------------------
             * charts/xy: XYChartScrollbar
             * ------------------------------------------------------------------------
             */
            r("XYChart", ["scrollbar", "chart"]).setAll({
                paddingBottom: 0,
                paddingLeft: 0,
                paddingTop: 0,
                paddingRight: 0,
                colors: _core_util_ColorSet__WEBPACK_IMPORTED_MODULE_1__.ColorSet["new"](this._root, {
                    saturation: 0
                })
            });
            {
                var rule = r("Graphics", ["scrollbar", "overlay"]);
                rule.setAll({
                    fillOpacity: 0.5
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "fill", ic, "background");
            }
            // Class: RoundedRectangle
            r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).setAll({
                cornerRadiusTR: 0,
                cornerRadiusTL: 0,
                cornerRadiusBR: 0,
                cornerRadiusBL: 0,
                fillOpacity: 0,
                focusable: true
            });
            r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).states.create("hover", { fillOpacity: 0.4 });
            r("RoundedRectangle", ["xy", "scrollbar", "chart", "background"]).setAll({
                cornerRadiusTL: 0,
                cornerRadiusBL: 0,
                cornerRadiusTR: 0,
                cornerRadiusBR: 0
            });
            r("RoundedRectangle", ["xy", "scrollbar", "chart", "background", "resize", "button"]).setAll({
                cornerRadiusBL: 40,
                cornerRadiusBR: 40,
                cornerRadiusTL: 40,
                cornerRadiusTR: 40
            });
            r("AxisRendererX", ["xy", "chart", "scrollbar"]).setAll({
                strokeOpacity: 0,
                inside: true
            });
            r("AxisRendererY", ["xy", "chart", "scrollbar"]).setAll({
                strokeOpacity: 0,
                inside: true,
                minGridDistance: 5
            });
            r("AxisLabel", ["xy", "scrollbar", "x"]).setAll({
                opacity: 0.5,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                minPosition: 0.01,
                maxPosition: 0.99,
                fontSize: "0.8em"
            });
            r("AxisLabel", ["category"]).setAll({
                text: "{category}",
                populateText: true
            });
            r("AxisLabel", ["x"]).setAll({
                centerY: 0
            });
            r("AxisLabel", ["x", "inside"]).setAll({
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("AxisLabel", ["x", "inside", "opposite"]).setAll({
                centerY: 0
            });
            r("AxisLabel", ["x", "opposite"]).setAll({
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("AxisLabel", ["y"]).setAll({
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("AxisLabel", ["y", "inside"]).setAll({
                centerX: 0
            });
            r("AxisLabel", ["y", "inside", "opposite"]).setAll({
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("AxisLabel", ["y", "opposite"]).setAll({
                centerX: 0
            });
            r("AxisLabel", ["xy", "scrollbar", "y"]).setAll({
                visible: false
            });
            // Class: Grid
            r("Grid", ["xy", "scrollbar", "y"]).setAll({
                visible: false
            });
            // Class: Grid
            r("Grid", ["xy", "scrollbar", "x"]).setAll({
                opacity: 0.5
            });
            /**
             * ------------------------------------------------------------------------
             * charts/xy: Cursor
             * ------------------------------------------------------------------------
             */
            r("XYCursor").setAll({
                behavior: "none",
                layer: 20,
                exportable: false
            });
            {
                var rule = r("Grid", ["cursor", "x"]);
                rule.setAll({
                    strokeOpacity: 0.8,
                    strokeDasharray: [2, 2]
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "alternativeBackground");
            }
            {
                var rule = r("Grid", ["cursor", "y"]);
                rule.setAll({
                    strokeOpacity: 0.8,
                    strokeDasharray: [2, 2]
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "alternativeBackground");
            }
            {
                var rule = r("Graphics", ["cursor", "selection"]);
                rule.setAll({
                    fillOpacity: 0.15,
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "fill", ic, "alternativeBackground");
            }
            /**
             * ------------------------------------------------------------------------
             * charts/xy: Axes
             * ------------------------------------------------------------------------
             */
            r("Axis").setAll({
                start: 0,
                end: 1,
                minZoomCount: 1,
                maxZoomCount: Infinity,
                maxZoomFactor: 1000,
                maxDeviation: 0.1,
                snapTooltip: true,
                tooltipLocation: 0.5,
                panX: true,
                panY: true,
                zoomX: true,
                zoomY: true,
                fixAxisSize: true
            });
            r("AxisLabel").setAll({
                location: 0.5,
                multiLocation: 0,
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                paddingTop: 3,
                paddingBottom: 3,
                paddingLeft: 5,
                paddingRight: 5
            });
            r("AxisLabel", ["y"]).setAll({
                textAlign: "right"
            });
            r("AxisLabel", ["y", "opposite"]).setAll({
                textAlign: "left"
            });
            r("Container", ["axis", "header"]).setAll({
                layer: 30
            });
            {
                var rule = r("AxisRenderer");
                rule.setAll({
                    strokeOpacity: 0
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "grid");
            }
            r("AxisRendererX").setAll({
                minGridDistance: 120,
                opposite: false,
                inversed: false,
                cellStartLocation: 0,
                cellEndLocation: 1,
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("AxisRendererY").setAll({
                minGridDistance: 40,
                opposite: false,
                inversed: false,
                cellStartLocation: 0,
                cellEndLocation: 1,
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            {
                var rule = r("Grid");
                rule.setAll({
                    location: 0,
                    strokeOpacity: 0.15,
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "grid");
            }
            r("Grid", ["base"]).setAll({
                strokeOpacity: 0.3
            });
            {
                var rule = r("Graphics", ["axis", "fill"]);
                rule.setAll({
                    visible: false,
                    isMeasured: false,
                    position: "absolute",
                    fillOpacity: 0.05,
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "fill", ic, "alternativeBackground");
            }
            {
                var rule = r("AxisTick");
                rule.setAll({
                    location: 0.5,
                    multiLocation: 0,
                    strokeOpacity: 1,
                    isMeasured: false,
                    position: "absolute",
                    visible: false
                });
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "grid");
            }
            r("CategoryAxis").setAll({
                startLocation: 0,
                endLocation: 1,
                fillRule: function (dataItem, index) {
                    var axisFill = dataItem.get("axisFill");
                    if (axisFill) {
                        if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(index) || index % 2 == 0) {
                            axisFill.setPrivate("visible", true);
                        }
                        else {
                            axisFill.setPrivate("visible", false);
                        }
                    }
                }
            });
            var gridIntervals = [
                { timeUnit: "millisecond", count: 1 },
                { timeUnit: "millisecond", count: 5 },
                { timeUnit: "millisecond", count: 10 },
                { timeUnit: "millisecond", count: 50 },
                { timeUnit: "millisecond", count: 100 },
                { timeUnit: "millisecond", count: 500 },
                { timeUnit: "second", count: 1 },
                { timeUnit: "second", count: 5 },
                { timeUnit: "second", count: 10 },
                { timeUnit: "second", count: 30 },
                { timeUnit: "minute", count: 1 },
                { timeUnit: "minute", count: 5 },
                { timeUnit: "minute", count: 10 },
                { timeUnit: "minute", count: 15 },
                { timeUnit: "minute", count: 30 },
                { timeUnit: "hour", count: 1 },
                { timeUnit: "hour", count: 3 },
                { timeUnit: "hour", count: 6 },
                { timeUnit: "hour", count: 12 },
                { timeUnit: "day", count: 1 },
                { timeUnit: "day", count: 2 },
                { timeUnit: "day", count: 3 },
                { timeUnit: "day", count: 4 },
                { timeUnit: "day", count: 5 },
                { timeUnit: "week", count: 1 },
                { timeUnit: "month", count: 1 },
                { timeUnit: "month", count: 2 },
                { timeUnit: "month", count: 3 },
                { timeUnit: "month", count: 6 },
                { timeUnit: "year", count: 1 },
                { timeUnit: "year", count: 2 },
                { timeUnit: "year", count: 5 },
                { timeUnit: "year", count: 10 },
                { timeUnit: "year", count: 50 },
                { timeUnit: "year", count: 100 },
                { timeUnit: "year", count: 200 },
                { timeUnit: "year", count: 500 },
                { timeUnit: "year", count: 1000 },
                { timeUnit: "year", count: 2000 },
                { timeUnit: "year", count: 5000 },
                { timeUnit: "year", count: 10000 },
                { timeUnit: "year", count: 100000 }
            ];
            var dateFormats = {
                "millisecond": language.translate("_date_millisecond"),
                "second": language.translate("_date_second"),
                "minute": language.translate("_date_minute"),
                "hour": language.translate("_date_hour"),
                "day": language.translate("_date_day"),
                "week": language.translate("_date_day"),
                "month": language.translate("_date_month"),
                "year": language.translate("_date_year"),
            };
            var periodChangeDateFormats = {
                "millisecond": language.translate("_date_millisecond"),
                "second": language.translate("_date_second"),
                "minute": language.translate("_date_minute"),
                "hour": language.translate("_date_day"),
                "day": language.translate("_date_day"),
                "week": language.translate("_date_day"),
                "month": language.translate("_date_month") + " " + language.translate("_date_year"),
                "year": language.translate("_date_year")
            };
            r("CategoryDateAxis").setAll({
                markUnitChange: true,
                gridIntervals: _core_util_Array__WEBPACK_IMPORTED_MODULE_5__.copy(gridIntervals),
                dateFormats: _core_util_Object__WEBPACK_IMPORTED_MODULE_6__.copy(dateFormats),
                periodChangeDateFormats: _core_util_Object__WEBPACK_IMPORTED_MODULE_6__.copy(periodChangeDateFormats)
            });
            r("DateAxis").setAll({
                strictMinMax: true,
                startLocation: 0,
                endLocation: 1,
                markUnitChange: true,
                groupData: false,
                groupCount: 500,
                gridIntervals: _core_util_Array__WEBPACK_IMPORTED_MODULE_5__.copy(gridIntervals),
                dateFormats: _core_util_Object__WEBPACK_IMPORTED_MODULE_6__.copy(dateFormats),
                periodChangeDateFormats: _core_util_Object__WEBPACK_IMPORTED_MODULE_6__.copy(periodChangeDateFormats),
                groupIntervals: [
                    { timeUnit: "millisecond", count: 1 },
                    { timeUnit: "millisecond", count: 10 },
                    { timeUnit: "millisecond", count: 100 },
                    { timeUnit: "second", count: 1 },
                    { timeUnit: "second", count: 10 },
                    { timeUnit: "minute", count: 1 },
                    { timeUnit: "minute", count: 10 },
                    { timeUnit: "hour", count: 1 },
                    { timeUnit: "day", count: 1 },
                    { timeUnit: "week", count: 1 },
                    { timeUnit: "month", count: 1 },
                    { timeUnit: "year", count: 1 }
                ],
                fillRule: function (dataItem) {
                    var axisFill = dataItem.get("axisFill");
                    if (axisFill) {
                        var axis = dataItem.component;
                        var value = dataItem.get("value");
                        var step = axis.getPrivate("step");
                        var min = axis.getPrivate("min", 0);
                        var intervalDuration = axis.intervalDuration();
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(value) && _core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(step)) {
                            if (Math.round((value - min) / intervalDuration) / 2 == Math.round(Math.round((value - min) / intervalDuration) / 2)) {
                                axisFill.setPrivate("visible", true);
                            }
                            else {
                                axisFill.setPrivate("visible", false);
                            }
                        }
                    }
                }
            });
            r("ValueAxis").setAll({
                baseValue: 0,
                logarithmic: false,
                extraMin: 0,
                extraMax: 0,
                strictMinMax: false,
                fillRule: function (dataItem) {
                    var axisFill = dataItem.get("axisFill");
                    if (axisFill) {
                        var axis = dataItem.component;
                        var value = dataItem.get("value");
                        var step = axis.getPrivate("step");
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(value) && _core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(step)) {
                            if (_core_util_Math__WEBPACK_IMPORTED_MODULE_7__.round(value / step / 2, 5) == Math.round(value / step / 2)) {
                                axisFill.setPrivate("visible", false);
                            }
                            else {
                                axisFill.setPrivate("visible", true);
                            }
                        }
                    }
                }
            });
            r("DurationAxis").setAll({
                baseUnit: "second"
            });
            /**
             * ------------------------------------------------------------------------
             * charts/xy: Series
             * ------------------------------------------------------------------------
             */
            r("XYSeries").setAll({
                maskBullets: true,
                stackToNegative: true,
                locationX: 0.5,
                locationY: 0.5,
                snapTooltip: false,
                openValueXGrouped: "open",
                openValueYGrouped: "open",
                valueXGrouped: "close",
                valueYGrouped: "close",
                seriesTooltipTarget: "series"
            });
            r("BaseColumnSeries").setAll({
                adjustBulletPosition: true
            });
            r("ColumnSeries").setAll({
                clustered: true
            });
            r("RoundedRectangle", ["series", "column"]).setAll({
                position: "absolute",
                isMeasured: false,
                width: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(70),
                height: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(70),
                strokeWidth: 1,
                strokeOpacity: 1,
                cornerRadiusBL: 0,
                cornerRadiusTL: 0,
                cornerRadiusBR: 0,
                cornerRadiusTR: 0,
                fillOpacity: 1,
                role: "figure"
            });
            r("LineSeries").setAll({
                connect: true,
                autoGapCount: 1.1,
                stackToNegative: false
            });
            r("Graphics", ["series", "stroke"]).setAll({
                position: "absolute",
                strokeWidth: 1,
                strokeOpacity: 1,
                isMeasured: false
            });
            r("Graphics", ["series", "fill"]).setAll({
                visible: false,
                fillOpacity: 0,
                position: "absolute",
                strokeWidth: 0,
                strokeOpacity: 0,
                isMeasured: false
            });
            r("Graphics", ["line", "series", "legend", "marker", "stroke"]).setAll({
                draw: function (display, sprite) {
                    var parent = sprite.parent;
                    if (parent) {
                        var h = parent.height();
                        var w = parent.width();
                        display.moveTo(0, h / 2);
                        display.lineTo(w, h / 2);
                    }
                }
            });
            {
                var rule = r("Graphics", ["line", "series", "legend", "marker", "stroke"]).states.create("disabled", {});
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "disabled");
            }
            r("Graphics", ["line", "series", "legend", "marker", "fill"]).setAll({
                draw: function (display, sprite) {
                    var parent = sprite.parent;
                    if (parent) {
                        var h = parent.height();
                        var w = parent.width();
                        display.moveTo(0, 0);
                        display.lineTo(w, 0);
                        display.lineTo(w, h);
                        display.lineTo(0, h);
                        display.lineTo(0, 0);
                    }
                }
            });
            {
                var rule = r("Graphics", ["line", "series", "legend", "marker", "fill"]).states.create("disabled", {});
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "disabled");
            }
            r("SmoothedXYLineSeries").setAll({
                tension: 0.5
            });
            r("SmoothedXLineSeries").setAll({
                tension: 0.5
            });
            r("SmoothedYLineSeries").setAll({
                tension: 0.5
            });
            r("Candlestick").setAll({
                position: "absolute",
                isMeasured: false,
                width: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(50),
                height: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(50),
                strokeWidth: 1,
                strokeOpacity: 1,
                cornerRadiusBL: 0,
                cornerRadiusTL: 0,
                cornerRadiusBR: 0,
                cornerRadiusTR: 0,
                fillOpacity: 1,
                role: "figure"
            });
            r("OHLC").setAll({
                width: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(80),
                height: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.percent)(80)
            });
            r("CandlestickSeries").setAll({
                lowValueXGrouped: "low",
                lowValueYGrouped: "low",
                highValueXGrouped: "high",
                highValueYGrouped: "high",
                openValueXGrouped: "open",
                openValueYGrouped: "open",
                valueXGrouped: "close",
                valueYGrouped: "close"
            });
            // These rules can be used for regular columns, too
            {
                var rule = r("Rectangle", ["column", "autocolor"]).states.create("riseFromOpen", {});
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "fill", ic, "positive");
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "positive");
            }
            {
                var rule = r("Rectangle", ["column", "autocolor"]).states.create("dropFromOpen", {});
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "fill", ic, "negative");
                (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_2__.setColor)(rule, "stroke", ic, "negative");
            }
            r("Rectangle", ["column", "autocolor", "pro"]).states.create("riseFromPrevious", { fillOpacity: 1 });
            r("Rectangle", ["column", "autocolor", "pro"]).states.create("dropFromPrevious", { fillOpacity: 0 });
        }
    });
    return XYChartDefaultTheme;
}(_core_Theme__WEBPACK_IMPORTED_MODULE_8__.Theme));

//# sourceMappingURL=XYChartDefaultTheme.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYCursor.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYCursor.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XYCursor": () => (/* binding */ XYCursor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _axes_Grid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./axes/Grid */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Grid.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _core_util_Object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");





//import { Animations } from "../core/util/Animation";



/**
 * Creates a chart cursor for an [[XYChart]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info
 * @important
 */
var XYCursor = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(XYCursor, _super);
    function XYCursor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
         *
         * @default Grid.new()
         */
        Object.defineProperty(_this, "lineX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_axes_Grid__WEBPACK_IMPORTED_MODULE_1__.Grid["new"](_this._root, {
                themeTags: ["x"]
            }))
        });
        /**
         * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
         *
         * @default Grid.new()
         */
        Object.defineProperty(_this, "lineY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_axes_Grid__WEBPACK_IMPORTED_MODULE_1__.Grid["new"](_this._root, {
                themeTags: ["y"]
            }))
        });
        /**
         * An element that represents current selection.
         *
         * @default Graphics.new()
         */
        Object.defineProperty(_this, "selection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics["new"](_this._root, {
                themeTags: ["selection", "cursor"], layer: 20
            }))
        });
        Object.defineProperty(_this, "_movePoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_lastPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { x: 0, y: 0 }
        });
        Object.defineProperty(_this, "_tooltipX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_tooltipY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * A chart cursor is attached to.
         */
        Object.defineProperty(_this, "chart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(XYCursor.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.mergeTags(this._settings.themeTags, ["xy", "cursor"]);
            _super.prototype._afterNew.call(this);
            this.setAll({ "width": _core_util_Percent__WEBPACK_IMPORTED_MODULE_4__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_4__.p100, isMeasured: true, position: "absolute" });
            this.states.create("hidden", { visible: true, opacity: 0 });
            this._drawLines();
            this.setPrivateRaw("visible", false);
            this._disposers.push(this.setTimeout(function () {
                _this.setPrivate("visible", true);
            }, 500));
        }
    });
    Object.defineProperty(XYCursor.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._prepareChildren.call(this);
            if (this.isDirty("xAxis")) {
                this._tooltipX = false;
                var xAxis = this.get("xAxis");
                if (xAxis) {
                    var tooltip_1 = xAxis.get("tooltip");
                    if (tooltip_1) {
                        this._tooltipX = true;
                        tooltip_1.on("pointTo", function () {
                            _this._updateXLine(tooltip_1);
                        });
                    }
                }
            }
            if (this.isDirty("yAxis")) {
                this._tooltipY = false;
                var yAxis = this.get("yAxis");
                if (yAxis) {
                    var tooltip_2 = yAxis.get("tooltip");
                    if (tooltip_2) {
                        this._tooltipY = true;
                        tooltip_2.on("pointTo", function () {
                            _this._updateYLine(tooltip_2);
                        });
                    }
                }
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("positionX") || this.isDirty("positionY")) {
                this._movePoint = this.toGlobal(this._getPoint(this.get("positionX", 0), this.get("positionY", 0)));
                this.handleMove();
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_updateXLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip) {
            this.lineX.animate({ key: "x", to: this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).x, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
        }
    });
    Object.defineProperty(XYCursor.prototype, "_updateYLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip) {
            this.lineY.animate({ key: "y", to: this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).y, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
        }
    });
    Object.defineProperty(XYCursor.prototype, "_drawLines", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this.lineX.set("draw", function (display) {
                display.moveTo(0, 0);
                display.lineTo(0, _this.height());
            });
            this.lineY.set("draw", function (display) {
                display.moveTo(0, 0);
                display.lineTo(_this.width(), 0);
            });
        }
    });
    Object.defineProperty(XYCursor.prototype, "_setChart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (chart) {
            var _this = this;
            this.chart = chart;
            var plotContainer = chart.plotContainer;
            this.events.on("boundschanged", function () {
                _this._disposers.push(_this.setTimeout(function () {
                    if (_this.get("alwaysShow")) {
                        _this._movePoint = _this.toGlobal(_this._getPoint(_this.get("positionX", 0), _this.get("positionY", 0)));
                        _this.handleMove();
                    }
                }, 50));
            });
            //this._display.interactive = true;
            if (_core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.supports("touchevents")) {
                this._disposers.push(plotContainer.events.on("click", function (event) {
                    if (_core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.isTouchEvent(event.originalEvent)) {
                        _this._handleMove(event.originalEvent);
                    }
                }));
            }
            this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                _this._handleCursorDown(event.originalEvent);
            }));
            this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                _this._handleCursorUp(event.originalEvent);
            }));
            this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                if (_core_util_Object__WEBPACK_IMPORTED_MODULE_5__.keys(plotContainer._downPoints).length == 0 && !event.native) {
                    // Ignore mouse movement if it originates on outside element and
                    // we're not dragging.
                    return;
                }
                _this._handleMove(event.originalEvent);
            }));
            var parent = this.parent;
            if (parent) {
                parent.children.moveValue(this.selection);
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_inPlot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            var chart = this.chart;
            if (chart) {
                return chart.inPlot(point);
            }
            return false;
        }
    });
    Object.defineProperty(XYCursor.prototype, "_handleCursorDown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            // TODO: handle multitouch
            var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
            var local = this._display.toLocal(rootPoint);
            var chart = this.chart;
            this.selection.set("draw", function () { });
            if (chart && this._inPlot(local)) {
                this._downPoint = local;
                if (this.get("behavior") != "none") {
                    this.selection.show();
                    var type = "selectstarted";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this });
                    }
                }
                var positionX = this._getPosition(local).x;
                var positionY = this._getPosition(local).y;
                this.setPrivate("downPositionX", positionX);
                this.setPrivate("downPositionY", positionY);
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_handleCursorUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_event) {
            // TODO: handle multitouch
            if (this._downPoint) {
                var behavior = this.get("behavior", "none");
                if (behavior != "none") {
                    if (behavior.charAt(0) === "z") {
                        this.selection.hide();
                    }
                    var userPositionX = this.get("positionX");
                    var positionX = this.getPrivate("positionX", 0);
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(userPositionX)) {
                        positionX = userPositionX;
                    }
                    var userPositionY = this.get("positionY");
                    var positionY = this.getPrivate("positionY", 0);
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(userPositionY)) {
                        positionY = userPositionY;
                    }
                    var dispatch = false;
                    if (behavior === "zoomX" || behavior === "zoomXY" || behavior === "selectX" || behavior === "selectXY") {
                        if (Math.abs(positionX - this.getPrivate("downPositionX", 0)) > 0.003) {
                            dispatch = true;
                        }
                    }
                    if (behavior === "zoomY" || behavior === "zoomXY" || behavior === "selectY" || behavior === "selectXY") {
                        if (Math.abs(positionY - this.getPrivate("downPositionY", 0)) > 0.003) {
                            dispatch = true;
                        }
                    }
                    if (dispatch) {
                        var type = "selectended";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                }
            }
            this._downPoint = undefined;
        }
    });
    Object.defineProperty(XYCursor.prototype, "_handleMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (this.getPrivate("visible")) {
                // TODO: handle multitouch
                var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                var lastPoint = this._lastPoint;
                if (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {
                    return;
                }
                this._lastPoint = rootPoint;
                this.handleMove({ x: rootPoint.x, y: rootPoint.y });
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_getPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return { x: point.x / this.width(), y: point.y / this.height() };
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYCursor.prototype, "handleMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point, skipEvent) {
            if (!point) {
                point = this._movePoint;
            }
            var alwaysShow = this.get("alwaysShow");
            if (!point) {
                this.hide(0);
                return;
            }
            this._movePoint = point;
            var local = this._display.toLocal(point);
            var chart = this.chart;
            if (chart && this._inPlot(local)) {
                chart._movePoint = point;
                if (this.isHidden()) {
                    this.show();
                    var behavior = this.get("behavior", "");
                    if (behavior.charAt(0) == "z") {
                        this.selection.set("draw", function () { });
                    }
                }
                var x = local.x;
                var y = local.y;
                var xyPos = this._getPosition(local);
                this.setPrivate("point", local);
                var snapToSeries_1 = this.get("snapToSeries");
                var userPositionX = this.get("positionX");
                var positionX_1 = xyPos.x;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(userPositionX)) {
                    positionX_1 = userPositionX;
                }
                var userPositionY = this.get("positionY");
                var positionY_1 = xyPos.y;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(userPositionY)) {
                    positionY_1 = userPositionY;
                }
                this.setPrivate("positionX", positionX_1);
                this.setPrivate("positionY", positionY_1);
                var xy = this._getPoint(positionX_1, positionY_1);
                x = xy.x;
                y = xy.y;
                chart.xAxes.each(function (axis) {
                    axis._handleCursorPosition(positionX_1, snapToSeries_1);
                    if (alwaysShow) {
                        axis.handleCursorShow();
                    }
                });
                chart.yAxes.each(function (axis) {
                    axis._handleCursorPosition(positionY_1, snapToSeries_1);
                    if (alwaysShow) {
                        axis.handleCursorShow();
                    }
                });
                if (!skipEvent) {
                    chart._handleCursorPosition();
                    var type = "cursormoved";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this });
                    }
                }
                this._updateLines(x, y);
                chart.arrangeTooltips();
            }
            else if (!this._downPoint) {
                if (!alwaysShow) {
                    this.hide(0);
                }
            }
            if (this._downPoint && this.get("behavior") != "none") {
                this._updateSelection(local);
            }
        }
    });
    Object.defineProperty(XYCursor.prototype, "_getPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (positionX, positionY) {
            return { x: this.width() * positionX, y: this.height() * positionY };
        }
    });
    Object.defineProperty(XYCursor.prototype, "_updateLines", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y) {
            if (!this._tooltipX) {
                this.lineX.set("x", x);
            }
            if (!this._tooltipY) {
                this.lineY.set("y", y);
            }
            this._drawLines();
        }
    });
    Object.defineProperty(XYCursor.prototype, "_updateSelection", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            var _this = this;
            var selection = this.selection;
            var behavior = this.get("behavior");
            var w = this.width();
            var h = this.height();
            if (point.x < 0) {
                point.x = 0;
            }
            if (point.x > w) {
                point.x = w;
            }
            if (point.y < 0) {
                point.y = 0;
            }
            if (point.y > h) {
                point.y = h;
            }
            selection.set("draw", function (display) {
                var downPoint = _this._downPoint;
                if (downPoint) {
                    if (behavior === "zoomXY" || behavior === "selectXY") {
                        display.moveTo(downPoint.x, downPoint.y);
                        display.lineTo(downPoint.x, point.y);
                        display.lineTo(point.x, point.y);
                        display.lineTo(point.x, downPoint.y);
                        display.lineTo(downPoint.x, downPoint.y);
                    }
                    else if (behavior === "zoomX" || behavior === "selectX") {
                        display.moveTo(downPoint.x, 0);
                        display.lineTo(downPoint.x, h);
                        display.lineTo(point.x, h);
                        display.lineTo(point.x, 0);
                        display.lineTo(downPoint.x, 0);
                    }
                    else if (behavior === "zoomY" || behavior === "selectY") {
                        display.moveTo(0, downPoint.y);
                        display.lineTo(w, downPoint.y);
                        display.lineTo(w, point.y);
                        display.lineTo(0, point.y);
                        display.lineTo(0, downPoint.y);
                    }
                }
            });
        }
    });
    Object.defineProperty(XYCursor.prototype, "_onHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isHidden()) {
                var chart = this.chart;
                if (chart) {
                    chart.xAxes.each(function (axis) {
                        axis.handleCursorHide();
                    });
                    chart.yAxes.each(function (axis) {
                        axis.handleCursorHide();
                    });
                    chart.series.each(function (series) {
                        series.handleCursorHide();
                    });
                }
            }
            _super.prototype._onHide.call(this);
        }
    });
    Object.defineProperty(XYCursor.prototype, "_onShow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this.isHidden()) {
                var chart = this.chart;
                if (chart) {
                    chart.xAxes.each(function (axis) {
                        axis.handleCursorShow();
                    });
                    chart.yAxes.each(function (axis) {
                        axis.handleCursorShow();
                    });
                }
            }
            _super.prototype._onShow.call(this);
        }
    });
    Object.defineProperty(XYCursor.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            this.selection.dispose();
        }
    });
    Object.defineProperty(XYCursor, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "XYCursor"
    });
    Object.defineProperty(XYCursor, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Container__WEBPACK_IMPORTED_MODULE_7__.Container.classNames.concat([XYCursor.className])
    });
    return XYCursor;
}(_core_render_Container__WEBPACK_IMPORTED_MODULE_7__.Container));

//# sourceMappingURL=XYCursor.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Axis.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Axis.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Axis": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_render_Rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/render/Rectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");










/**
 * A base class for all axes.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info
 */
var Axis = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Axis, _super);
    function Axis() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * A [[Container]] that holds all the axis label elements.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "labelsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, {}))
        });
        /**
         * A [[Container]] that holds all the axis grid and fill elements.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "gridContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100 })
        });
        /**
         * A [[Container]] that holds axis grid elements which goes above the series.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "topGridContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100 })
        });
        /**
         * A [[Container]] that holds all the axis bullet elements.
         *
         * @default new Container
         */
        Object.defineProperty(_this, "bulletsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { isMeasured: false, width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, position: "absolute" }))
        });
        /**
         * A referenece to the the chart the axis belongs to.
         */
        Object.defineProperty(_this, "chart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_rangesDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_panStart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_panEnd", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_sAnimation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_eAnimation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A list of axis ranges.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         * @default new List()
         */
        Object.defineProperty(_this, "axisRanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.List()
        });
        Object.defineProperty(_this, "_seriesAxisRanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * A control label that is invisible but is used to keep width the width of
         * the axis constant.
         */
        Object.defineProperty(_this, "ghostLabel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_cursorPosition", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: -1
        });
        Object.defineProperty(_this, "_snapToSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A container above the axis that can be used to add additional stuff into
         * it. For example a legend, label, or an icon.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
         * @default new Container
         */
        Object.defineProperty(_this, "axisHeader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, {
                themeTags: ["axis", "header"],
                position: "absolute",
                background: _core_render_Rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle["new"](_this._root, {
                    themeTags: ["header", "background"],
                    fill: _this._root.interfaceColors.get("background")
                })
            }))
        });
        return _this;
    }
    Object.defineProperty(Axis.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // these could be in other parents, so disposing just in case
            this.gridContainer.dispose();
            this.topGridContainer.dispose();
            this.bulletsContainer.dispose();
            this.labelsContainer.dispose();
            this.axisHeader.dispose();
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(Axis.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this.setPrivate("updateScrollbar", true);
            this._disposers.push(this.axisRanges.events.onAll(function (change) {
                if (change.type === "clear") {
                    _this.axisRanges.each(function (dataItem) {
                        dataItem.dispose();
                    });
                }
                else if (change.type === "push") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "setIndex") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "insertIndex") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "removeIndex") {
                    change.oldValue.dispose();
                }
                else {
                    throw new Error("Unknown IStreamEvent type");
                }
            }));
            var renderer = this.get("renderer");
            if (renderer) {
                renderer.axis = this;
                renderer.processAxis();
            }
            this.children.push(renderer);
            this.ghostLabel = renderer.makeLabel(new _core_render_Component__WEBPACK_IMPORTED_MODULE_5__.DataItem(this, undefined, {}));
            this.ghostLabel.set("opacity", 0);
        }
    });
    /**
     * Zooms the axis to relative locations.
     *
     * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.
     *
     * @param   start     Relative start
     * @param   end       Relative end
     * @param   duration  Duration of the zoom animation in milliseconds
     * @return            Zoom animation
     */
    Object.defineProperty(Axis.prototype, "zoom", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (start, end, duration) {
            var _a;
            if (this.get("start") !== start || this.get("end") != end) {
                var sAnimation = this._sAnimation;
                var eAnimation = this._eAnimation;
                var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                if (start < -maxDeviation) {
                    start = -maxDeviation;
                }
                if (end > 1 + maxDeviation) {
                    end = 1 + maxDeviation;
                }
                if (start > end) {
                    _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)([end, start], 2), start = _a[0], end = _a[1];
                }
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(duration)) {
                    duration = this.get("interpolationDuration", 0);
                }
                var priority = "end";
                var maxZoomFactor = this.getPrivate("maxZoomFactor", this.get("maxZoomFactor", 100));
                if (end === 1 && start !== 0) {
                    if (start < this.get("start")) {
                        priority = "start";
                    }
                    else {
                        priority = "end";
                    }
                }
                if (start === 0 && end !== 1) {
                    if (end > this.get("end")) {
                        priority = "end";
                    }
                    else {
                        priority = "start";
                    }
                }
                var minZoomCount = this.get("minZoomCount");
                var maxZoomCount = this.get("maxZoomCount");
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(minZoomCount)) {
                    maxZoomFactor = maxZoomFactor / minZoomCount;
                }
                var minZoomFactor = 1;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(maxZoomCount)) {
                    minZoomFactor = maxZoomFactor / maxZoomCount;
                }
                // most likely we are dragging left scrollbar grip here, so we tend to modify end
                if (priority === "start") {
                    if (maxZoomCount > 0) {
                        // add to the end
                        if (1 / (end - start) < minZoomFactor) {
                            end = start + 1 / minZoomFactor;
                        }
                    }
                    // add to the end
                    if (1 / (end - start) > maxZoomFactor) {
                        end = start + 1 / maxZoomFactor;
                    }
                    //unless end is > 0
                    if (end > 1 && end - start < 1 / maxZoomFactor) {
                        //end = 1;
                        start = end - 1 / maxZoomFactor;
                    }
                }
                // most likely we are dragging right, so we modify left
                else {
                    if (maxZoomCount > 0) {
                        // add to the end
                        if (1 / (end - start) < minZoomFactor) {
                            start = end - 1 / minZoomFactor;
                        }
                    }
                    // remove from start
                    if (1 / (end - start) > maxZoomFactor) {
                        start = end - 1 / maxZoomFactor;
                    }
                    if (start < 0 && end - start < 1 / maxZoomFactor) {
                        //start = 0;
                        end = start + 1 / maxZoomFactor;
                    }
                }
                if (1 / (end - start) > maxZoomFactor) {
                    end = start + 1 / maxZoomFactor;
                }
                if (1 / (end - start) > maxZoomFactor) {
                    start = end - 1 / maxZoomFactor;
                }
                if (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get("start") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get("end") == end)) {
                    return;
                }
                if (duration > 0) {
                    var easing = this.get("interpolationEasing");
                    var sAnimation_1 = this.animate({ key: "start", to: start, duration: duration, easing: easing });
                    var eAnimation_1 = this.animate({ key: "end", to: end, duration: duration, easing: easing });
                    this._sAnimation = sAnimation_1;
                    this._eAnimation = eAnimation_1;
                    if (sAnimation_1) {
                        return sAnimation_1;
                    }
                    else if (eAnimation_1) {
                        return eAnimation_1;
                    }
                }
                else {
                    this.set("start", start);
                    this.set("end", end);
                }
            }
        }
    });
    Object.defineProperty(Axis.prototype, "series", {
        /**
         * A list of series using this axis.
         *
         * @return Series
         */
        get: function () {
            return this._series;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Axis.prototype, "_processAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            dataItem.setRaw("isRange", true);
            this._createAssets(dataItem);
            this._rangesDirty = true;
            this._prepareDataItem(dataItem);
            var above = dataItem.get("above");
            var container = this.topGridContainer;
            var grid = dataItem.get("grid");
            if (above && grid) {
                container.children.moveValue(grid);
            }
            var fill = dataItem.get("axisFill");
            if (above && fill) {
                container.children.moveValue(fill);
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_prepareDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem, _index) { }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "markDirtyExtremes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "markDirtySelectionExtremes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Axis.prototype, "_calculateTotals", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Axis.prototype, "_updateAxisRanges", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this.axisRanges.each(function (axisRange) {
                _this._prepareDataItem(axisRange);
            });
            _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this._seriesAxisRanges, function (axisRange) {
                _this._prepareDataItem(axisRange);
            });
        }
    });
    Object.defineProperty(Axis.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._prepareChildren.call(this);
            if (this.get("fixAxisSize")) {
                this.ghostLabel.set("visible", true);
            }
            else {
                this.ghostLabel.set("visible", false);
            }
            if (this.isDirty("start") || this.isDirty("end")) {
                this.chart._updateCursor();
                var start = this.get("start", 0);
                var end = this.get("end", 1);
                var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                if (start < -maxDeviation) {
                    var delta = start + maxDeviation;
                    start = -maxDeviation;
                    this.setRaw("start", start);
                    if (this.isDirty("end")) {
                        this.setRaw("end", end - delta);
                    }
                }
                if (end > 1 + maxDeviation) {
                    var delta = end - 1 - maxDeviation;
                    end = 1 + maxDeviation;
                    this.setRaw("end", end);
                    if (this.isDirty("start")) {
                        this.setRaw("start", start - delta);
                    }
                }
            }
            var renderer = this.get("renderer");
            renderer._start = this.get("start");
            renderer._end = this.get("end");
            renderer._inversed = renderer.get("inversed", false);
            renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);
            renderer._updateLC();
            if (this.isDirty("tooltip")) {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    var rendererTags = renderer.get("themeTags");
                    tooltip.addTag("axis");
                    tooltip.addTag(this.className.toLowerCase());
                    tooltip._applyThemes();
                    if (rendererTags) {
                        tooltip.set("themeTags", _core_util_Utils__WEBPACK_IMPORTED_MODULE_8__.mergeTags(tooltip.get("themeTags"), rendererTags));
                        tooltip.label._applyThemes();
                    }
                }
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_updateTooltipBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var tooltip = this.get("tooltip");
            if (tooltip) {
                this.get("renderer").updateTooltipBounds(tooltip);
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_updateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateBounds.call(this);
            this._updateTooltipBounds();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "processChart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (chart) {
            var _this = this;
            this.chart = chart;
            var renderer = this.get("renderer");
            renderer.chart = chart;
            chart.gridContainer.children.push(this.gridContainer);
            chart.topGridContainer.children.push(this.topGridContainer);
            chart.axisHeadersContainer.children.push(this.axisHeader);
            this.on("start", function () {
                chart._handleAxisSelection(_this);
            });
            this.on("end", function () {
                chart._handleAxisSelection(_this);
            });
            chart.plotContainer.onPrivate("width", function () {
                _this.markDirtySize();
            });
            chart.plotContainer.onPrivate("height", function () {
                _this.markDirtySize();
            });
            chart.processAxis(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "hideDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            this._toggleDataItem(dataItem, false);
            return _super.prototype.hideDataItem.call(this, dataItem);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "showDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            this._toggleDataItem(dataItem, true);
            return _super.prototype.showDataItem.call(this, dataItem);
        }
    });
    Object.defineProperty(Axis.prototype, "_toggleDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, visible) {
            var label = dataItem.get("label");
            if (label) {
                label.setPrivate("visible", visible);
            }
            var grid = dataItem.get("grid");
            if (grid) {
                grid.setPrivate("visible", visible);
            }
            var tick = dataItem.get("tick");
            if (tick) {
                tick.setPrivate("visible", visible);
            }
            var axisFill = dataItem.get("axisFill");
            if (axisFill) {
                axisFill.setPrivate("visible", visible);
            }
            var bullet = dataItem.get("bullet");
            if (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    sprite.setPrivate("visible", visible);
                }
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_createAssets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var renderer = this.get("renderer");
            if (!dataItem.get("label")) {
                renderer.makeLabel(dataItem);
            }
            if (!dataItem.get("grid")) {
                renderer.makeGrid(dataItem);
            }
            if (!dataItem.get("tick")) {
                renderer.makeTick(dataItem);
            }
            if (!dataItem.get("axisFill")) {
                renderer.makeAxisFill(dataItem);
            }
            this._processBullet(dataItem);
        }
    });
    Object.defineProperty(Axis.prototype, "_processBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var bullet = dataItem.get("bullet");
            var axisBullet = this.get("bullet");
            if (!bullet && axisBullet && !dataItem.get("isRange")) {
                bullet = axisBullet(this._root, this, dataItem);
            }
            if (bullet) {
                bullet.axis = this;
                var sprite = bullet.get("sprite");
                if (sprite) {
                    sprite._setDataItem(dataItem);
                    dataItem.setRaw("bullet", bullet);
                    if (!sprite.parent) {
                        this.bulletsContainer.children.push(sprite);
                    }
                }
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            var chart = this.chart;
            if (chart) {
                chart._updateChartLayout();
            }
            this.get("renderer")._updatePositions();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.disposeDataItem.call(this, dataItem);
            var renderer = this.get("renderer");
            var label = dataItem.get("label");
            if (label) {
                renderer.labels.removeValue(label);
                label.dispose();
            }
            var tick = dataItem.get("tick");
            if (tick) {
                renderer.ticks.removeValue(tick);
                tick.dispose();
            }
            var grid = dataItem.get("grid");
            if (grid) {
                renderer.grid.removeValue(grid);
                grid.dispose();
            }
            var axisFill = dataItem.get("axisFill");
            if (axisFill) {
                renderer.axisFills.removeValue(axisFill);
                axisFill.dispose();
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_updateGhost", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var ghostLabel = this.ghostLabel;
            if (!ghostLabel.isHidden()) {
                var bounds = ghostLabel.localBounds();
                var gWidth_1 = bounds.right - bounds.left;
                _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this.dataItems, function (dataItem) {
                    var label = dataItem.get("label");
                    if (label && !label.isHidden()) {
                        var bounds_1 = label.localBounds();
                        var w = bounds_1.right - bounds_1.left;
                        if (w > gWidth_1) {
                            ghostLabel.set("text", label.text._getText());
                        }
                    }
                });
            }
            var start = this.get("start", 0);
            var end = this.get("end", 1);
            this.get("renderer").updateLabel(this.ghostLabel, start + (end - start) * 0.5);
        }
    });
    Object.defineProperty(Axis.prototype, "_handleCursorPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position, snapToSeries) {
            var renderer = this.get("renderer");
            position = renderer.toAxisPosition(position);
            this._cursorPosition = position;
            this._snapToSeries = snapToSeries;
            this.updateTooltip();
        }
    });
    /**
     * @todo needs description
     * Can be called when axis zoom changes and you need to update tooltip position
     */
    Object.defineProperty(Axis.prototype, "updateTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var snapToSeries = this._snapToSeries;
            var position = this._cursorPosition;
            var tooltip = this.get("tooltip");
            var renderer = this.get("renderer");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNumber(position)) {
                if (!snapToSeries) {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this.series, function (series) {
                        if (series.get("baseAxis") === _this) {
                            series.showDataItemTooltip(_this.getSeriesItem(series, position));
                        }
                    });
                }
                if (tooltip) {
                    renderer.updateTooltipBounds(tooltip);
                    if (this.get("snapTooltip")) {
                        position = this.roundAxisPosition(position, this.get("tooltipLocation", 0.5));
                    }
                    if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_6__.isNaN(position)) {
                        this._updateTooltipText(tooltip, position);
                        renderer.positionTooltip(tooltip, position);
                        if (position < this.get("start") || position > this.get("end")) {
                            tooltip.hide(0);
                        }
                        else {
                            tooltip.show(0);
                        }
                    }
                    else {
                        tooltip.hide(0);
                    }
                }
            }
        }
    });
    Object.defineProperty(Axis.prototype, "_updateTooltipText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip, position) {
            tooltip.label.set("text", this.getTooltipText(position));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "roundAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position, _location) {
            return position;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "handleCursorShow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var tooltip = this.get("tooltip");
            if (tooltip) {
                tooltip.show();
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "handleCursorHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var tooltip = this.get("tooltip");
            if (tooltip) {
                tooltip.hide();
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "processSeriesDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem, _fields) {
        }
    });
    Object.defineProperty(Axis.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._sizeDirty = false;
            this._rangesDirty = false;
        }
    });
    /**
     * Converts pixel coordinate to a relative position on axis.
     *
     * @param   coordinate  Coordinate
     * @return              Relative position
     */
    Object.defineProperty(Axis.prototype, "coordinateToPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (coordinate) {
            var renderer = this.get("renderer");
            return renderer.toAxisPosition(coordinate / renderer.axisLength());
        }
    });
    /**
     * Converts relative position of the plot area to relative position of the
     * axis with zoom taken into account.
     *
     * @param position Position
     * @return Relative position
     */
    Object.defineProperty(Axis.prototype, "toAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            return this.get("renderer").toAxisPosition(position);
        }
    });
    /**
     * Adjusts position with inversed taken into account.
     *
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "fixPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            return this.get("renderer").fixPosition(position);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "shouldGap", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem, _nextItem, _autoGapCount, _fieldName) {
            return false;
        }
    });
    /**
     * Creates and returns an axis range object.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
     * @param   axisDataItem  Axis data item
     * @return                Axis range
     */
    Object.defineProperty(Axis.prototype, "createAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axisDataItem) {
            return this.axisRanges.push(axisDataItem);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Axis.prototype, "_groupSeriesData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_series) { }
    });
    Object.defineProperty(Axis, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Axis"
    });
    Object.defineProperty(Axis, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Component__WEBPACK_IMPORTED_MODULE_5__.Component.classNames.concat([Axis.className])
    });
    return Axis;
}(_core_render_Component__WEBPACK_IMPORTED_MODULE_5__.Component));

//# sourceMappingURL=Axis.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisLabel.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisLabel.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisLabel": () => (/* binding */ AxisLabel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Label__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/Label */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js");


/**
 * Draws an axis label.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info
 * @important
 */
var AxisLabel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AxisLabel, _super);
    function AxisLabel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tickPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        return _this;
    }
    Object.defineProperty(AxisLabel, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AxisLabel"
    });
    Object.defineProperty(AxisLabel, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Label__WEBPACK_IMPORTED_MODULE_1__.Label.classNames.concat([AxisLabel.className])
    });
    return AxisLabel;
}(_core_render_Label__WEBPACK_IMPORTED_MODULE_1__.Label));

//# sourceMappingURL=AxisLabel.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRenderer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRenderer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisRenderer": () => (/* binding */ AxisRenderer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _core_util_Template__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Template */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _AxisTick__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AxisTick */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisTick.js");
/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Grid */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Grid.js");
/* harmony import */ var _AxisLabel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AxisLabel */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisLabel.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");








/**
 * Base class for an axis renderer.
 *
 * Should not be used on its own.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
 */
var AxisRenderer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AxisRenderer, _super);
    function AxisRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // save for quick access
        Object.defineProperty(_this, "_axisLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 100
        });
        Object.defineProperty(_this, "_start", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_end", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_inversed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_minSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * Chart the renderer is used in.
         */
        Object.defineProperty(_this, "chart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_lc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_ls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * A list of ticks in the axis.
         *
         * `ticks.template` can be used to configure ticks.
         *
         * @default new ListTemplate<AxisTick>
         */
        Object.defineProperty(_this, "ticks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template["new"]({}), function () { return _AxisTick__WEBPACK_IMPORTED_MODULE_3__.AxisTick._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(_this.ticks.template.get("themeTags", []), _this.get("themeTags", []))
            }, [_this.ticks.template]); })
        });
        /**
         * A list of grid elements in the axis.
         *
         * `grid.template` can be used to configure grid.
         *
         * @default new ListTemplate<Grid>
         */
        Object.defineProperty(_this, "grid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template["new"]({}), function () { return _Grid__WEBPACK_IMPORTED_MODULE_5__.Grid._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(_this.grid.template.get("themeTags", []), _this.get("themeTags", []))
            }, [_this.grid.template]); })
        });
        /**
         * A list of fills in the axis.
         *
         * `axisFills.template` can be used to configure axis fills.
         *
         * @default new ListTemplate<Graphics>
         */
        Object.defineProperty(_this, "axisFills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template["new"]({}), function () { return _core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__.Graphics._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(_this.axisFills.template.get("themeTags", ["fill"]), _this.get("themeTags", []))
            }, [_this.axisFills.template]); })
        });
        /**
         * A list of labels in the axis.
         *
         * `labels.template` can be used to configure axis labels.
         *
         * @default new ListTemplate<AxisLabel>
         */
        Object.defineProperty(_this, "labels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template["new"]({}), function () { return _AxisLabel__WEBPACK_IMPORTED_MODULE_7__.AxisLabel._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(_this.labels.template.get("themeTags", []), _this.get("themeTags", []))
            }, [_this.labels.template]); })
        });
        /**
         * An [[Axis]] renderer is for.
         */
        Object.defineProperty(_this, "axis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "makeTick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var tick = this.axis.labelsContainer.children.push(this.ticks.make());
            tick._setDataItem(dataItem);
            dataItem.setRaw("tick", tick);
            this.ticks.push(tick);
            return tick;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "makeGrid", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var grid = this.axis.gridContainer.children.push(this.grid.make());
            grid._setDataItem(dataItem);
            dataItem.setRaw("grid", grid);
            this.grid.push(grid);
            return grid;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "makeAxisFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var axisFill = this.axis.gridContainer.children.push(this.axisFills.make());
            axisFill._setDataItem(dataItem);
            dataItem.setRaw("axisFill", axisFill);
            this.axisFills.push(axisFill);
            return axisFill;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "makeLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var label = this.labels.make();
            var themeTags = [];
            if (this.get("opposite")) {
                themeTags.push("opposite");
            }
            if (this.get("inside")) {
                themeTags.push("inside");
            }
            var axisName = this.axis.getPrivate("name");
            if (axisName) {
                themeTags.push(axisName);
            }
            label.set("themeTags", _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(label.get("themeTags"), themeTags));
            this.axis.labelsContainer.children.moveValue(label, 0);
            label._setDataItem(dataItem);
            dataItem.setRaw("label", label);
            this.labels.push(label);
            return label;
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "axisLength", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return 0;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "gridCount", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.axisLength() / this.get("minGridDistance", 50);
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "_updatePositions", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.set("isMeasured", false);
        }
    });
    /**
     * Converts relative position (0-1) on axis to a pixel coordinate.
     *
     * @param position  Position (0-1)
     * @return Coordinate (px)
     */
    Object.defineProperty(AxisRenderer.prototype, "positionToCoordinate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            if (this._inversed) {
                return (this._end - position) * this._axisLength;
            }
            else {
                return (position - this._start) * this._axisLength;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "updateTooltipBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_tooltip) { }
    });
    Object.defineProperty(AxisRenderer.prototype, "_updateSize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.markDirty();
            this._clear = true;
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "toAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            var start = this._start || 0;
            var end = this._end || 1;
            position = position * (end - start);
            if (!this.get("inversed")) {
                position = start + position;
            }
            else {
                position = end - position;
            }
            return position;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRenderer.prototype, "fixPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            if (this.get("inversed")) {
                return 1 - position;
            }
            return position;
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "_updateLC", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "toggleVisibility", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (sprite, position, minPosition, maxPosition) {
            var axis = this.axis;
            var start = axis.get("start", 0);
            var end = axis.get("end", 1);
            var updatedStart = start + (end - start) * (minPosition - 0.0001);
            var updatedEnd = start + (end - start) * (maxPosition + 0.0001);
            if (position < updatedStart || position > updatedEnd) {
                sprite.setPrivate("visible", false);
            }
            else {
                sprite.setPrivate("visible", true);
            }
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "_positionTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip, point) {
            var chart = this.chart;
            if (chart) {
                if (chart.inPlot(point)) {
                    tooltip.set("pointTo", this._display.toGlobal(point));
                }
                else {
                    tooltip.hide();
                }
            }
        }
    });
    Object.defineProperty(AxisRenderer.prototype, "processAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    Object.defineProperty(AxisRenderer, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AxisRenderer"
    });
    Object.defineProperty(AxisRenderer, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__.Graphics.classNames.concat([AxisRenderer.className])
    });
    return AxisRenderer;
}(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__.Graphics));

//# sourceMappingURL=AxisRenderer.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererX.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererX.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisRendererX": () => (/* binding */ AxisRendererX)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AxisRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AxisRenderer */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRenderer.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");





/**
 * Used to render horizontal axis.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
 * @important
 */
var AxisRendererX = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AxisRendererX, _super);
    function AxisRendererX() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AxisRendererX.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["renderer", "x"]);
            _super.prototype._afterNew.call(this);
            this.setPrivateRaw("letter", "X");
            var gridTemplate = this.grid.template;
            gridTemplate.set("height", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            gridTemplate.set("width", 0);
            gridTemplate.set("draw", function (display, graphics) {
                display.moveTo(0, 0);
                display.lineTo(0, graphics.height());
            });
            this.set("draw", function (display, graphics) {
                display.moveTo(0, 0);
                display.lineTo(graphics.width(), 0);
            });
        }
    });
    Object.defineProperty(AxisRendererX.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            var axis = this.axis;
            if (this.isDirty("inside")) {
                axis.markDirtySize();
            }
            if (this.isDirty("opposite")) {
                var chart = this.chart;
                if (chart) {
                    var axisChildren = axis.children;
                    if (this.get("opposite")) {
                        var children = chart.topAxesContainer.children;
                        children.removeValue(axis);
                        children.insertIndex(0, axis);
                        axisChildren.removeValue(this);
                        axisChildren.push(this);
                    }
                    else {
                        chart.bottomAxesContainer.children.moveValue(axis);
                        axisChildren.removeValue(this);
                        axisChildren.insertIndex(0, this);
                    }
                    axis.markDirtySize();
                }
            }
        }
    });
    Object.defineProperty(AxisRendererX.prototype, "toAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            var start = this._start || 0;
            var end = this._end || 1;
            position -= this._ls;
            position = position * (end - start) / this._lc;
            if (!this.get("inversed")) {
                position = start + position;
            }
            else {
                position = end - position;
            }
            return position;
        }
    });
    Object.defineProperty(AxisRendererX.prototype, "_updateLC", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var axis = this.axis;
            var parent = axis.parent;
            if (parent) {
                var w = parent.innerWidth();
                this._lc = this.axisLength() / w;
                this._ls = (axis.x() - parent.get("paddingLeft", 0)) / w;
            }
        }
    });
    Object.defineProperty(AxisRendererX.prototype, "_updatePositions", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var axis = this.axis;
            axis.gridContainer.set("x", axis.x() - _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.relativeToValue(axis.get("centerX", 0), axis.width()) - axis.parent.get("paddingLeft", 0));
            axis.bulletsContainer.set("y", this.y());
            var chart = axis.chart;
            if (chart) {
                var plotContainer = chart.plotContainer;
                var axisHeader = axis.axisHeader;
                var width = axis.get("marginLeft", 0);
                var x = axis.x() - width;
                var parent_1 = axis.parent;
                if (parent_1) {
                    x -= parent_1.get("paddingLeft", 0);
                }
                if (axisHeader.children.length > 0) {
                    width = axis.axisHeader.width();
                    axis.set("marginLeft", width);
                }
                else {
                    axisHeader.set("width", width);
                }
                axisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "processAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.processAxis.call(this);
            var axis = this.axis;
            axis.set("width", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            axis.set("layout", this._root.verticalLayout);
            axis.labelsContainer.set("width", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            axis.axisHeader.setAll({ layout: this._root.verticalLayout });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "axisLength", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.axis.width();
        }
    });
    /**
     * Converts axis relative position to actual coordinate in pixels.
     *
     * @param   position  Position
     * @return            Point
     */
    Object.defineProperty(AxisRendererX.prototype, "positionToPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            return { x: this.positionToCoordinate(position), y: 0 };
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateTick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tick, position, endPosition, count) {
            if (tick) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var location_1 = 0.5;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(count) && count > 1) {
                    location_1 = tick.get("multiLocation", location_1);
                }
                else {
                    location_1 = tick.get("location", location_1);
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_1;
                }
                tick.set("x", this.positionToCoordinate(position));
                var length_1 = tick.get("length", 0);
                var inside = tick.get("inside", this.get("inside", false));
                if (this.get("opposite")) {
                    tick.set("y", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
                    if (!inside) {
                        length_1 *= -1;
                    }
                }
                else {
                    tick.set("y", 0);
                    if (inside) {
                        length_1 *= -1;
                    }
                }
                tick.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(0, length_1);
                });
                this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (label, position, endPosition, count) {
            if (label) {
                var location_2 = 0.5;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(count) && count > 1) {
                    location_2 = label.get("multiLocation", location_2);
                }
                else {
                    location_2 = label.get("location", location_2);
                }
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var inside = label.get("inside", this.get("inside", false));
                var opposite = this.get("opposite");
                if (opposite) {
                    if (!inside) {
                        label.set("position", "relative");
                        label.set("y", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
                    }
                    else {
                        label.set("position", "absolute");
                        label.set("y", 0);
                    }
                }
                else {
                    if (!inside) {
                        label.set("y", undefined);
                        label.set("position", "relative");
                    }
                    else {
                        label.set("y", 0);
                        label.set("position", "absolute");
                    }
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_2;
                }
                label.set("x", this.positionToCoordinate(position));
                this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateGrid", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (grid, position, endPosition) {
            if (grid) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var location_3 = grid.get("location", 0.5);
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_3;
                }
                grid.set("x", Math.round(this.positionToCoordinate(position)));
                this.toggleVisibility(grid, position, 0, 1);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bullet, position, endPosition) {
            if (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                        position = 0;
                    }
                    var location_4 = bullet.get("location", 0.5);
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_4;
                    }
                    sprite.set("x", this.positionToCoordinate(position));
                    this.toggleVisibility(sprite, position, 0, 1);
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fill, position, endPosition) {
            if (fill) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition)) {
                    endPosition = 1;
                }
                var x0 = this.positionToCoordinate(position);
                var x1 = this.positionToCoordinate(endPosition);
                this.fillDrawMethod(fill, x0, x1);
            }
        }
    });
    Object.defineProperty(AxisRendererX.prototype, "fillDrawMethod", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fill, x0, x1) {
            var _this = this;
            fill.set("draw", function (display) {
                var _a;
                //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());
                // using for holes, so can not be rectangle
                var h = _this.axis.gridContainer.height();
                var w = _this.width();
                if (x1 < x0) {
                    _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)([x0, x1], 2), x1 = _a[0], x0 = _a[1];
                }
                if (x0 > w || x1 < 0) {
                    return;
                }
                x0 = Math.max(0, x0);
                x1 = Math.min(w, x1);
                display.moveTo(x0, 0);
                display.lineTo(x1, 0);
                display.lineTo(x1, h);
                display.lineTo(x0, h);
                display.lineTo(x0, 0);
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "positionTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip, position) {
            this._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererX.prototype, "updateTooltipBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip) {
            var inside = this.get("inside");
            var num = 100000;
            var global = this._display.toGlobal({ x: 0, y: 0 });
            var x = global.x;
            var y = 0;
            var w = this.axisLength();
            var h = num;
            var pointerOrientation = "up";
            if (this.get("opposite")) {
                if (inside) {
                    pointerOrientation = "up";
                    y = global.y;
                    h = num;
                }
                else {
                    pointerOrientation = "down";
                    y = global.y - num;
                    h = num;
                }
            }
            else {
                if (inside) {
                    pointerOrientation = "down";
                    y = global.y - num;
                    h = num;
                }
                else {
                    pointerOrientation = "up";
                    y = global.y;
                    h = num;
                }
            }
            var bounds = { left: x, right: x + w, top: y, bottom: y + h };
            var oldBounds = tooltip.get("bounds");
            if (!_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.sameBounds(bounds, oldBounds)) {
                tooltip.set("bounds", bounds);
                tooltip.set("pointerOrientation", pointerOrientation);
            }
        }
    });
    Object.defineProperty(AxisRendererX, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AxisRendererX"
    });
    Object.defineProperty(AxisRendererX, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _AxisRenderer__WEBPACK_IMPORTED_MODULE_4__.AxisRenderer.classNames.concat([AxisRendererX.className])
    });
    return AxisRendererX;
}(_AxisRenderer__WEBPACK_IMPORTED_MODULE_4__.AxisRenderer));

//# sourceMappingURL=AxisRendererX.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererY.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererY.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisRendererY": () => (/* binding */ AxisRendererY)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AxisRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AxisRenderer */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRenderer.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");





/**
 * Used to render vertical axis.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
 * @important
 */
var AxisRendererY = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AxisRendererY, _super);
    function AxisRendererY() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AxisRendererY.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["renderer", "y"]);
            if (this._settings.opposite) {
                this._settings.themeTags.push("opposite");
            }
            _super.prototype._afterNew.call(this);
            this.setPrivateRaw("letter", "Y");
            var gridTemplate = this.grid.template;
            gridTemplate.set("width", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            gridTemplate.set("height", 0);
            gridTemplate.set("draw", function (display, graphics) {
                display.moveTo(0, 0);
                display.lineTo(graphics.width(), 0);
            });
            this.set("draw", function (display, renderer) {
                display.moveTo(0, 0);
                display.lineTo(0, renderer.height());
            });
        }
    });
    Object.defineProperty(AxisRendererY.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            var axis = this.axis;
            if (this.isDirty("inside")) {
                axis.markDirtySize();
            }
            if (this.isDirty("opposite")) {
                var chart = this.chart;
                var axisChildren = axis.children;
                if (chart) {
                    if (this.get("opposite")) {
                        var children = chart.rightAxesContainer.children;
                        children.removeValue(axis);
                        children.insertIndex(0, axis);
                        axisChildren.removeValue(this);
                        axisChildren.insertIndex(0, this);
                        this.addTag("opposite");
                    }
                    else {
                        chart.leftAxesContainer.children.moveValue(axis);
                        axisChildren.removeValue(this);
                        axisChildren.push(this);
                        this.removeTag("opposite");
                    }
                    axis.markDirtySize();
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "processAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.processAxis.call(this);
            var axis = this.axis;
            if (axis.get("height") == null) {
                axis.set("height", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            }
            axis.set("layout", this._root.horizontalLayout);
            axis.labelsContainer.set("height", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);
            axis.axisHeader.set("layout", this._root.horizontalLayout);
        }
    });
    Object.defineProperty(AxisRendererY.prototype, "_updatePositions", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var axis = this.axis;
            axis.gridContainer.set("y", axis.y() - _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.relativeToValue(axis.get("centerY", 0), axis.height()));
            axis.bulletsContainer.set("x", this.x());
            var chart = axis.chart;
            if (chart) {
                var plotContainer = chart.plotContainer;
                var axisHeader = axis.axisHeader;
                var height = axis.get("marginTop", 0);
                if (axisHeader.children.length > 0) {
                    height = axis.axisHeader.height();
                    axis.set("marginTop", height);
                }
                else {
                    axisHeader.set("height", height);
                }
                axisHeader.setAll({ y: axis.y() - height, x: -1, width: plotContainer.width() + 2 });
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "axisLength", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.axis.innerHeight();
        }
    });
    /**
     * Converts axis relative position to actual coordinate in pixels.
     *
     * @param   position  Position
     * @return            Point
     */
    Object.defineProperty(AxisRendererY.prototype, "positionToPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            return { x: 0, y: this.positionToCoordinate(position) };
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (label, position, endPosition, count) {
            if (label) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var location_1 = 0.5;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(count) && count > 1) {
                    location_1 = label.get("multiLocation", location_1);
                }
                else {
                    location_1 = label.get("location", location_1);
                }
                var opposite = this.get("opposite");
                var inside = label.get("inside", this.get("inside", false));
                if (opposite) {
                    label.set("x", 0);
                    if (inside) {
                        label.set("position", "absolute");
                    }
                    else {
                        label.set("position", "relative");
                    }
                }
                else {
                    if (inside) {
                        label.set("x", 0);
                        label.set("position", "absolute");
                    }
                    else {
                        label.set("x", undefined);
                        label.set("position", "relative");
                    }
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_1;
                }
                label.set("y", this.positionToCoordinate(position));
                this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateGrid", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (grid, position, endPosition) {
            if (grid) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var location_2 = grid.get("location", 0.5);
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_2;
                }
                var y = this.positionToCoordinate(position);
                grid.set("y", y);
                this.toggleVisibility(grid, position, 0, 1);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateTick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tick, position, endPosition, count) {
            if (tick) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                var location_3 = 0.5;
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(count) && count > 1) {
                    location_3 = tick.get("multiLocation", location_3);
                }
                else {
                    location_3 = tick.get("location", location_3);
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                    position = position + (endPosition - position) * location_3;
                }
                tick.set("y", this.positionToCoordinate(position));
                var length_1 = tick.get("length", 0);
                var inside = tick.get("inside", this.get("inside", false));
                if (this.get("opposite")) {
                    tick.set("x", 0);
                    if (inside) {
                        length_1 *= -1;
                    }
                }
                else {
                    if (!inside) {
                        length_1 *= -1;
                    }
                }
                tick.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(length_1, 0);
                });
                this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bullet, position, endPosition) {
            if (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                        position = 0;
                    }
                    var location_4 = bullet.get("location", 0.5);
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_4;
                    }
                    sprite.set("y", this.positionToCoordinate(position));
                    this.toggleVisibility(sprite, position, 0, 1);
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fill, position, endPosition) {
            if (fill) {
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(position)) {
                    position = 0;
                }
                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endPosition)) {
                    endPosition = 1;
                }
                var y0 = this.positionToCoordinate(position);
                var y1 = this.positionToCoordinate(endPosition);
                this.fillDrawMethod(fill, y0, y1);
            }
        }
    });
    Object.defineProperty(AxisRendererY.prototype, "fillDrawMethod", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fill, y0, y1) {
            var _this = this;
            fill.set("draw", function (display) {
                var _a;
                // using for holes, so can not be rectangle
                var w = _this.axis.gridContainer.width();
                var h = _this.height();
                if (y1 < y0) {
                    _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)([y0, y1], 2), y1 = _a[0], y0 = _a[1];
                }
                if (y0 > h || y1 < 0) {
                    return;
                }
                y0 = Math.max(0, y0);
                y1 = Math.min(h, y1);
                display.moveTo(0, y0);
                display.lineTo(w, y0);
                display.lineTo(w, y1);
                display.lineTo(0, y1);
                display.lineTo(0, y0);
            });
        }
    });
    /**
     * Converts relative position (0-1) on axis to a pixel coordinate.
     *
     * @param position  Position (0-1)
     * @return Coordinate (px)
     */
    Object.defineProperty(AxisRendererY.prototype, "positionToCoordinate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            if (!this._inversed) {
                return (this._end - position) * this._axisLength;
            }
            else {
                return (position - this._start) * this._axisLength;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "positionTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip, position) {
            this._positionTooltip(tooltip, { x: 0, y: this.positionToCoordinate(position) });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "updateTooltipBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tooltip) {
            var inside = this.get("inside");
            var num = 100000;
            var global = this._display.toGlobal({ x: 0, y: 0 });
            var y = global.y;
            var x = 0;
            var h = this.axisLength();
            var w = num;
            var pointerOrientation = "right";
            if (this.get("opposite")) {
                if (inside) {
                    pointerOrientation = "right";
                    x = global.x - num;
                    w = num;
                }
                else {
                    pointerOrientation = "left";
                    x = global.x;
                    w = num;
                }
            }
            else {
                if (inside) {
                    pointerOrientation = "left";
                    x = global.x;
                    w = num;
                }
                else {
                    pointerOrientation = "right";
                    x = global.x - num;
                    w = num;
                }
            }
            var bounds = { left: x, right: x + w, top: y, bottom: y + h };
            var oldBounds = tooltip.get("bounds");
            if (!_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.sameBounds(bounds, oldBounds)) {
                tooltip.set("bounds", bounds);
                tooltip.set("pointerOrientation", pointerOrientation);
            }
        }
    });
    Object.defineProperty(AxisRendererY.prototype, "_updateLC", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var axis = this.axis;
            var parent = axis.parent;
            if (parent) {
                var h = parent.innerHeight();
                this._lc = this.axisLength() / h;
                this._ls = axis.y() / h;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "toAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            var start = this._start || 0;
            var end = this._end || 1;
            position -= this._ls;
            position = position * (end - start) / this._lc;
            if (this.get("inversed")) {
                position = start + position;
            }
            else {
                position = end - position;
            }
            return position;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AxisRendererY.prototype, "fixPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            if (!this.get("inversed")) {
                return 1 - position;
            }
            return position;
        }
    });
    Object.defineProperty(AxisRendererY, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AxisRendererY"
    });
    Object.defineProperty(AxisRendererY, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _AxisRenderer__WEBPACK_IMPORTED_MODULE_4__.AxisRenderer.classNames.concat([AxisRendererY.className])
    });
    return AxisRendererY;
}(_AxisRenderer__WEBPACK_IMPORTED_MODULE_4__.AxisRenderer));

//# sourceMappingURL=AxisRendererY.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisTick.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisTick.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisTick": () => (/* binding */ AxisTick)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Tick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/Tick */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js");


/**
 * Draws an axis tick.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Ticks} for more info
 * @important
 */
var AxisTick = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AxisTick, _super);
    function AxisTick() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tickPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        return _this;
    }
    Object.defineProperty(AxisTick, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AxisTick"
    });
    Object.defineProperty(AxisTick, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Tick__WEBPACK_IMPORTED_MODULE_1__.Tick.classNames.concat([AxisTick.className])
    });
    return AxisTick;
}(_core_render_Tick__WEBPACK_IMPORTED_MODULE_1__.Tick));

//# sourceMappingURL=AxisTick.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/DateAxis.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/DateAxis.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateAxis": () => (/* binding */ DateAxis)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _ValueAxis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ValueAxis */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/ValueAxis.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Order__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/util/Order */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _core_util_Time__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/util/Time */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Time.js");









/**
 * Creates a date axis.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info
 * @important
 */
var DateAxis = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DateAxis, _super);
    function DateAxis() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_dataGrouped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_groupingCalculated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_intervalDuration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        return _this;
    }
    Object.defineProperty(DateAxis.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["axis"]);
            _super.prototype._afterNew.call(this);
            this.setPrivateRaw("baseInterval", this.get("baseInterval"));
        }
    });
    Object.defineProperty(DateAxis.prototype, "_groupData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var min = this.getPrivate("min");
            var max = this.getPrivate("max");
            if ((_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(min) && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(max))) {
                this.setPrivateRaw("maxZoomFactor", Math.round((this.getPrivate("max", 0) - this.getPrivate("min", 0)) / this.baseMainDuration()));
                var groupInterval = this.getPrivate("groupInterval");
                if (groupInterval) {
                    this.setPrivateRaw("baseInterval", groupInterval);
                }
                else {
                    this.setPrivateRaw("baseInterval", this.get("baseInterval"));
                }
                if (this.isDirty("groupInterval")) {
                    var groupInterval_1 = this.get("groupInterval");
                    if (groupInterval_1) {
                        this.setRaw("groupIntervals", [groupInterval_1]);
                    }
                }
                if (this.isDirty("groupData")) {
                    if (!this._dataGrouped) {
                        if (this.get("groupData")) {
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.series, function (series) {
                                _this._groupSeriesData(series);
                            });
                        }
                        else {
                            var baseInterval = this.get("baseInterval");
                            var mainDataSetId_1 = baseInterval.timeUnit + baseInterval.count;
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.series, function (series) {
                                series.setDataSet(mainDataSetId_1);
                            });
                            this.setPrivateRaw("baseInterval", baseInterval);
                            this.setPrivateRaw("groupInterval", undefined);
                            this.markDirtyExtremes();
                        }
                        this._dataGrouped = true;
                    }
                }
            }
        }
    });
    Object.defineProperty(DateAxis.prototype, "_groupSeriesData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            var _this = this;
            if (this.get("groupData")) {
                // make array of intervals which will be used;
                var intervals_1 = [];
                var baseDuration_1 = this.baseMainDuration();
                var groupIntervals = this.get("groupIntervals");
                if (groupIntervals) { }
                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(groupIntervals, function (interval) {
                    var intervalDuration = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(interval);
                    if (intervalDuration > baseDuration_1) {
                        intervals_1.push(interval);
                    }
                });
                series._dataSets = {};
                var key_1 = this.getPrivate("name") + this.get("renderer").getPrivate("letter");
                var fields_1;
                var baseAxis = series.get("baseAxis");
                if (series.get("xAxis") === baseAxis) {
                    fields_1 = series._valueYFields;
                }
                else if (series.get("yAxis") === baseAxis) {
                    fields_1 = series._valueXFields;
                }
                var dataItems_1 = series.dataItems;
                var baseInterval = this.get("baseInterval");
                var mainDataSetId = baseInterval.timeUnit + baseInterval.count;
                series._dataSets[mainDataSetId] = series.dataItems;
                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.eachContinue(intervals_1, function (interval) {
                    var previousTime = -Infinity;
                    var dataSetId = interval.timeUnit + interval.count;
                    series._dataSets[dataSetId] = [];
                    var newDataItem;
                    var sum = {};
                    var count = {};
                    var groupFieldValues = {};
                    var workingFields = {};
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(fields_1, function (field) {
                        sum[field] = 0;
                        count[field] = 0;
                        groupFieldValues[field] = series.get((field + "Grouped"));
                        workingFields[field] = field + "Working";
                    });
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(dataItems_1, function (dataItem) {
                        var time = dataItem.get(key_1);
                        var roundedTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(time), interval.timeUnit, interval.count, _this._root.locale.firstDayOfWeek, _this._root.utc).getTime();
                        var dataContext;
                        if (previousTime < roundedTime) {
                            dataContext = _core_util_Object__WEBPACK_IMPORTED_MODULE_5__.copy(dataItem.dataContext);
                            newDataItem = new _core_render_Component__WEBPACK_IMPORTED_MODULE_6__.DataItem(series, dataContext, series._makeDataItem(dataContext));
                            series._dataSets[dataSetId].push(newDataItem);
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(fields_1, function (field) {
                                var value = dataItem.get(field);
                                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(value)) {
                                    newDataItem.setRaw(field, value);
                                    newDataItem.setRaw(workingFields[field], value);
                                    count[field]++;
                                    sum[field] += value;
                                }
                            });
                        }
                        else {
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(fields_1, function (field) {
                                var groupKey = groupFieldValues[field];
                                var value = dataItem.get(field);
                                if (value !== undefined) {
                                    var currentValue = newDataItem.get(field);
                                    switch (groupKey) {
                                        case "close":
                                            newDataItem.setRaw(field, value);
                                            break;
                                        case "sum":
                                            newDataItem.setRaw(field, currentValue + value);
                                            break;
                                        case "open":
                                            break;
                                        case "low":
                                            if (value < currentValue) {
                                                newDataItem.setRaw(field, value);
                                            }
                                            break;
                                        case "high":
                                            if (value > currentValue) {
                                                newDataItem.setRaw(field, value);
                                            }
                                            break;
                                        case "average":
                                            count[field]++;
                                            sum[field] += value;
                                            var average = sum[field] / count[field];
                                            newDataItem.setRaw(field, average);
                                            break;
                                        case "extreme":
                                            if (Math.abs(value) > Math.abs(currentValue)) {
                                                newDataItem.setRaw(field, value);
                                            }
                                            break;
                                    }
                                    newDataItem.setRaw(workingFields[field], newDataItem.get(field));
                                    var dataContext_1 = _core_util_Object__WEBPACK_IMPORTED_MODULE_5__.copy(dataItem.dataContext);
                                    dataContext_1[key_1] = roundedTime;
                                    newDataItem.dataContext = dataContext_1;
                                }
                            });
                        }
                        previousTime = roundedTime;
                    });
                    if (series._dataSets[dataSetId].length < _this.get("groupCount", Infinity)) {
                        return false;
                    }
                    return true;
                });
                this.markDirtySize();
            }
        }
    });
    Object.defineProperty(DateAxis.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._groupingCalculated = false;
            this._dataGrouped = false;
        }
    });
    Object.defineProperty(DateAxis.prototype, "_handleRangeChange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._handleRangeChange.call(this);
            var selectionMin = this.getPrivate("selectionMin");
            var selectionMax = this.getPrivate("selectionMax");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(selectionMin) && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(selectionMax)) {
                if (this.get("groupData") && !this._groupingCalculated) {
                    this._groupingCalculated = true;
                    var baseInterval = this.get("baseInterval");
                    var modifiedDifference = (selectionMax - selectionMin) + (this.get("startLocation", 0) + (1 - this.get("endLocation", 1)) * this.baseDuration());
                    var groupInterval = this.get("groupInterval");
                    if (!groupInterval) {
                        var groupIntervals = this.get("groupIntervals");
                        if (groupIntervals) {
                            groupInterval = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.chooseInterval(0, modifiedDifference, this.get("groupCount", Infinity), groupIntervals);
                            if (_core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(groupInterval) < _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(baseInterval)) {
                                groupInterval = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, baseInterval);
                            }
                        }
                    }
                    var current = this.getPrivate("groupInterval");
                    if (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count))) {
                        this.setPrivateRaw("groupInterval", groupInterval);
                        this.setPrivateRaw("baseInterval", groupInterval);
                        if (groupInterval) {
                            var newId_1 = groupInterval.timeUnit + groupInterval.count;
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.series, function (series) {
                                if (series.get("baseAxis") === _this) {
                                    series.setDataSet(newId_1);
                                }
                            });
                            this.markDirtyExtremes();
                        }
                    }
                }
                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.series, function (series) {
                    if (series.get("baseAxis") === _this) {
                        var fieldName_1 = (_this.getPrivate("name") + _this.get("renderer").getPrivate("letter"));
                        var start = _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.getSortedIndex(series.dataItems, function (dataItem) {
                            return _core_util_Order__WEBPACK_IMPORTED_MODULE_7__.compare(dataItem.get(fieldName_1), selectionMin);
                        });
                        if (start.index > 0) {
                            start.index -= 1;
                        }
                        var end = _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.getSortedIndex(series.dataItems, function (dataItem) {
                            return _core_util_Order__WEBPACK_IMPORTED_MODULE_7__.compare(dataItem.get(fieldName_1), selectionMax);
                        });
                        series.setPrivate("startIndex", start.index);
                        series.setPrivate("endIndex", end.index);
                    }
                });
            }
        }
    });
    Object.defineProperty(DateAxis.prototype, "_adjustMinMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min, max, gridCount, _strictMode) {
            return { min: min, max: max, step: (max - min) / gridCount };
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "intervalDuration", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._intervalDuration;
        }
    });
    Object.defineProperty(DateAxis.prototype, "_prepareAxisItems", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var min = this.getPrivate("min");
            var max = this.getPrivate("max");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(min) && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(max)) {
                var selectionMin = this.getPrivate("selectionMin");
                var selectionMax = this.getPrivate("selectionMax");
                var renderer = this.get("renderer");
                var baseInterval = this.getPrivate("baseInterval");
                var value = selectionMin;
                var i = 0;
                var intervals = this.get("gridIntervals");
                var gridInterval = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);
                if (_core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(gridInterval) < this.baseDuration()) {
                    gridInterval = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, baseInterval);
                }
                var intervalDuration = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(gridInterval);
                this._intervalDuration = intervalDuration;
                var nextGridUnit = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getNextUnit(gridInterval.timeUnit);
                value = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, new Date(min)).getTime();
                var previousValue = value - intervalDuration;
                var format = void 0;
                var formats = this.get("dateFormats");
                while (value < selectionMax + intervalDuration) {
                    var dataItem = void 0;
                    if (this.dataItems.length < i + 1) {
                        dataItem = new _core_render_Component__WEBPACK_IMPORTED_MODULE_6__.DataItem(this, undefined, {});
                        this._dataItems.push(dataItem);
                        this.processDataItem(dataItem);
                    }
                    else {
                        dataItem = this.dataItems[i];
                    }
                    this._createAssets(dataItem);
                    if (dataItem.isHidden()) {
                        dataItem.show();
                    }
                    dataItem.setRaw("value", value);
                    dataItem.setRaw("endValue", value + intervalDuration);
                    var date = new Date(value);
                    format = formats[gridInterval.timeUnit];
                    if (nextGridUnit && this.get("markUnitChange") && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(previousValue)) {
                        if (gridInterval.timeUnit != "year") {
                            if (_core_util_Time__WEBPACK_IMPORTED_MODULE_4__.checkChange(date, new Date(previousValue), nextGridUnit, this._root.utc)) {
                                format = this.get("periodChangeDateFormats")[gridInterval.timeUnit];
                            }
                        }
                    }
                    var label = dataItem.get("label");
                    if (label) {
                        label.set("text", this._root.dateFormatter.format(date, format));
                    }
                    this._prepareDataItem(dataItem, gridInterval.count);
                    previousValue = value;
                    value = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.add(new Date(value), gridInterval.timeUnit, gridInterval.count, this._root.utc).getTime();
                    i++;
                }
                for (var j = i; j < this.dataItems.length; j++) {
                    this.dataItems[j].hide();
                }
                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.series, function (series) {
                    if (series.inited) {
                        series._markDirtyAxes();
                    }
                });
            }
            this._updateGhost();
        }
    });
    Object.defineProperty(DateAxis.prototype, "_fixMin", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min) {
            var baseInterval = this.getPrivate("baseInterval");
            var startTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(min), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc).getTime();
            var endTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
            return startTime + (endTime - startTime) * this.get("startLocation", 0);
        }
    });
    Object.defineProperty(DateAxis.prototype, "_fixMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (max) {
            var baseInterval = this.getPrivate("baseInterval");
            var startTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(max), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc).getTime();
            var endTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
            return startTime + (endTime - startTime) * this.get("endLocation", 1);
        }
    });
    /**
     * Returns a duration of currently active `baseInterval` in milliseconds.
     *
     * @return Duration
     */
    Object.defineProperty(DateAxis.prototype, "baseDuration", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(this.getPrivate("baseInterval"));
        }
    });
    /**
     * Returns a duration of user-defined `baseInterval` in milliseconds.
     *
     * @return Duration
     */
    Object.defineProperty(DateAxis.prototype, "baseMainDuration", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.getIntervalDuration(this.get("baseInterval"));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "processSeriesDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, fields) {
            var _this = this;
            var baseInterval = this.getPrivate("baseInterval");
            dataItem.open = {};
            dataItem.close = {};
            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(fields, function (field) {
                var value = dataItem.get(field);
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(value)) {
                    var startTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(value), baseInterval.timeUnit, baseInterval.count, _this._root.locale.firstDayOfWeek, _this._root.utc).getTime();
                    var endTime = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, _this._root.utc).getTime();
                    dataItem.open[field] = startTime;
                    dataItem.close[field] = endTime;
                }
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "getDataItemPositionX", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, cellLocation, axisLocation) {
            var openValue = dataItem.open[field];
            var closeValue = dataItem.close[field];
            var value = openValue + (closeValue - openValue) * cellLocation;
            value = this._baseValue + (value - this._baseValue) * axisLocation;
            return this.valueToPosition(value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateX", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, cellLocation, axisLocation) {
            return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "getDataItemPositionY", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, cellLocation, axisLocation) {
            var openValue = dataItem.open[field];
            var closeValue = dataItem.close[field];
            var value = openValue + (closeValue - openValue) * cellLocation;
            value = this._baseValue + (value - this._baseValue) * axisLocation;
            return this.valueToPosition(value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateY", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, cellLocation, axisLocation) {
            return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "roundAxisPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position, location) {
            var value = this.positionToValue(position);
            var baseInterval = this.getPrivate("baseInterval");
            value = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.round(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc).getTime();
            var endValue = value;
            if (location > 0) {
                endValue = _core_util_Time__WEBPACK_IMPORTED_MODULE_4__.add(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
            }
            return this.valueToPosition(value + (endValue - value) * location);
        }
    });
    /**
     * Returns text to be used in an axis tooltip for specific relative position.
     *
     * @param   position  Position
     * @return            Tooltip text
     */
    Object.defineProperty(DateAxis.prototype, "getTooltipText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            //@todo number formatter + tag
            var format = this.get("dateFormats")[this.getPrivate("baseInterval").timeUnit];
            return this._root.dateFormatter.format(new Date(this.positionToValue(position)), this.get("tooltipDateFormat", format));
        }
    });
    /**
     * Returns a data item from series that is closest to the `position`.
     *
     * @param   series    Series
     * @param   position  Relative position
     * @return            Data item
     */
    Object.defineProperty(DateAxis.prototype, "getSeriesItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series, position) {
            var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
            var value = this.positionToValue(position);
            var result = _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.getSortedIndex(series.dataItems, function (dataItem) {
                return _core_util_Order__WEBPACK_IMPORTED_MODULE_7__.compare(dataItem.get(fieldName), value);
            });
            if (series.get("snapTooltip")) {
                var first = series.dataItems[result.index - 1];
                var second = series.dataItems[result.index];
                if (first && second) {
                    if (first.open && second.close) {
                        var open_1 = first.open[fieldName];
                        var close_1 = second.close[fieldName];
                        if (Math.abs(value - open_1) > Math.abs(value - close_1)) {
                            return second;
                        }
                    }
                }
                return first;
            }
            else {
                // @todo check if is in range
                var dataItem = series.dataItems[result.index - 1];
                if (dataItem) {
                    if (dataItem.open && dataItem.close) {
                        var open_2 = dataItem.open[fieldName];
                        var close_2 = dataItem.close[fieldName];
                        if (value >= open_2 && value <= close_2) {
                            return dataItem;
                        }
                    }
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DateAxis.prototype, "shouldGap", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, nextItem, autoGapCount, fieldName) {
            var value1 = dataItem.get(fieldName);
            var value2 = nextItem.get(fieldName);
            if (value2 - value1 > this.baseDuration() * autoGapCount) {
                return true;
            }
            return false;
        }
    });
    /**
     * Zooms the axis to specific `start` and `end` dates.
     *
     * Optional `duration` specifies duration of zoom animation in milliseconds.
     *
     * @param  start     Start Date
     * @param  end       End Date
     * @param  duration  Duration in milliseconds
     */
    Object.defineProperty(DateAxis.prototype, "zoomToDates", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (start, end, duration) {
            this.zoomToValues(start.getTime(), end.getTime(), duration);
        }
    });
    /**
     * Returns a `Date` object corresponding to specific position within plot
     * area.
     *
     * @param   position  Pposition
     * @return            Date
     */
    Object.defineProperty(DateAxis.prototype, "positionToDate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            return new Date(this.positionToValue(position));
        }
    });
    /**
     * Returns a relative position within plot area that corresponds to specific
     * date.
     *
     * @param   date  Date
     * @return        Position
     */
    Object.defineProperty(DateAxis.prototype, "dateToPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (date) {
            return this.valueToPosition(date.getTime());
        }
    });
    Object.defineProperty(DateAxis, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DateAxis"
    });
    Object.defineProperty(DateAxis, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _ValueAxis__WEBPACK_IMPORTED_MODULE_8__.ValueAxis.classNames.concat([DateAxis.className])
    });
    return DateAxis;
}(_ValueAxis__WEBPACK_IMPORTED_MODULE_8__.ValueAxis));

//# sourceMappingURL=DateAxis.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Grid.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Grid.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Grid": () => (/* binding */ Grid)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");


/**
 * Creates an axis grid line.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Grid} for more info
 * @important
 */
var Grid = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Grid, _super);
    function Grid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Grid.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(Grid, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Grid"
    });
    Object.defineProperty(Grid, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics.classNames.concat([Grid.className])
    });
    return Grid;
}(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics));

//# sourceMappingURL=Grid.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/ValueAxis.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/ValueAxis.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueAxis": () => (/* binding */ ValueAxis)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Axis */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Axis.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _core_util_Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");








/**
 * Creates a value axis.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info
 * @important
 */
var ValueAxis = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ValueAxis, _super);
    function ValueAxis() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_dirtyExtremes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_dirtySelectionExtremes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_deltaMinMax", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_minReal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_maxReal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_baseValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_syncDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "markDirtyExtremes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._dirtyExtremes = true;
            this.markDirty();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "markDirtySelectionExtremes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._dirtySelectionExtremes = true;
            this.markDirty();
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["axis"]);
            this.setPrivateRaw("name", "value");
            _super.prototype._afterNew.call(this);
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._prepareChildren.call(this);
            if (this.isDirty("syncWithAxis")) {
                var previousValue = this._prevSettings.syncWithAxis;
                if (previousValue) {
                    if (this._syncDp) {
                        this._syncDp.dispose();
                    }
                }
                var syncWithAxis = this.get("syncWithAxis");
                if (syncWithAxis) {
                    this._syncDp = new _core_util_Disposer__WEBPACK_IMPORTED_MODULE_2__.MultiDisposer([
                        syncWithAxis.onPrivate("selectionMinFinal", function () {
                            _this._dirtySelectionExtremes = true;
                        }),
                        syncWithAxis.onPrivate("selectionMaxFinal", function () {
                            _this._dirtySelectionExtremes = true;
                        })
                    ]);
                }
            }
            //if (this._dirtyExtremes || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("maxPrecision")) {
            if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("maxPrecision") || this.isDirty("numberFormat")) {
                this._getMinMax();
                this._dirtyExtremes = false;
            }
            if (this._dirtySelectionExtremes) {
                this._getSelectionMinMax();
                this._dirtySelectionExtremes = false;
            }
            this._groupData();
            if (this._sizeDirty || this._valuesDirty || this.isDirty("start") || this.isDirty("end") || this.isPrivateDirty("min") || this.isPrivateDirty("selectionMax") || this.isPrivateDirty("selectionMin") || this.isPrivateDirty("max") || this.isPrivateDirty("step") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("logarithmic")) {
                this._handleRangeChange();
                this._prepareAxisItems();
                this._updateAxisRanges();
            }
            this._baseValue = this.baseValue();
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_groupData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_formatText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var numberFormat = this.get("numberFormat");
            var formatter = this.getNumberFormatter();
            var text = "";
            if (numberFormat) {
                text = formatter.format(value, numberFormat);
            }
            else {
                text = formatter.format(value, undefined, this.getPrivate("stepDecimalPlaces"));
            }
            return text;
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_prepareAxisItems", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var min = this.getPrivate("min");
            var max = this.getPrivate("max");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(min) && _core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(max)) {
                var logarithmic = this.get("logarithmic");
                var step = this.getPrivate("step");
                var selectionMin = this.getPrivate("selectionMin");
                var selectionMax = this.getPrivate("selectionMax") + step;
                var value = selectionMin - step;
                var i = 0;
                if (logarithmic) {
                    value = selectionMin;
                }
                while (value < selectionMax) {
                    var dataItem = void 0;
                    if (this.dataItems.length < i + 1) {
                        dataItem = new _core_render_Component__WEBPACK_IMPORTED_MODULE_4__.DataItem(this, undefined, {});
                        this._dataItems.push(dataItem);
                        this.processDataItem(dataItem);
                    }
                    else {
                        dataItem = this.dataItems[i];
                    }
                    this._createAssets(dataItem);
                    if (dataItem.isHidden()) {
                        dataItem.show();
                    }
                    dataItem.setRaw("value", value);
                    var label = dataItem.get("label");
                    if (label) {
                        label.set("text", this._formatText(value));
                    }
                    this._prepareDataItem(dataItem);
                    if (!logarithmic) {
                        value += step;
                    }
                    else {
                        var differencePower = Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E;
                        if (differencePower > 1) {
                            value = Math.pow(10, Math.log(min) * Math.LOG10E + i);
                        }
                        else {
                            value += step;
                        }
                    }
                    var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
                    if (stepPower < 1) {
                        // exponent is less then 1 too. Count decimals of exponent
                        var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;
                        // round value to avoid floating point issues
                        value = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(value, decCount);
                    }
                    i++;
                }
                for (var j = i; j < this.dataItems.length; j++) {
                    this.dataItems[j].hide();
                }
                _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(this.series, function (series) {
                    if (series.inited) {
                        series._markDirtyAxes();
                    }
                });
                this._updateGhost();
            }
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_prepareDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, count) {
            var renderer = this.get("renderer");
            var value = dataItem.get("value");
            var endValue = dataItem.get("endValue");
            var position = this.valueToPosition(value);
            var endPosition = position;
            var fillEndPosition = this.valueToPosition(value + this.getPrivate("step"));
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(endValue)) {
                endPosition = this.valueToPosition(endValue);
                fillEndPosition = endPosition;
            }
            renderer.updateLabel(dataItem.get("label"), position, endPosition, count);
            var grid = dataItem.get("grid");
            renderer.updateGrid(grid, position, endPosition);
            if (grid) {
                if (value == this.get("baseValue", 0)) {
                    grid.addTag("base");
                    grid._applyThemes();
                }
                else if (grid.hasTag("base")) {
                    grid.removeTag("base");
                    grid._applyThemes();
                }
            }
            renderer.updateTick(dataItem.get("tick"), position, endPosition, count);
            renderer.updateFill(dataItem.get("axisFill"), position, fillEndPosition);
            this._processBullet(dataItem);
            renderer.updateBullet(dataItem.get("bullet"), position, endPosition);
            if (!dataItem.get("isRange")) {
                var fillRule = this.get("fillRule");
                if (fillRule) {
                    fillRule(dataItem);
                }
            }
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_handleRangeChange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var selectionMin = this.positionToValue(this.get("start", 0));
            var selectionMax = this.positionToValue(this.get("end", 1));
            var gridCount = this.get("renderer").gridCount();
            var minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
            var stepDecimalPlaces = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.decimalPlaces(minMaxStep.step);
            this.setPrivateRaw("stepDecimalPlaces", stepDecimalPlaces);
            selectionMin = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(selectionMin, stepDecimalPlaces);
            selectionMax = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(selectionMax, stepDecimalPlaces);
            minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
            var step = minMaxStep.step;
            selectionMin = minMaxStep.min;
            selectionMax = minMaxStep.max;
            if (this.getPrivate("selectionMin") !== selectionMin || this.getPrivate("selectionMax") !== selectionMax || this.getPrivate("step") !== step) {
                this.setPrivateRaw("selectionMin", selectionMin);
                this.setPrivateRaw("selectionMax", selectionMax);
                this.setPrivateRaw("step", step);
            }
        }
    });
    /**
     * Converts a relative position to a corresponding numeric value from axis
     * scale.
     *
     * @param   position  Relative position
     * @return            Value
     */
    Object.defineProperty(ValueAxis.prototype, "positionToValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            var min = this.getPrivate("min");
            var max = this.getPrivate("max");
            if (!this.get("logarithmic")) {
                return position * (max - min) + min;
            }
            else {
                return Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);
            }
        }
    });
    /**
     * Convers value to a relative position on axis.
     *
     * @param   value  Value
     * @return         Relative position
     */
    Object.defineProperty(ValueAxis.prototype, "valueToPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var min = this.getPrivate("min");
            var max = this.getPrivate("max");
            if (!this.get("logarithmic")) {
                return (value - min) / (max - min);
            }
            else {
                if (value <= 0) {
                    var treatZeroAs = this.get("treatZeroAs");
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(treatZeroAs)) {
                        value = treatZeroAs;
                    }
                }
                return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "valueToFinalPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var min = this.getPrivate("minFinal");
            var max = this.getPrivate("maxFinal");
            if (!this.get("logarithmic")) {
                return (value - min) / (max - min);
            }
            else {
                if (value <= 0) {
                    var treatZeroAs = this.get("treatZeroAs");
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(treatZeroAs)) {
                        value = treatZeroAs;
                    }
                }
                return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
            }
        }
    });
    /**
     * Returns X coordinate in pixels corresponding to specific value.
     *
     * @param   value     Numeric value
     * @param   location  Location
     * @param   baseValue Base value
     * @return            X coordinate
     */
    Object.defineProperty(ValueAxis.prototype, "getX", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, location, baseValue) {
            value = baseValue + (value - baseValue) * location;
            var position = this.valueToPosition(value);
            return this._settings.renderer.positionToCoordinate(position);
        }
    });
    /**
     * Returns X coordinate in pixels corresponding to specific value.
     *
     * @param   value     Numeric value
     * @param   location  Location
     * @param   baseValue Base value
     * @return            X coordinate
     */
    Object.defineProperty(ValueAxis.prototype, "getY", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, location, baseValue) {
            value = baseValue + (value - baseValue) * location;
            var position = this.valueToPosition(value);
            return this._settings.renderer.positionToCoordinate(position);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateX", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, _cellLocation, axisLocation) {
            return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "getDataItemPositionX", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, _cellLocation, axisLocation) {
            var value = dataItem.get(field);
            var stackToItem = dataItem.get("stackToItemX");
            if (stackToItem) {
                var series = dataItem.component;
                value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);
            }
            else {
                value = this._baseValue + (value - this._baseValue) * axisLocation;
            }
            return this.valueToPosition(value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateY", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, _cellLocation, axisLocation) {
            return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "getDataItemPositionY", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, field, _cellLocation, axisLocation) {
            var value = dataItem.get(field);
            var stackToItem = dataItem.get("stackToItemY");
            if (stackToItem) {
                var series = dataItem.component;
                value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);
            }
            else {
                value = this._baseValue + (value - this._baseValue) * axisLocation;
            }
            return this.valueToPosition(value);
        }
    });
    /**
     * Returns relative position of axis' `baseValue`.
     *
     * @return  Base value position
     */
    Object.defineProperty(ValueAxis.prototype, "basePosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.valueToPosition(this.baseValue());
        }
    });
    /**
     * Base value of the [[ValueAxis]], which determines positive and negative
     * values.
     *
     * @return Base value
     */
    Object.defineProperty(ValueAxis.prototype, "baseValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var min = Math.min(this.getPrivate("minFinal", -Infinity), this.getPrivate("selectionMin", -Infinity));
            var max = Math.max(this.getPrivate("maxFinal", Infinity), this.getPrivate("selectionMax", Infinity));
            var baseValue = this.get("baseValue", 0);
            if (baseValue < min) {
                baseValue = min;
            }
            if (baseValue > max) {
                baseValue = max;
            }
            return baseValue;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ValueAxis.prototype, "cellEndValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            return value;
        }
    });
    Object.defineProperty(ValueAxis.prototype, "fixSmallStep", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (step) {
            // happens because of floating point error
            if (1 + step === 1) {
                step *= 2;
                return this.fixSmallStep(step);
            }
            return step;
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_fixMin", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min) {
            return min;
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_fixMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (max) {
            return max;
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_calculateTotals", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.get("calculateTotals")) {
                var series = this.series[0];
                if (series) {
                    var startIndex = series.getPrivate("startIndex", 0);
                    if (series.dataItems.length > 0) {
                        if (startIndex > 0) {
                            startIndex--;
                        }
                        var endIndex = series.getPrivate("endIndex", series.dataItems.length);
                        if (endIndex < series.dataItems.length) {
                            endIndex++;
                        }
                        var field_1;
                        var vc_1;
                        if (series.get("yAxis") == this) {
                            field_1 = "valueY";
                            vc_1 = "vcy";
                        }
                        else if (series.get("xAxis") == this) {
                            field_1 = "valueX";
                            vc_1 = "vcx";
                        }
                        var fieldWorking_1 = field_1 + "Working";
                        if (field_1) {
                            var _loop_1 = function (i) {
                                var sum = 0;
                                var total = 0;
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(this_1.series, function (series) {
                                    if (!series.get("excludeFromTotal")) {
                                        var dataItem = series.dataItems[i];
                                        if (dataItem) {
                                            var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                            if (value != undefined) {
                                                sum += value;
                                                total += Math.abs(value);
                                            }
                                        }
                                    }
                                });
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(this_1.series, function (series) {
                                    if (!series.get("excludeFromTotal")) {
                                        var dataItem = series.dataItems[i];
                                        if (dataItem) {
                                            var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                            if (value != undefined) {
                                                dataItem.set((field_1 + "Total"), total);
                                                dataItem.set((field_1 + "Sum"), sum);
                                                dataItem.set((field_1 + "TotalPercent"), value / total * 100);
                                            }
                                        }
                                    }
                                });
                            };
                            var this_1 = this;
                            for (var i = startIndex; i < endIndex; i++) {
                                _loop_1(i);
                            }
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_getSelectionMinMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _a;
            var _this = this;
            var min = this.getPrivate("minFinal");
            var max = this.getPrivate("maxFinal");
            var minDefined = this.get("min");
            var maxDefined = this.get("max");
            var extraMin = this.get("extraMin", 0);
            var extraMax = this.get("extraMax", 0);
            var gridCount = this.get("renderer").gridCount();
            var strictMinMax = this.get("strictMinMax", false);
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(min) && _core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(max)) {
                var selectionMin_1 = max;
                var selectionMax_1 = min;
                _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(this.series, function (series) {
                    var seriesMin;
                    var seriesMax;
                    if (series.get("xAxis") === _this) {
                        seriesMin = series.getPrivate("selectionMinX", series.getPrivate("minX"));
                        seriesMax = series.getPrivate("selectionMaxX", series.getPrivate("maxX"));
                    }
                    else if (series.get("yAxis") === _this) {
                        seriesMin = series.getPrivate("selectionMinY", series.getPrivate("minY"));
                        seriesMax = series.getPrivate("selectionMaxY", series.getPrivate("maxY"));
                    }
                    if (!series.isHidden() && !series.isShowing()) {
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(seriesMin)) {
                            selectionMin_1 = Math.min(selectionMin_1, seriesMin);
                        }
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(seriesMax)) {
                            selectionMax_1 = Math.max(selectionMax_1, seriesMax);
                        }
                    }
                });
                if (selectionMin_1 > selectionMax_1) {
                    _a = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)([selectionMax_1, selectionMin_1], 2), selectionMin_1 = _a[0], selectionMax_1 = _a[1];
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minDefined)) {
                    if (strictMinMax) {
                        selectionMin_1 = minDefined;
                    }
                    else {
                        selectionMin_1 = min;
                    }
                }
                else if (strictMinMax) {
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(this._minReal)) {
                        selectionMin_1 = this._minReal;
                    }
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined)) {
                    if (strictMinMax) {
                        selectionMax_1 = maxDefined;
                    }
                    else {
                        selectionMax_1 = max;
                    }
                }
                else if (strictMinMax) {
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(this._maxReal)) {
                        selectionMax_1 = this._maxReal;
                    }
                }
                if (selectionMin_1 === selectionMax_1) {
                    selectionMin_1 -= this._deltaMinMax;
                    selectionMax_1 += this._deltaMinMax;
                    var minMaxStep2 = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, strictMinMax);
                    selectionMin_1 = minMaxStep2.min;
                    selectionMax_1 = minMaxStep2.max;
                }
                var minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount);
                selectionMin_1 = minMaxStep.min;
                selectionMax_1 = minMaxStep.max;
                selectionMin_1 -= (selectionMax_1 - selectionMin_1) * extraMin;
                selectionMax_1 += (selectionMax_1 - selectionMin_1) * extraMax;
                selectionMin_1 = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.fitToRange(selectionMin_1, min, max);
                selectionMax_1 = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.fitToRange(selectionMax_1, min, max);
                // do it for the second time !important			
                minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, true);
                if (!strictMinMax) {
                    selectionMin_1 = minMaxStep.min;
                    selectionMax_1 = minMaxStep.max;
                }
                var syncWithAxis = this.get("syncWithAxis");
                if (syncWithAxis) {
                    minMaxStep = this._syncAxes(selectionMin_1, selectionMax_1, minMaxStep.step, syncWithAxis.getPrivate("selectionMinFinal", syncWithAxis.getPrivate("minFinal", 0)), syncWithAxis.getPrivate("selectionMaxFinal", syncWithAxis.getPrivate("maxFinal", 1)), syncWithAxis.getPrivate("selectionStepFinal", syncWithAxis.getPrivate("step", 1)));
                    selectionMin_1 = minMaxStep.min;
                    selectionMax_1 = minMaxStep.max;
                }
                if (strictMinMax) {
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minDefined)) {
                        selectionMin_1 = Math.max(selectionMin_1, minDefined);
                    }
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined)) {
                        selectionMax_1 = Math.min(selectionMax_1, maxDefined);
                    }
                }
                var start = this.valueToFinalPosition(selectionMin_1);
                var end = this.valueToFinalPosition(selectionMax_1);
                this.setPrivateRaw("selectionMinFinal", selectionMin_1);
                this.setPrivateRaw("selectionMaxFinal", selectionMax_1);
                this.setPrivateRaw("selectionStepFinal", minMaxStep.step);
                this.zoom(start, end);
            }
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_getMinMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var minDefined = this.get("min");
            var maxDefined = this.get("max");
            var min = Infinity;
            var max = -Infinity;
            var extraMin = this.get("extraMin", 0);
            var extraMax = this.get("extraMax", 0);
            var minDiff = Infinity;
            _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(this.series, function (series) {
                var seriesMin;
                var seriesMax;
                if (series.get("xAxis") === _this) {
                    seriesMin = series.getPrivate("minX");
                    seriesMax = series.getPrivate("maxX");
                }
                else if (series.get("yAxis") === _this) {
                    seriesMin = series.getPrivate("minY");
                    seriesMax = series.getPrivate("maxY");
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(seriesMin) && _core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(seriesMax)) {
                    min = Math.min(min, seriesMin);
                    max = Math.max(max, seriesMax);
                    var diff = seriesMax - seriesMin;
                    if (diff <= 0) {
                        diff = Math.abs(seriesMax / 100);
                    }
                    if (diff < minDiff) {
                        minDiff = diff;
                    }
                }
            });
            if (this.get("logarithmic")) {
                var treatZeroAs = this.get("treatZeroAs");
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(treatZeroAs)) {
                    if (min <= 0) {
                        min = treatZeroAs;
                    }
                }
                if (min <= 0) {
                    new Error("Logarithmic value axis can not have values <= 0.");
                }
            }
            if (min === 0 && max === 0) {
                max = 0.9;
                min = -0.9;
            }
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minDefined)) {
                min = minDefined;
            }
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined)) {
                max = maxDefined;
            }
            // meaning no min/max found on series/ranges and no min/max was defined
            if (min === Infinity && max === -Infinity) {
                return;
            }
            // adapter
            var minAdapted = this.adapters.fold("min", min);
            var maxAdapted = this.adapters.fold("max", max);
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minAdapted)) {
                min = minAdapted;
            }
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxAdapted)) {
                max = maxAdapted;
            }
            // DateAxis does some magic here
            min = this._fixMin(min);
            max = this._fixMax(max);
            // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date
            if (max - min <= 1 / Math.pow(10, 15)) {
                if (max - min !== 0) {
                    this._deltaMinMax = (max - min) / 2;
                }
                else {
                    // the number by which we need to raise 10 to get difference
                    var exponent = Math.log(Math.abs(max)) * Math.LOG10E;
                    // here we find a number which is power of 10 and has the same count of numbers as difference has
                    var power = Math.pow(10, Math.floor(exponent));
                    // reduce this number by 10 times
                    power = power / 10;
                    this._deltaMinMax = power;
                }
                min -= this._deltaMinMax;
                max += this._deltaMinMax;
            }
            // add extras
            min -= (max - min) * extraMin;
            max += (max - min) * extraMax;
            this._minReal = min;
            this._maxReal = max;
            var strict = this.get("strictMinMax");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined)) {
                strict = true;
            }
            var gridCount = this.get("renderer").gridCount();
            var minMaxStep = this._adjustMinMax(min, max, gridCount, strict);
            min = minMaxStep.min;
            max = minMaxStep.max;
            // do it for the second time with strict true (importat!)
            minMaxStep = this._adjustMinMax(min, max, gridCount, true);
            min = minMaxStep.min;
            max = minMaxStep.max;
            // return min max if strict
            if (this.get("strictMinMax")) {
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minDefined)) {
                    min = minDefined;
                }
                else {
                    min = this._minReal;
                }
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined)) {
                    max = maxDefined;
                }
                else {
                    max = this._maxReal;
                }
                if (max - min <= 0.00000001) {
                    min -= this._deltaMinMax;
                    max += this._deltaMinMax;
                }
                min -= (max - min) * extraMin;
                max += (max - min) * extraMax;
            }
            minAdapted = this.adapters.fold("min", min);
            maxAdapted = this.adapters.fold("max", max);
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minAdapted)) {
                min = minAdapted;
            }
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxAdapted)) {
                max = maxAdapted;
            }
            if (minDiff == Infinity) {
                minDiff = (max - min);
            }
            var syncWithAxis = this.get("syncWithAxis");
            if (syncWithAxis) {
                minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate("minFinal", syncWithAxis.getPrivate("min", 0)), syncWithAxis.getPrivate("maxFinal", syncWithAxis.getPrivate("max", 1)), syncWithAxis.getPrivate("step", 1));
                min = minMaxStep.min;
                max = minMaxStep.max;
            }
            this.setPrivateRaw("maxZoomFactor", (max - min) / minDiff * this.get("maxZoomFactor", 100));
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(min) && _core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(max)) {
                if (this.getPrivate("minFinal") !== min || this.getPrivate("maxFinal") !== max) {
                    this.setPrivate("minFinal", min);
                    this.setPrivate("maxFinal", max);
                    var duration = this.get("interpolationDuration", 0);
                    var easing = this.get("interpolationEasing");
                    this.animatePrivate({ key: "min", to: min, duration: duration, easing: easing });
                    this.animatePrivate({ key: "max", to: max, duration: duration, easing: easing });
                }
            }
        }
    });
    Object.defineProperty(ValueAxis.prototype, "_adjustMinMax", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min, max, gridCount, strictMode) {
            var logarithmic = this.get("logarithmic");
            // will fail if 0
            if (gridCount <= 1) {
                gridCount = 1;
            }
            gridCount = Math.round(gridCount);
            var initialMin = min;
            var initialMax = max;
            var difference = max - min;
            // in case min and max is the same, use max
            if (difference === 0) {
                difference = Math.abs(max);
            }
            // the number by which we need to raise 10 to get difference
            var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
            // here we find a number which is power of 10 and has the same count of numbers as difference has
            var power = Math.pow(10, Math.floor(exponent));
            // reduce this number by 10 times
            power = power / 10;
            var extra = power;
            if (strictMode) {
                extra = 0;
            }
            if (!logarithmic) {
                // round down min
                if (strictMode) {
                    min = Math.floor(min / power) * power;
                    // round up max
                    max = Math.ceil(max / power) * power;
                }
                else {
                    min = Math.ceil(min / power) * power - extra;
                    // round up max
                    max = Math.floor(max / power) * power + extra;
                }
                // don't let min go below 0 if real min is >= 0
                if (min < 0 && initialMin >= 0) {
                    min = 0;
                }
                // don't let max go above 0 if real max is <= 0
                if (max > 0 && initialMax <= 0) {
                    max = 0;
                }
            }
            // logarithmic
            else {
                if (min <= 0) {
                    //throw Error("Logarithmic value axis can not have values <= 0.");
                    min = this.get("baseValue", 0);
                }
                if (min === Infinity) {
                    min = 1;
                }
                if (max === -Infinity) {
                    max = 10;
                }
                min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));
                max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));
                if (this.get("strictMinMax")) {
                    var minDefined = this.get("min");
                    var maxDefined = this.get("max");
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(minDefined) && minDefined > 0) {
                        min = minDefined;
                    }
                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxDefined) && maxDefined > 0) {
                        max = maxDefined;
                    }
                }
            }
            exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
            power = Math.pow(10, Math.floor(exponent));
            power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance
            // approximate difference between two grid lines
            var step = Math.ceil((difference / gridCount) / power) * power;
            var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
            // the step should divide by  2, 5, and 10.
            var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10
            if (stepDivisor > 5) {
                stepDivisor = 10;
            }
            else if (stepDivisor <= 5 && stepDivisor > 2) {
                stepDivisor = 5;
            }
            // now get real step
            step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;
            var maxPrecision = this.get("maxPrecision");
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(maxPrecision)) {
                var ceiledStep = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.ceil(step, maxPrecision);
                if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {
                    step = ceiledStep;
                }
            }
            var decCount = 0;
            // in case numbers are smaller than 1
            if (stepPower < 1) {
                // exponent is less then 1 too. Count decimals of exponent
                decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;
                // round step
                step = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(step, decCount);
            }
            if (!logarithmic) {
                // final min and max
                var minCount = Math.floor(min / step);
                min = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(step * minCount, decCount);
                var maxCount = void 0;
                if (!strictMode) {
                    maxCount = Math.ceil(max / step);
                }
                else {
                    maxCount = Math.floor(max / step);
                }
                if (maxCount === minCount) {
                    maxCount++;
                }
                max = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(step * maxCount, decCount);
                if (max < initialMax) {
                    max = max + step;
                }
                if (min > initialMin) {
                    min = min - step;
                }
            }
            step = this.fixSmallStep(step);
            return { min: min, max: max, step: step };
        }
    });
    /**
     * Returns text to be used in an axis tooltip for specific relative position.
     *
     * @param   position  Position
     * @return            Tooltip text
     */
    Object.defineProperty(ValueAxis.prototype, "getTooltipText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (position) {
            var numberFormat = this.get("tooltipNumberFormat", this.get("numberFormat"));
            var formatter = this.getNumberFormatter();
            var extraDecimals = this.get("extraTooltipPrecision", 0);
            var decimals = this.getPrivate("stepDecimalPlaces", 0) + extraDecimals;
            var value = _core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(this.positionToValue(position), decimals);
            if (numberFormat) {
                return formatter.format(value, numberFormat);
            }
            else {
                return formatter.format(value, undefined, decimals);
                //label.set("text", this.getNumberFormatter().format(value, undefined, this.getPrivate("stepDecimalPlaces")));
            }
            // //@todo number formatter + tag
            // return $math.round(this.positionToValue(position), this.getPrivate("stepDecimalPlaces")).toString();
        }
    });
    /**
     * Returns a data item from series that is closest to the `position`.
     *
     * @param   series    Series
     * @param   position  Relative position
     * @return            Data item
     */
    Object.defineProperty(ValueAxis.prototype, "getSeriesItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series, position) {
            var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
            var value = this.positionToValue(position);
            var index = undefined;
            var oldDiff;
            _core_util_Array__WEBPACK_IMPORTED_MODULE_6__.each(series.dataItems, function (dataItem, i) {
                var diff = Math.abs(dataItem.get(fieldName) - value);
                if (index === undefined || diff < oldDiff) {
                    index = i;
                    oldDiff = diff;
                }
            });
            if (index != null) {
                return series.dataItems[index];
            }
        }
    });
    /**
     * Zooms the axis to specific `start` and `end` values.
     *
     * Optional `duration` specifies duration of zoom animation in milliseconds.
     *
     * @param  start     Start value
     * @param  end       End value
     * @param  duration  Duration in milliseconds
     */
    Object.defineProperty(ValueAxis.prototype, "zoomToValues", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (start, end, duration) {
            var min = this.getPrivate("minFinal", 0);
            var max = this.getPrivate("maxFinal", 0);
            if (this.getPrivate("min") != null && this.getPrivate("max") != null) {
                this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);
            }
        }
    });
    /**
     * Syncs with a target axis.
     *
     * @param  min  Min
     * @param  max  Max
     * @param  step Step
     */
    Object.defineProperty(ValueAxis.prototype, "_syncAxes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min, max, step, syncMin, syncMax, syncStep) {
            var axis = this.get("syncWithAxis");
            if (axis) {
                var count = Math.round(syncMax - syncMin) / syncStep;
                var currentCount = Math.round((max - min) / step);
                var gridCount = this.get("renderer").gridCount();
                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(count) && _core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(currentCount)) {
                    var synced = false;
                    var c = 0;
                    var diff = (max - min) * 0.01;
                    var omin = min;
                    var omax = max;
                    var ostep = step;
                    while (synced != true) {
                        synced = this._checkSync(omin, omax, ostep, count);
                        c++;
                        if (c > 500) {
                            synced = true;
                        }
                        if (!synced) {
                            if (c / 3 == Math.round(c / 3)) {
                                omin = min - diff * c;
                                if (min >= 0 && omin < 0) {
                                    omin = 0;
                                }
                            }
                            else {
                                omax = max + diff * c;
                                if (omax <= 0 && omax > 0) {
                                    omax = 0;
                                }
                            }
                            var minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);
                            omin = minMaxStep.min;
                            omax = minMaxStep.max;
                            ostep = minMaxStep.step;
                        }
                        else {
                            min = omin;
                            max = omax;
                            step = ostep;
                        }
                    }
                }
            }
            return { min: min, max: max, step: step };
        }
    });
    /**
     * Returns `true` if axis needs to be resunced with some other axis.
     */
    Object.defineProperty(ValueAxis.prototype, "_checkSync", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min, max, step, count) {
            var currentCount = (max - min) / step;
            for (var i = 1; i < count; i++) {
                if (_core_util_Math__WEBPACK_IMPORTED_MODULE_5__.round(currentCount / i, 1) == count || currentCount * i == count) {
                    return true;
                }
            }
            return false;
        }
    });
    Object.defineProperty(ValueAxis, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ValueAxis"
    });
    Object.defineProperty(ValueAxis, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Axis__WEBPACK_IMPORTED_MODULE_7__.Axis.classNames.concat([ValueAxis.className])
    });
    return ValueAxis;
}(_Axis__WEBPACK_IMPORTED_MODULE_7__.Axis));

//# sourceMappingURL=ValueAxis.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/LineSeries.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/LineSeries.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineSeries": () => (/* binding */ LineSeries)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _XYSeries__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./XYSeries */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/XYSeries.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-shape */ "./node_modules/d3-shape/src/line.js");
/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-shape */ "./node_modules/d3-shape/src/area.js");
/* harmony import */ var _core_util_Template__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/util/Template */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");










/**
 * Used to plot line and/or area series.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info
 * @important
 */
var LineSeries = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(LineSeries, _super);
    function LineSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_endIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_strokeGenerator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0,d3_shape__WEBPACK_IMPORTED_MODULE_1__["default"])()
        });
        Object.defineProperty(_this, "_fillGenerator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0,d3_shape__WEBPACK_IMPORTED_MODULE_2__["default"])()
        });
        /**
         * A [[TemplateList]] of all line segments in series.
         *
         * `strokes.template` can be used to set default settings for all line
         * segments, or to change on existing ones.
         *
         * @default new ListTemplate<Graphics>
         */
        Object.defineProperty(_this, "strokes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"]({}), function () { return _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_6__.mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "stroke"])
            }, [_this.strokes.template]); })
        });
        /**
         * A [[TemplateList]] of all segment fills in series.
         *
         * `fills.template` can be used to set default settings for all segment
         * fills, or to change on existing ones.
         *
         * @default new ListTemplate<Graphics>
         */
        Object.defineProperty(_this, "fills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"]({}), function () { return _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_6__.mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "fill"])
            }, [_this.fills.template]); })
        });
        // custom set from data
        Object.defineProperty(_this, "_fillTemplate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_strokeTemplate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(LineSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._fillGenerator.y0(function (p) {
                return p[3];
            });
            this._fillGenerator.x0(function (p) {
                return p[2];
            });
            this._fillGenerator.y1(function (p) {
                return p[1];
            });
            this._fillGenerator.x1(function (p) {
                return p[0];
            });
            _super.prototype._afterNew.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(LineSeries.prototype, "makeStroke", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (strokes) {
            var stroke = this.mainContainer.children.push(strokes.make());
            strokes.push(stroke);
            return stroke;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(LineSeries.prototype, "makeFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fills) {
            var fill = this.mainContainer.children.push(fills.make());
            fills.push(fill);
            return fill;
        }
    });
    Object.defineProperty(LineSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._strokeTemplate = undefined;
            this._fillTemplate = undefined;
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            if (this.isDirty("stroke")) {
                this.strokes.template.set("stroke", this.get("stroke"));
            }
            if (this.isDirty("fill")) {
                this.fills.template.set("fill", this.get("fill"));
            }
            if (this.isDirty("curveFactory")) {
                var curveFactory = this.get("curveFactory");
                if (curveFactory) {
                    this._strokeGenerator.curve(curveFactory);
                    this._fillGenerator.curve(curveFactory);
                }
            }
            if (xAxis.inited && yAxis.inited) {
                if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty("vcx") || this.isDirty("vcy") || this._sizeDirty || this.isDirty("connect") || this.isDirty("curveFactory")) {
                    this.fills.each(function (fill) {
                        fill.setPrivate("visible", false);
                    });
                    this.strokes.each(function (fill) {
                        fill.setPrivate("visible", false);
                    });
                    this.axisRanges.each(function (axisRange) {
                        var fills = axisRange.fills;
                        if (fills) {
                            fills.each(function (fill) {
                                fill.setPrivate("visible", false);
                            });
                        }
                        var strokes = axisRange.strokes;
                        if (strokes) {
                            strokes.each(function (stroke) {
                                stroke.setPrivate("visible", false);
                            });
                        }
                    });
                    var startIndex = this.getPrivate("startIndex", 0);
                    var strokeTemplateField = this.strokes.template.get("templateField");
                    var fillTemplateField = this.fills.template.get("templateField");
                    var strokeTemplateFound = true;
                    var fillTemplateFound = true;
                    if (strokeTemplateField) {
                        strokeTemplateFound = false;
                    }
                    if (fillTemplateField) {
                        fillTemplateFound = false;
                    }
                    var _loop_1 = function (i) {
                        var dataItem = this_1.dataItems[i];
                        var hasValues = true;
                        var dataContext = dataItem.dataContext;
                        if (strokeTemplateField) {
                            if (dataContext[strokeTemplateField]) {
                                strokeTemplateFound = true;
                            }
                        }
                        if (fillTemplateField) {
                            if (dataContext[fillTemplateField]) {
                                fillTemplateFound = true;
                            }
                        }
                        _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this_1._valueFields, function (field) {
                            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(dataItem.get(field))) {
                                hasValues = false;
                            }
                        });
                        if (hasValues && strokeTemplateFound && fillTemplateFound) {
                            startIndex = i;
                            return "break";
                        }
                    };
                    var this_1 = this;
                    for (var i = startIndex - 1; i >= 0; i--) {
                        var state_1 = _loop_1(i);
                        if (state_1 === "break")
                            break;
                    }
                    var len = this.dataItems.length;
                    var endIndex = this.getPrivate("endIndex", len);
                    if (endIndex < len) {
                        endIndex++;
                        var _loop_2 = function (i) {
                            var dataItem = this_2.dataItems[i];
                            var hasValues = true;
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this_2._valueFields, function (field) {
                                if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(dataItem.get(field))) {
                                    hasValues = false;
                                }
                            });
                            if (hasValues) {
                                endIndex = i + 1;
                                return "break";
                            }
                        };
                        var this_2 = this;
                        for (var i = endIndex; i < len; i++) {
                            var state_2 = _loop_2(i);
                            if (state_2 === "break")
                                break;
                        }
                    }
                    this._endIndex = endIndex;
                    this.strokes.clear();
                    this.fills.clear();
                    this._startSegment(0, startIndex);
                }
            }
            else {
                this._skipped = true;
            }
            _super.prototype._updateChildren.call(this);
        }
    });
    Object.defineProperty(LineSeries.prototype, "_startSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (segmentIndex, dataItemIndex) {
            var _this = this;
            var endIndex = this._endIndex;
            var currentEndIndex = endIndex;
            var autoGapCount = this.get("autoGapCount");
            var connect = this.get("connect");
            var fill = this.makeFill(this.fills);
            var fillTemplate = this._fillTemplate;
            var originalTemplate = this.fills.template;
            if (fillTemplate && fillTemplate != originalTemplate) {
                fill.template = fillTemplate;
            }
            fill.setPrivate("visible", true);
            var stroke = this.makeStroke(this.strokes);
            var strokeTemplate = this._strokeTemplate;
            if (strokeTemplate && strokeTemplate != this.strokes.template) {
                stroke.template = strokeTemplate;
            }
            stroke.setPrivate("visible", true);
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var baseAxis = this.get("baseAxis");
            var vcx = this.get("vcx", 1);
            var vcy = this.get("vcy", 1);
            var xField = this._xField;
            var yField = this._yField;
            var xOpenField = this._xOpenField;
            var yOpenField = this._yOpenField;
            var xOpenFieldValue = this.get("openValueXField");
            var yOpenFieldValue = this.get("openValueYField");
            if (!xOpenFieldValue) {
                xOpenField = this._xField;
            }
            if (!yOpenFieldValue) {
                yOpenField = this._yField;
            }
            var stacked = this.get("stacked");
            var basePosX = xAxis.basePosition();
            var basePosY = yAxis.basePosition();
            var baseField;
            if (baseAxis === yAxis) {
                baseField = this._yField;
            }
            else {
                baseField = this._xField;
            }
            var segments = [];
            var points = [];
            segments.push(points);
            var strokeTemplateField = this.strokes.template.get("templateField");
            var fillTemplateField = this.fills.template.get("templateField");
            var locationX = this.get("locationX", 0.5);
            var locationY = this.get("locationY", 0.5);
            var openLocationX = this.get("openLocationX", locationX);
            var openLocationY = this.get("openLocationY", locationY);
            var i;
            var fillVisible = this.fills.template.get("visible");
            if (this.axisRanges.length > 0) {
                fillVisible = true;
            }
            var getOpen = false;
            if (stacked || xOpenFieldValue || yOpenFieldValue) {
                getOpen = true;
            }
            var o = {
                points: points,
                segments: segments,
                stacked: stacked,
                getOpen: getOpen,
                basePosX: basePosX,
                basePosY: basePosY,
                fillVisible: fillVisible,
                xField: xField,
                yField: yField,
                xOpenField: xOpenField,
                yOpenField: yOpenField,
                vcx: vcx,
                vcy: vcy,
                baseAxis: baseAxis,
                xAxis: xAxis,
                yAxis: yAxis,
                locationX: locationX,
                locationY: locationY,
                openLocationX: openLocationX,
                openLocationY: openLocationY
            };
            for (i = dataItemIndex; i < currentEndIndex; i++) {
                var dataItem = this._dataItems[i];
                var valueX = dataItem.get(xField);
                var valueY = dataItem.get(yField);
                if (valueX == null || valueY == null) {
                    if (!connect) {
                        points = [];
                        segments.push(points);
                        o.points = points;
                    }
                }
                else {
                    this._getPoints(dataItem, o);
                }
                if (strokeTemplateField) {
                    var strokeTemplate_1 = dataItem.dataContext[strokeTemplateField];
                    if (strokeTemplate_1) {
                        if (!(strokeTemplate_1 instanceof _core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template)) {
                            strokeTemplate_1 = _core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"](strokeTemplate_1);
                        }
                        this._strokeTemplate = strokeTemplate_1;
                        if (i > dataItemIndex) {
                            currentEndIndex = i;
                            break;
                        }
                        else {
                            stroke.template = strokeTemplate_1;
                        }
                    }
                }
                if (fillTemplateField) {
                    var fillTemplate_1 = dataItem.dataContext[fillTemplateField];
                    if (fillTemplate_1) {
                        if (!(fillTemplate_1 instanceof _core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template)) {
                            fillTemplate_1 = _core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"](fillTemplate_1);
                        }
                        this._fillTemplate = fillTemplate_1;
                        if (i > dataItemIndex) {
                            currentEndIndex = i;
                            break;
                        }
                        else {
                            fill.template = fillTemplate_1;
                        }
                    }
                }
                if (!connect) {
                    var nextItem = this.dataItems[i + 1];
                    if (nextItem) {
                        if (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {
                            points = [];
                            segments.push(points);
                            o.points = points;
                        }
                    }
                }
            }
            if (i === endIndex) {
                this._endLine(points, segments[0][0]);
            }
            if (stroke) {
                this._drawStroke(stroke, segments);
            }
            if (fill) {
                this._drawFill(fill, segments);
            }
            this.axisRanges.each(function (axisRange) {
                var container = axisRange.container;
                var fills = axisRange.fills;
                var fill = _this.makeFill(fills);
                if (container) {
                    container.children.push(fill);
                }
                fill.setPrivate("visible", true);
                _this._drawFill(fill, segments);
                var strokes = axisRange.strokes;
                var stroke = _this.makeStroke(strokes);
                if (container) {
                    container.children.push(stroke);
                }
                stroke.setPrivate("visible", true);
                _this._drawStroke(stroke, segments);
            });
            if (currentEndIndex < endIndex) {
                this._startSegment(segmentIndex + 1, currentEndIndex);
            }
        }
    });
    Object.defineProperty(LineSeries.prototype, "_getPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, o) {
            var points = o.points;
            var itemLocationX = dataItem.get("locationX", o.locationX);
            var itemLocationY = dataItem.get("locationY", o.locationY);
            var xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx);
            var yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy);
            if (this._shouldInclude(xPos)) {
                var iPoint = this.getPoint(xPos, yPos);
                var point = [iPoint.x, iPoint.y];
                dataItem.set("point", iPoint);
                if (o.fillVisible) {
                    var xPos0 = xPos;
                    var yPos0 = yPos;
                    if (o.baseAxis === o.xAxis) {
                        yPos0 = o.basePosY;
                    }
                    else if (o.baseAxis === o.yAxis) {
                        xPos0 = o.basePosX;
                    }
                    if (o.getOpen) {
                        var valueX = dataItem.get(o.xOpenField);
                        var valueY = dataItem.get(o.yOpenField);
                        if (valueX != null && valueY != null) {
                            var itemLocationX_1 = dataItem.get("openLocationX", o.openLocationX);
                            var itemLocationY_1 = dataItem.get("openLocationY", o.openLocationY);
                            if (o.stacked) {
                                var stackToItemX = dataItem.get("stackToItemX");
                                var stackToItemY = dataItem.get("stackToItemY");
                                if (stackToItemX) {
                                    xPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX_1, stackToItemX.component.get("vcx"));
                                }
                                else {
                                    if (o.yAxis === o.baseAxis) {
                                        xPos0 = o.basePosX;
                                    }
                                    else {
                                        xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                    }
                                }
                                if (stackToItemY) {
                                    yPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY_1, stackToItemY.component.get("vcy"));
                                }
                                else {
                                    if (o.xAxis === o.baseAxis) {
                                        yPos0 = o.basePosY;
                                    }
                                    else {
                                        yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                                    }
                                }
                            }
                            else {
                                xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                            }
                        }
                    }
                    var closeIPoint = this.getPoint(xPos0, yPos0);
                    point[2] = closeIPoint.x;
                    point[3] = closeIPoint.y;
                }
                points.push(point);
            }
        }
    });
    Object.defineProperty(LineSeries.prototype, "_endLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_points, _firstPoint) {
        }
    });
    Object.defineProperty(LineSeries.prototype, "_drawStroke", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (graphics, segments) {
            var _this = this;
            if (graphics.get("visible")) {
                graphics.set("draw", function (display) {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(segments, function (segment) {
                        _this._strokeGenerator.context(display);
                        _this._strokeGenerator(segment);
                    });
                });
            }
        }
    });
    Object.defineProperty(LineSeries.prototype, "_drawFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (graphics, segments) {
            var _this = this;
            if (graphics.get("visible")) {
                graphics.set("draw", function (display) {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(segments, function (segment) {
                        _this._fillGenerator.context(display);
                        _this._fillGenerator(segment);
                    });
                });
            }
        }
    });
    Object.defineProperty(LineSeries.prototype, "_processAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axisRange) {
            var _this = this;
            _super.prototype._processAxisRange.call(this, axisRange);
            axisRange.fills = new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"]({}), function () { return _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_6__.mergeTags(axisRange.fills.template.get("themeTags", []), ["line", "series", "fill"]),
            }, [axisRange.fills.template]); });
            axisRange.strokes = new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_4__.Template["new"]({}), function () { return _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(_this._root, {
                themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_6__.mergeTags(axisRange.strokes.template.get("themeTags", []), ["line", "series", "stroke"]),
            }, [axisRange.strokes.template]); });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(LineSeries.prototype, "createLegendMarker", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) {
            var legendDataItem = this.get("legendDataItem");
            if (legendDataItem) {
                var marker = legendDataItem.get("marker");
                var markerRectangle = legendDataItem.get("markerRectangle");
                if (markerRectangle) {
                    markerRectangle.setPrivate("visible", false);
                }
                var legendStroke = marker.children.push(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(this._root, {
                    themeTags: ["line", "series", "legend", "marker", "stroke"]
                }, [this.strokes.template]));
                var legendFill = marker.children.push(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics._new(this._root, {
                    themeTags: ["line", "series", "legend", "marker", "fill"]
                }, [this.fills.template]));
                var disabledColor = this._root.interfaceColors.get("disabled");
                legendStroke.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                legendFill.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                if (this.bullets.length > 0) {
                    var bulletFunction = this.bullets.getIndex(0);
                    if (bulletFunction) {
                        var bullet = bulletFunction(this._root, this, new _core_render_Component__WEBPACK_IMPORTED_MODULE_9__.DataItem(this, {}, {}));
                        if (bullet) {
                            var sprite = bullet.get("sprite");
                            if (sprite instanceof _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.Graphics) {
                                sprite.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                            }
                            if (sprite) {
                                sprite.set("tooltipText", undefined);
                                marker.children.push(sprite);
                                sprite.setAll({ x: marker.width() / 2, y: marker.height() / 2 });
                            }
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(LineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "LineSeries"
    });
    Object.defineProperty(LineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _XYSeries__WEBPACK_IMPORTED_MODULE_10__.XYSeries.classNames.concat([LineSeries.className])
    });
    return LineSeries;
}(_XYSeries__WEBPACK_IMPORTED_MODULE_10__.XYSeries));

//# sourceMappingURL=LineSeries.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedXLineSeries.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedXLineSeries.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SmoothedXLineSeries": () => (/* binding */ SmoothedXLineSeries)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _LineSeries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineSeries */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/LineSeries.js");
/* harmony import */ var _core_render_MonotoneXTension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/MonotoneXTension */ "./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js");



/**
 * Smoothed line series suitable for horizontal plots.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
 */
var SmoothedXLineSeries = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SmoothedXLineSeries, _super);
    function SmoothedXLineSeries() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SmoothedXLineSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._setDefault("curveFactory", (0,_core_render_MonotoneXTension__WEBPACK_IMPORTED_MODULE_1__.curveMonotoneXTension)(this.get("tension", 0.5)));
            _super.prototype._afterNew.call(this);
        }
    });
    Object.defineProperty(SmoothedXLineSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("tension")) {
                this.set("curveFactory", (0,_core_render_MonotoneXTension__WEBPACK_IMPORTED_MODULE_1__.curveMonotoneXTension)(this.get("tension", 0.5)));
                this._valuesDirty = true;
            }
            _super.prototype._updateChildren.call(this);
        }
    });
    Object.defineProperty(SmoothedXLineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "SmoothedXLineSeries"
    });
    Object.defineProperty(SmoothedXLineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _LineSeries__WEBPACK_IMPORTED_MODULE_2__.LineSeries.classNames.concat([SmoothedXLineSeries.className])
    });
    return SmoothedXLineSeries;
}(_LineSeries__WEBPACK_IMPORTED_MODULE_2__.LineSeries));

//# sourceMappingURL=SmoothedXLineSeries.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/XYSeries.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/XYSeries.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XYSeries": () => (/* binding */ XYSeries)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _core_render_Series__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/render/Series */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Series.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Object__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");










/**
 * @ignore
 */
function min(left, right) {
    if (left == null) {
        return right;
    }
    else if (right == null) {
        return left;
    }
    else if (right < left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * @ignore
 */
function max(left, right) {
    if (left == null) {
        return right;
    }
    else if (right == null) {
        return left;
    }
    else if (right > left) {
        return right;
    }
    else {
        return left;
    }
}
/**
 * A base class for all XY chart series.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/} for more info
 */
var XYSeries = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(XYSeries, _super);
    function XYSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_xField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_yField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_xOpenField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_yOpenField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_xLowField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_xHighField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_yLowField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_yHighField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_axesDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_stackDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_selectionProcessed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_dataSets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_mainContainerMask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A [[Container]] that us used to put series' elements in.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "mainContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, {}))
        });
        /**
         * A list of axis ranges that affect the series.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         */
        Object.defineProperty(_this, "axisRanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_2__.List()
        });
        Object.defineProperty(_this, "_skipped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_couldStackTo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_reallyStackedTo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_stackedSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_aLocationX0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_aLocationX1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_aLocationY0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_aLocationY1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_showBullets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "valueXFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "valueX",
                "openValueX"
            ]
        });
        Object.defineProperty(_this, "valueYFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "valueY",
                "openValueY"
            ]
        });
        Object.defineProperty(_this, "_valueXFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_valueYFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // used for full min/max
        Object.defineProperty(_this, "_valueXShowFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_valueYShowFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // used for selection (uses working)
        Object.defineProperty(_this, "__valueXShowFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "__valueYShowFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_emptyDataItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_render_Component__WEBPACK_IMPORTED_MODULE_3__.DataItem(_this, undefined, {})
        });
        return _this;
    }
    Object.defineProperty(XYSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this.fields.push("categoryX", "categoryY", "openCategoryX", "openCategoryY");
            this.valueFields.push("valueX", "valueY", "openValueX", "openValueY");
            this._setRawDefault("vcx", 1);
            this._setRawDefault("vcy", 1);
            // this can't go to themes, as data might be parsed before theme
            this._setRawDefault("valueXShow", "valueXWorking");
            this._setRawDefault("valueYShow", "valueYWorking");
            this._setRawDefault("openValueXShow", "openValueXWorking");
            this._setRawDefault("openValueYShow", "openValueYWorking");
            _super.prototype._afterNew.call(this);
            this._settings.xAxis.series.push(this);
            this._settings.yAxis.series.push(this);
            this.set("maskContent", true);
            this._disposers.push(this.axisRanges.events.onAll(function (change) {
                if (change.type === "clear") {
                    _this.axisRanges.each(function (axisRange) {
                        _this._removeAxisRange(axisRange);
                    });
                }
                else if (change.type === "push") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "setIndex") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "insertIndex") {
                    _this._processAxisRange(change.newValue);
                }
                else if (change.type === "removeIndex") {
                    _this._removeAxisRange(change.oldValue);
                }
                else {
                    throw new Error("Unknown IStreamEvent type");
                }
            }));
            if (!this.get("baseAxis")) {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                if (yAxis.isType("CategoryAxis") || yAxis.isType("DateAxis")) {
                    this.set("baseAxis", yAxis);
                }
                else {
                    this.set("baseAxis", xAxis);
                }
            }
            this.states.create("hidden", { opacity: 1, visible: false });
            this._makeFieldNames();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_processAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axisRange) {
            var container = _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](this._root, {});
            axisRange.container = container;
            this.children.push(container);
            axisRange.series = this;
            var axisDataItem = axisRange.axisDataItem;
            axisDataItem.setRaw("isRange", true);
            var axis = axisDataItem.component;
            if (axis) {
                axis._processAxisRange(axisDataItem);
                axisDataItem.get("label").set("visible", false);
                axisDataItem.get("tick").set("visible", false);
                axisDataItem.get("grid").set("visible", false);
                axisDataItem.get("axisFill").set("visible", false);
                var bullet = axisDataItem.get("bullet");
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite.setPrivate("visible", false);
                    }
                }
                var axisFill = axisDataItem.get("axisFill");
                if (axisFill) {
                    this.children.push(axisFill);
                    container.set("mask", axisFill);
                    axisFill._setSoft("fillOpacity", 0);
                }
                axis._seriesAxisRanges.push(axisDataItem);
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_removeAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axisRange) {
            var container = axisRange.container;
            if (container) {
                container.dispose();
            }
            axisRange.axisDataItem.dispose();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_updateFields", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._updateFields.call(this);
            this._valueXFields = [];
            this._valueYFields = [];
            this._valueXShowFields = [];
            this._valueYShowFields = [];
            this.__valueXShowFields = [];
            this.__valueYShowFields = [];
            if (this.valueXFields) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.valueXFields, function (key) {
                    var field = _this.get((key + "Field"));
                    if (field) {
                        _this._valueXFields.push(key);
                        var field_1 = _this.get((key + "Show"));
                        _this.__valueXShowFields.push(field_1);
                        if (field_1.indexOf("Working") != -1) {
                            _this._valueXShowFields.push(field_1.split("Working")[0]);
                        }
                        else {
                            _this._valueYShowFields.push(field_1);
                        }
                    }
                });
            }
            if (this.valueYFields) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.valueYFields, function (key) {
                    var field = _this.get((key + "Field"));
                    if (field) {
                        _this._valueYFields.push(key);
                        var field_2 = _this.get((key + "Show"));
                        _this.__valueYShowFields.push(field_2);
                        if (field_2.indexOf("Working") != -1) {
                            _this._valueYShowFields.push(field_2.split("Working")[0]);
                        }
                        else {
                            _this._valueYShowFields.push(field_2);
                        }
                    }
                });
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.removeFirst(this.get("xAxis").series, this);
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.removeFirst(this.get("yAxis").series, this);
        }
    });
    // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
    Object.defineProperty(XYSeries.prototype, "_min", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var newValue = min(this.getPrivate(key), value);
            this.setPrivate(key, newValue);
        }
    });
    // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
    Object.defineProperty(XYSeries.prototype, "_max", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var newValue = max(this.getPrivate(key), value);
            this.setPrivate(key, newValue);
        }
    });
    Object.defineProperty(XYSeries.prototype, "_shouldMakeBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            if (dataItem.get(this._xField) != null && dataItem.get(this._yField) != null) {
                return true;
            }
            return false;
        }
    });
    Object.defineProperty(XYSeries.prototype, "_makeFieldNames", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var xName = xAxis.getPrivate("name");
            var xCapName = _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.capitalizeFirst(xName);
            var yName = yAxis.getPrivate("name");
            var yCapName = _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.capitalizeFirst(yName);
            var xLetter = xAxis.get("renderer").getPrivate("letter");
            var yLetter = yAxis.get("renderer").getPrivate("letter");
            var open = "open";
            var low = "low";
            var high = "high";
            var show = "Show";
            if (xAxis.className === "ValueAxis") {
                this._xField = this.get((xName + xLetter + show));
                this._xOpenField = this.get((open + xCapName + xLetter + show));
                this._xLowField = this.get((low + xCapName + xLetter + show));
                this._xHighField = this.get((high + xCapName + xLetter + show));
            }
            else {
                this._xField = (xName + xLetter);
                this._xOpenField = (open + xCapName + xLetter);
                this._xLowField = (low + xCapName + xLetter);
                this._xHighField = (high + xCapName + xLetter);
            }
            if (yAxis.className === "ValueAxis") {
                this._yField = this.get((yName + yLetter + show));
                this._yOpenField = this.get((open + yCapName + yLetter + show));
                this._yLowField = this.get((low + yCapName + yLetter + show));
                this._yHighField = this.get((high + yCapName + yLetter + show));
            }
            else {
                this._yField = (yName + yLetter);
                this._yOpenField = (open + yCapName + yLetter);
                this._yLowField = (low + yCapName + yLetter);
                this._yHighField = (high + yCapName + yLetter);
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_fixVC", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var baseAxis = this.get("baseAxis");
            var hiddenState = this.states.lookup("hidden");
            var sequencedInterpolation = this.get("sequencedInterpolation");
            if (hiddenState) {
                var value = 0;
                if (sequencedInterpolation) {
                    value = 0.999999999999; // makes animate, good for stacked
                }
                if (xAxis === baseAxis) {
                    hiddenState.set("vcy", value);
                }
                else if (yAxis === baseAxis) {
                    hiddenState.set("vcx", value);
                }
                else {
                    hiddenState.set("vcy", value);
                    hiddenState.set("vcx", value);
                }
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_handleMaskBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("maskBullets")) {
                this.bulletsContainer.set("maskContent", this.get("maskBullets"));
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._prepareChildren.call(this);
            this.set("width", this.get("xAxis").width());
            this.set("height", this.get("yAxis").height());
            this._handleMaskBullets();
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var baseAxis = this.get("baseAxis");
            if (this.isDirty("baseAxis")) {
                this._fixVC();
            }
            if (xAxis === baseAxis) {
                this.set("y", yAxis.y() - _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.relativeToValue(yAxis.get("centerY", 0), yAxis.height()) - yAxis.parent.get("paddingTop", 0));
                this.bulletsContainer.set("y", this.y());
            }
            else if (yAxis === baseAxis) {
                this.set("x", xAxis.x() - _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.relativeToValue(xAxis.get("centerX", 0), xAxis.width()) - xAxis.parent.get("paddingLeft", 0));
                this.bulletsContainer.set("x", this.x());
            }
            var stacked = this.get("stacked");
            if (this.isDirty("stacked")) {
                if (stacked) {
                    if (this._valuesDirty && !this._dataProcessed) {
                    }
                    else {
                        this._stack();
                    }
                }
                else {
                    this._unstack();
                }
            }
            if (this._valuesDirty && !this._dataProcessed) {
                this._dataProcessed = true;
                if (stacked) {
                    this._stack();
                }
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.dataItems, function (dataItem) {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(_this._valueXShowFields, function (key) {
                        var value = dataItem.get(key);
                        if (value != null) {
                            if (stacked) {
                                value += _this.getStackedXValue(dataItem, key);
                            }
                            _this._min("minX", value);
                            _this._max("maxX", value);
                        }
                    });
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(_this._valueYShowFields, function (key) {
                        var value = dataItem.get(key);
                        if (value != null) {
                            if (stacked) {
                                value += _this.getStackedYValue(dataItem, key);
                            }
                            _this._min("minY", value);
                            _this._max("maxY", value);
                        }
                    });
                    xAxis.processSeriesDataItem(dataItem, _this._valueXFields);
                    yAxis.processSeriesDataItem(dataItem, _this._valueYFields);
                });
                if (!this.get("ignoreMinMax")) {
                    if (this.isPrivateDirty("minX") || this.isPrivateDirty("maxX")) {
                        xAxis.markDirtyExtremes();
                    }
                    if (this.isPrivateDirty("minY") || this.isPrivateDirty("maxY")) {
                        yAxis.markDirtyExtremes();
                    }
                }
                this._markStakedDirtyStack();
                //this.updateLegendMarker(undefined); // causes legend marker to change color instantly when on
                this.updateLegendValue(undefined);
            }
            if (this.isDirty("vcx") || this.isDirty("vcy")) {
                this._markStakedDirtyStack();
            }
            if (!this._dataGrouped) {
                xAxis._groupSeriesData(this);
                yAxis._groupSeriesData(this);
                this._dataGrouped = true;
            }
            if ((this._valuesDirty || this.isPrivateDirty("startIndex") || this.isPrivateDirty("endIndex") || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty)) {
                var startIndex = this.getPrivate("startIndex", 0);
                var endIndex = this.getPrivate("endIndex", this.dataItems.length);
                var minBulletDistance = this.get("minBulletDistance", 0);
                if (minBulletDistance > 0 && baseAxis) {
                    if (baseAxis.get("renderer").axisLength() / (endIndex - startIndex) > minBulletDistance) {
                        this._showBullets = true;
                    }
                    else {
                        this._showBullets = false;
                    }
                }
                if ((this._psi != startIndex || this._pei != endIndex || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty || this._valuesDirty) && !this._selectionProcessed) {
                    this._selectionProcessed = true;
                    var vcx = this.get("vcx", 1);
                    var vcy = this.get("vcy", 1);
                    var stacked_1 = this.get("stacked", false);
                    if (baseAxis === xAxis) {
                        yAxis._calculateTotals();
                        this.setPrivateRaw("selectionMinY", undefined);
                        this.setPrivateRaw("selectionMaxY", undefined);
                        for (var i = startIndex; i < endIndex; i++) {
                            this.processYSelectionDataItem(this.dataItems[i], vcy, stacked_1);
                        }
                    }
                    else if (baseAxis === yAxis) {
                        xAxis._calculateTotals();
                        this.setPrivateRaw("selectionMinX", undefined);
                        this.setPrivateRaw("selectionMaxX", undefined);
                        for (var i = startIndex; i < endIndex; i++) {
                            this.processXSelectionDataItem(this.dataItems[i], vcx, stacked_1);
                        }
                    }
                    if (baseAxis === xAxis) {
                        if (this.get("valueYShow") !== "valueYWorking") {
                            this.setPrivateRaw("minY", this.getPrivate("selectionMinY"));
                            this.setPrivateRaw("maxY", this.getPrivate("selectionMaxY"));
                            yAxis.markDirtyExtremes();
                        }
                    }
                    else if (baseAxis === yAxis) {
                        if (this.get("valueXShow") !== "valueXWorking") {
                            this.setPrivateRaw("minX", this.getPrivate("selectionMinX"));
                            this.setPrivateRaw("maxX", this.getPrivate("selectionMaxX"));
                            xAxis.markDirtyExtremes();
                        }
                    }
                    if (this.isPrivateDirty("selectionMinX") || this.isPrivateDirty("selectionMaxX")) {
                        xAxis.markDirtySelectionExtremes();
                    }
                    if (this.isPrivateDirty("selectionMinY") || this.isPrivateDirty("selectionMaxY")) {
                        yAxis.markDirtySelectionExtremes();
                    }
                    // this.updateLegendValue(undefined); flickers while panning
                }
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_makeRangeMask", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.axisRanges.length > 0) {
                if (!this._mainContainerMask) {
                    var mainContainerMask_1 = this.children.push(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_6__.Graphics["new"](this._root, {}));
                    this._mainContainerMask = mainContainerMask_1;
                    mainContainerMask_1.set("draw", function (display) {
                        var parent = _this.parent;
                        if (parent) {
                            var w = _this._root.container.width();
                            var h = _this._root.container.height();
                            display.moveTo(-w, -h);
                            display.lineTo(-w, h * 2);
                            display.lineTo(w * 2, h * 2);
                            display.lineTo(w * 2, -h);
                            display.lineTo(-w, -h);
                            _this.axisRanges.each(function (axisRange) {
                                var fill = axisRange.axisDataItem.get("axisFill");
                                if (parent) {
                                    if (fill) {
                                        var draw = fill.get("draw");
                                        if (draw) {
                                            draw(mainContainerMask_1._display, mainContainerMask_1);
                                        }
                                    }
                                }
                            });
                        }
                        _this.mainContainer._display.mask = mainContainerMask_1._display;
                    });
                }
                this._mainContainerMask.markDirty();
                this._mainContainerMask._markDirtyKey("fill");
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            this._makeRangeMask();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_maskBaseDraw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var mainContainerMask = this._mainContainerMask;
            mainContainerMask.set("draw", function (display) {
                var parent = _this.parent;
                if (parent) {
                    var w = parent.width();
                    var h = parent.height();
                    display.drawRect(0, 0, w, h);
                }
            });
        }
    });
    Object.defineProperty(XYSeries.prototype, "_stack", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var chart = this.chart;
            if (chart) {
                var seriesIndex = chart.series.indexOf(this);
                this._couldStackTo = [];
                if (seriesIndex > 0) {
                    var series = void 0;
                    for (var i = seriesIndex - 1; i >= 0; i--) {
                        series = chart.series.getIndex(i);
                        if (series.get("xAxis") === this.get("xAxis") && series.get("yAxis") === this.get("yAxis") && series.className === this.className) {
                            this._couldStackTo.push(series);
                        }
                    }
                }
                this._stackDataItems();
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_unstack", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _core_util_Object__WEBPACK_IMPORTED_MODULE_7__.each(this._reallyStackedTo, function (_key, value) {
                delete (value._stackedSeries[_this.uid]);
            });
            this._reallyStackedTo = {};
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.dataItems, function (dataItem) {
                dataItem.setRaw("stackToItemY", undefined);
                dataItem.setRaw("stackToItemX", undefined);
            });
        }
    });
    Object.defineProperty(XYSeries.prototype, "_stackDataItems", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // this works only with the same number of data @todo: search by date/category?
            var baseAxis = this.get("baseAxis");
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var field;
            var stackToItemKey;
            if (baseAxis === xAxis) {
                field = "valueY";
                stackToItemKey = "stackToItemY";
            }
            else if (baseAxis === yAxis) {
                field = "valueX";
                stackToItemKey = "stackToItemX";
            }
            var len = this._couldStackTo.length;
            var index = 0;
            var stackToNegative = this.get("stackToNegative");
            this._reallyStackedTo = {};
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.dataItems, function (dataItem) {
                for (var s = 0; s < len; s++) {
                    var stackToSeries = _this._couldStackTo[s];
                    var stackToItem = stackToSeries.dataItems[index];
                    if (stackToItem) {
                        if (stackToNegative) {
                            var value = dataItem.get(field);
                            var stackValue = stackToItem.get(field);
                            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(value)) {
                                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(stackValue)) {
                                    if (value >= 0 && stackValue >= 0) {
                                        dataItem.setRaw(stackToItemKey, stackToItem);
                                        _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                        stackToSeries._stackedSeries[_this.uid] = _this;
                                        break;
                                    }
                                    if (value < 0 && stackValue < 0) {
                                        dataItem.setRaw(stackToItemKey, stackToItem);
                                        _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                        stackToSeries._stackedSeries[_this.uid] = _this;
                                        break;
                                    }
                                }
                            }
                            else {
                                break;
                            }
                        }
                        else {
                            dataItem.setRaw(stackToItemKey, stackToItem);
                            _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                            stackToSeries._stackedSeries[_this.uid] = _this;
                            break;
                        }
                    }
                }
                index++;
            });
        }
    });
    Object.defineProperty(XYSeries.prototype, "processXSelectionDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, vcx, stacked) {
            var _this = this;
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.__valueXShowFields, function (key) {
                var value = dataItem.get(key);
                if (value != null) {
                    if (stacked) {
                        value += _this.getStackedXValueWorking(dataItem, key);
                    }
                    _this._min("selectionMinX", value);
                    _this._max("selectionMaxX", value * vcx);
                }
            });
        }
    });
    Object.defineProperty(XYSeries.prototype, "processYSelectionDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, vcy, stacked) {
            var _this = this;
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this.__valueYShowFields, function (key) {
                var value = dataItem.get(key);
                if (value != null) {
                    if (stacked) {
                        value += _this.getStackedYValueWorking(dataItem, key);
                    }
                    _this._min("selectionMinY", value);
                    _this._max("selectionMaxY", value * vcy);
                }
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "getStackedYValueWorking", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, key) {
            var stackToItem = dataItem.get("stackToItemY");
            if (stackToItem) {
                var stackedToSeries = stackToItem.component;
                return stackToItem.get(key) * stackedToSeries.get("vcy", 1) + this.getStackedYValueWorking(stackToItem, key);
            }
            return 0;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "getStackedXValueWorking", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, key) {
            var stackToItem = dataItem.get("stackToItemX");
            if (stackToItem) {
                var stackedToSeries = stackToItem.component;
                return stackToItem.get(key) * stackedToSeries.get("vcx", 1) + this.getStackedXValueWorking(stackToItem, key);
            }
            return 0;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "getStackedYValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, key) {
            var stackToItem = dataItem.get("stackToItemY");
            if (stackToItem) {
                return stackToItem.get(key) + this.getStackedYValue(stackToItem, key);
            }
            return 0;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "getStackedXValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, key) {
            var stackToItem = dataItem.get("stackToItemX");
            if (stackToItem) {
                return stackToItem.get(key) + this.getStackedXValue(stackToItem, key);
            }
            return 0;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "createLegendMarker", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) {
            this.updateLegendMarker();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_markDirtyAxes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._axesDirty = true;
            this.markDirty();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_markDataSetDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._afterDataChange();
            this._valuesDirty = true;
            this._dataProcessed = false;
            this._aggregatesCalculated = false;
            this.markDirty();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._axesDirty = false;
            this._selectionProcessed = false;
            this._stackDirty = false;
            this._dataProcessed = false;
        }
    });
    Object.defineProperty(XYSeries.prototype, "_positionBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bullet) {
            var sprite = bullet.get("sprite");
            if (sprite) {
                var dataItem = sprite.dataItem;
                var locationX = bullet.get("locationX", dataItem.get("locationX", 0.5));
                var locationY = bullet.get("locationY", dataItem.get("locationY", 0.5));
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get("vcx", 1));
                var positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get("vcy", 1));
                var point = this.getPoint(positionX, positionY);
                var left = dataItem.get("left", point.x);
                var right = dataItem.get("right", point.x);
                var top_1 = dataItem.get("top", point.y);
                var bottom = dataItem.get("bottom", point.y);
                if (this._shouldShowBullet(positionX, positionY)) {
                    if (!bullet.getPrivate("hidden")) {
                        sprite.setPrivate("visible", true);
                    }
                    else {
                        sprite.setPrivate("visible", false);
                    }
                    var w = right - left;
                    var h = bottom - top_1;
                    if (sprite.isType("Label")) {
                        sprite.set("maxWidth", Math.abs(w));
                        sprite.set("maxHeight", Math.abs(h));
                    }
                    var x = left + w * locationX;
                    var y = bottom - h * locationY;
                    sprite.set("x", x);
                    sprite.set("y", y);
                }
                else {
                    sprite.setPrivate("visible", false);
                }
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_shouldShowBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_positionX, _positionY) {
            return this._showBullets;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "setDataSet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (id) {
            if (this._dataSets[id]) {
                this._handleDataSetChange();
                this._dataItems = this._dataSets[id];
                this._markDataSetDirty();
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_handleDataSetChange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.bullets.length > 0) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this._dataItems, function (dataItem) {
                    var bullets = dataItem.bullets;
                    if (bullets) {
                        _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(bullets, function (bullet) {
                            var sprite = bullet.get("sprite");
                            if (sprite) {
                                sprite.setPrivate("visible", false);
                            }
                        });
                    }
                });
            }
        }
    });
    /**
     * Shows hidden series.
     *
     * @param   duration  Duration of animation in milliseconds
     * @return            Animation promise
     */
    Object.defineProperty(XYSeries.prototype, "show", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises;
                var _this = this;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._fixVC();
                            promises = [];
                            promises.push(_super.prototype.show.call(this, duration).then(function () {
                                _this._isShowing = false;
                                var xAxis = _this.get("xAxis");
                                var yAxis = _this.get("yAxis");
                                var baseAxis = _this.get("baseAxis");
                                if (yAxis !== baseAxis) {
                                    yAxis.markDirtySelectionExtremes();
                                }
                                if (xAxis !== baseAxis) {
                                    xAxis.markDirtySelectionExtremes();
                                }
                            }));
                            promises.push(this.bulletsContainer.show(duration));
                            promises.push(this._sequencedShowHide(true, duration));
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Hides series.
     *
     * @param   duration  Duration of animation in milliseconds
     * @return            Animation promise
     */
    Object.defineProperty(XYSeries.prototype, "hide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises;
                var _this = this;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._fixVC();
                            promises = [];
                            promises.push(_super.prototype.hide.call(this, duration).then(function () {
                                _this._isHiding = false;
                            }));
                            promises.push(this.bulletsContainer.hide(duration));
                            promises.push(this._sequencedShowHide(false, duration));
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Shows series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */
    Object.defineProperty(XYSeries.prototype, "showDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises, easing;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(duration)) {
                                duration = this.get("stateAnimationDuration", 0);
                            }
                            easing = this.get("stateAnimationEasing");
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this._valueFields, function (key) {
                                promises.push(dataItem.animate({ key: key + "Working", to: dataItem.get(key), duration: duration, easing: easing }).waitForStop());
                            });
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Hides series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */
    Object.defineProperty(XYSeries.prototype, "hideDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises, hiddenState, easing, xAxis, yAxis, baseAxis, stacked, min_1, baseValue_1;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                            hiddenState = this.states.create("hidden", {});
                            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(duration)) {
                                duration = hiddenState.get("stateAnimationDuration", this.get("stateAnimationDuration", 0));
                            }
                            easing = hiddenState.get("stateAnimationEasing", this.get("stateAnimationEasing"));
                            xAxis = this.get("xAxis");
                            yAxis = this.get("yAxis");
                            baseAxis = this.get("baseAxis");
                            stacked = this.get("stacked");
                            if (baseAxis === xAxis || !baseAxis) {
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this._valueYFields, function (key) {
                                    var min = yAxis.getPrivate("min");
                                    var baseValue = yAxis.baseValue();
                                    if (_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(min) && min > baseValue) {
                                        baseValue = min;
                                    }
                                    if (stacked) {
                                        baseValue = 0;
                                    }
                                    promises.push(dataItem.animate({ key: key + "Working", to: baseValue, duration: duration, easing: easing }).waitForStop());
                                });
                            }
                            if (baseAxis === yAxis || !baseAxis) {
                                min_1 = xAxis.getPrivate("min");
                                baseValue_1 = xAxis.baseValue();
                                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(min_1) && min_1 > baseValue_1) {
                                    baseValue_1 = min_1;
                                }
                                if (stacked) {
                                    baseValue_1 = 0;
                                }
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this._valueXFields, function (key) {
                                    promises.push(dataItem.animate({ key: key + "Working", to: baseValue_1, duration: duration, easing: easing }).waitForStop());
                                });
                            }
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    Object.defineProperty(XYSeries.prototype, "_markDirtyStack", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._stackDirty = true;
            this.markDirty();
            this._markStakedDirtyStack();
        }
    });
    Object.defineProperty(XYSeries.prototype, "_markStakedDirtyStack", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stackedSeries = this._stackedSeries;
            if (stackedSeries) {
                _core_util_Object__WEBPACK_IMPORTED_MODULE_7__.each(stackedSeries, function (_key, value) {
                    value._markDirtyStack();
                });
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this._skipped) {
                this._markDirtyAxes();
                this._skipped = false;
            }
        }
    });
    /**
     * Shows a tooltip for specific data item.
     *
     * @param  dataItem  Data item
     */
    Object.defineProperty(XYSeries.prototype, "showDataItemTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            this.updateLegendMarker(dataItem);
            this.updateLegendValue(dataItem);
            if (this.get("tooltip")) {
                if (!this.isHidden()) {
                    var tooltip = this.get("tooltip");
                    if (tooltip) {
                        tooltip._setDataItem(dataItem);
                        if (dataItem) {
                            var locationX = this.get("locationX", 0);
                            var locationY = this.get("locationY", 1);
                            var itemLocationX = dataItem.get("locationX", locationX);
                            var itemLocationY = dataItem.get("locationY", locationY);
                            var xAxis = this.get("xAxis");
                            var yAxis = this.get("yAxis");
                            var vcx = this.get("vcx", 1);
                            var vcy = this.get("vcy", 1);
                            var xPos = xAxis.getDataItemPositionX(dataItem, this._xField, this._aLocationX0 + (this._aLocationX1 - this._aLocationX0) * itemLocationX, vcx);
                            var yPos = yAxis.getDataItemPositionY(dataItem, this._yField, this._aLocationY0 + (this._aLocationY1 - this._aLocationY0) * itemLocationY, vcy);
                            var point = this.getPoint(xPos, yPos);
                            var show_1 = true;
                            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(this._valueFields, function (field) {
                                if (dataItem.get(field) == null) {
                                    show_1 = false;
                                }
                            });
                            if (show_1) {
                                var chart = this.chart;
                                if (chart && chart.inPlot(point)) {
                                    tooltip.label.text.markDirtyText();
                                    tooltip.set("tooltipTarget", this._getTooltipTarget(dataItem));
                                    tooltip.set("pointTo", this._display.toGlobal({ x: point.x, y: point.y }));
                                }
                                else {
                                    tooltip._setDataItem(undefined);
                                }
                            }
                            else {
                                tooltip._setDataItem(undefined);
                            }
                        }
                    }
                }
                else {
                    this.hideTooltip();
                }
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_getTooltipTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            if (this.get("seriesTooltipTarget") == "bullet") {
                var bullets = dataItem.bullets;
                if (bullets && bullets.length > 0) {
                    var bullet = bullets[0];
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        return sprite;
                    }
                }
            }
            return this;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "updateLegendValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var legendDataItem = this.get("legendDataItem");
            if (legendDataItem) {
                var label = legendDataItem.get("label");
                if (label) {
                    var txt = "";
                    if (dataItem) {
                        label._setDataItem(dataItem);
                        txt = this.get("legendLabelText", label.get("text", this.get("name", "")));
                    }
                    else {
                        label._setDataItem(this._emptyDataItem);
                        txt = this.get("legendRangeLabelText", this.get("legendLabelText", label.get("text", this.get("name", ""))));
                    }
                    label.set("text", txt);
                }
                var valueLabel = legendDataItem.get("valueLabel");
                if (valueLabel) {
                    var txt = "";
                    if (dataItem) {
                        valueLabel._setDataItem(dataItem);
                        txt = this.get("legendValueText", valueLabel.get("text", ""));
                    }
                    else {
                        valueLabel._setDataItem(this._emptyDataItem);
                        txt = this.get("legendRangeValueText", valueLabel.get("text", ""));
                    }
                    valueLabel.set("text", txt);
                }
            }
        }
    });
    Object.defineProperty(XYSeries.prototype, "_getItemReaderLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var text = "X: {" + this._xField;
            if (this.get("xAxis").isType("DateAxis")) {
                text += ".formatDate()";
            }
            text += "}; Y: {" + this._yField;
            if (this.get("yAxis").isType("DateAxis")) {
                text += ".formatDate()";
            }
            text += "}";
            return text;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "getPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (positionX, positionY) {
            var x = this.get("xAxis").get("renderer").positionToCoordinate(positionX);
            var y = this.get("yAxis").get("renderer").positionToCoordinate(positionY);
            return { x: x, y: y };
        }
    });
    Object.defineProperty(XYSeries.prototype, "_shouldInclude", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_position) {
            return true;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(XYSeries.prototype, "handleCursorHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.hideTooltip();
            this.updateLegendValue(undefined);
            this.updateLegendMarker(undefined);
        }
    });
    Object.defineProperty(XYSeries.prototype, "_afterDataChange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterDataChange.call(this);
            this.setPrivate("startIndex", 0);
            this.setPrivate("endIndex", this.dataItems.length);
            this.resetExtremes();
        }
    });
    // todo description
    Object.defineProperty(XYSeries.prototype, "resetExtremes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setPrivate("selectionMinX", undefined);
            this.setPrivate("selectionMaxX", undefined);
            this.setPrivate("selectionMinY", undefined);
            this.setPrivate("selectionMaxY", undefined);
            this.setPrivate("minX", undefined);
            this.setPrivate("minY", undefined);
            this.setPrivate("maxX", undefined);
            this.setPrivate("maxY", undefined);
        }
    });
    /**
     * Creates and returns an axis range object.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
     * @param   axisDataItem  Axis data item
     * @return                Axis range
     */
    Object.defineProperty(XYSeries.prototype, "createAxisRange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (axisDataItem) {
            return this.axisRanges.push({
                axisDataItem: axisDataItem
            });
        }
    });
    Object.defineProperty(XYSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "XYSeries"
    });
    Object.defineProperty(XYSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Series__WEBPACK_IMPORTED_MODULE_9__.Series.classNames.concat([XYSeries.className])
    });
    return XYSeries;
}(_core_render_Series__WEBPACK_IMPORTED_MODULE_9__.Series));

//# sourceMappingURL=XYSeries.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/Registry.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/Registry.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Registry": () => (/* binding */ Registry),
/* harmony export */   "registry": () => (/* binding */ registry),
/* harmony export */   "addLicense": () => (/* binding */ addLicense),
/* harmony export */   "disposeAllRootElements": () => (/* binding */ disposeAllRootElements)
/* harmony export */ });
/**
 * @ignore
 */
var Registry = /** @class */ (function () {
    function Registry() {
        /**
         * List of applied licenses.
         * @ignore
         */
        Object.defineProperty(this, "licenses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * Entities that have their `id` setting set.
         */
        Object.defineProperty(this, "entitiesById", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        /**
         * All created [[Root]] elements.
         */
        Object.defineProperty(this, "rootElements", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    return Registry;
}());

/**
    * @ignore
 */
var registry = new Registry();
/**
 * Adds a license, e.g.:
 *
 * ```TypeScript
 * am5.addLicense("xxxxxxxx");
 * ```
 * ```JavaScript
 * am5.addLicense("xxxxxxxx");
 * ```
 *
 * Multiple licenses can be added to cover for multiple products.
 *
 * @param  license  License key
 */
function addLicense(license) {
    registry.licenses.push(license);
}
/**
 * Disposes all [[Root]] elements.
 */
function disposeAllRootElements() {
    var root;
    while (root = registry.rootElements.pop()) {
        root.dispose();
    }
}
//# sourceMappingURL=Registry.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/Root.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/Root.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Root": () => (/* binding */ Root)
/* harmony export */ });
/* harmony import */ var _render_Container__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _render_HorizontalLayout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./render/HorizontalLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js");
/* harmony import */ var _render_VerticalLayout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./render/VerticalLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js");
/* harmony import */ var _render_GridLayout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./render/GridLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js");
/* harmony import */ var _util_Disposer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./util/Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _util_ResizeSensor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./util/ResizeSensor */ "./node_modules/@amcharts/amcharts5/.internal/core/util/ResizeSensor.js");
/* harmony import */ var _util_InterfaceColors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util/InterfaceColors */ "./node_modules/@amcharts/amcharts5/.internal/core/util/InterfaceColors.js");
/* harmony import */ var _render_Graphics__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./render/Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _render_Rectangle__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./render/Rectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js");
/* harmony import */ var _render_Tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./render/Tooltip */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js");
/* harmony import */ var _util_NumberFormatter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/NumberFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/NumberFormatter.js");
/* harmony import */ var _util_DateFormatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/DateFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/DateFormatter.js");
/* harmony import */ var _util_DurationFormatter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/DurationFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/DurationFormatter.js");
/* harmony import */ var _util_Language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/Language */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Language.js");
/* harmony import */ var _util_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../themes/DefaultTheme */ "./node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js");
/* harmony import */ var _render_backend_CanvasRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render/backend/CanvasRenderer */ "./node_modules/@amcharts/amcharts5/.internal/core/render/backend/CanvasRenderer.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _util_Color__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _util_PopulateString__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util/PopulateString */ "./node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js");
/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Registry */ "./node_modules/@amcharts/amcharts5/.internal/core/Registry.js");
/* harmony import */ var _util_Order__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./util/Order */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Object__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _locales_en__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../locales/en */ "./node_modules/@amcharts/amcharts5/locales/en.js");


























// TODO implement Disposer
/**
 * Root element of the chart.
 *
 * @see {@link https://www.amcharts.com/docs/v5/getting-started/#Root_element} for more info
 */
var Root = /** @class */ (function () {
    function Root(id, isReal) {
        /**
         * A reference to original chart container (div element).
         */
        Object.defineProperty(this, "dom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_inner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_isDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_isDirtyParents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_dirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dirtyParents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dirtyBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_dirtyPositions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_ticker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_tickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * Root's event dispatcher.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
         */
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher()
        });
        /**
         * @todo needs description
         */
        Object.defineProperty(this, "animationTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_animations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_renderer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _render_backend_CanvasRenderer__WEBPACK_IMPORTED_MODULE_1__.CanvasRenderer()
        });
        Object.defineProperty(this, "_rootContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Main content container.
         */
        Object.defineProperty(this, "container", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A [[Container]] used to display tooltips in.
         */
        Object.defineProperty(this, "tooltipContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tooltip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Locale-related
        /**
         * @ignore
         */
        Object.defineProperty(this, "language", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _util_Language__WEBPACK_IMPORTED_MODULE_2__.Language["new"](this, {})
        });
        /**
         * Locale used by the chart.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/locales/}
         */
        Object.defineProperty(this, "locale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _locales_en__WEBPACK_IMPORTED_MODULE_3__["default"]
        });
        // Date-time related
        /**
         * Use UTC when formatting date/time.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#UTC_and_time_zones} for more info
         */
        Object.defineProperty(this, "utc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Use specific time zone when formatting date/time.
         *
         * @ignore timezones are not yet supported
         */
        Object.defineProperty(this, "timezone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        /**
         * Number formatter.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
         */
        Object.defineProperty(this, "numberFormatter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _util_NumberFormatter__WEBPACK_IMPORTED_MODULE_4__.NumberFormatter["new"](this, {})
        });
        /**
         * Date/time formatter.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
         */
        Object.defineProperty(this, "dateFormatter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _util_DateFormatter__WEBPACK_IMPORTED_MODULE_5__.DateFormatter["new"](this, {})
        });
        /**
         * Duration formatter.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
         */
        Object.defineProperty(this, "durationFormatter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _util_DurationFormatter__WEBPACK_IMPORTED_MODULE_6__.DurationFormatter["new"](this, {})
        });
        // Accessibility
        /**
         * Global tab index for using for the whole chart
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
         */
        Object.defineProperty(this, "tabindex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        //@todo maybe make this better
        Object.defineProperty(this, "_tabindexes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_focusElementDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_focusElementContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_focusedSprite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_keyboardDragPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_tooltipElementContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_readerAlertElement", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_logo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Used for dynamically-created CSS and JavaScript with strict source policies.
         */
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "interfaceColors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "verticalLayout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _render_VerticalLayout__WEBPACK_IMPORTED_MODULE_7__.VerticalLayout["new"](this, {})
        });
        Object.defineProperty(this, "horizontalLayout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _render_HorizontalLayout__WEBPACK_IMPORTED_MODULE_8__.HorizontalLayout["new"](this, {})
        });
        Object.defineProperty(this, "gridLayout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _render_GridLayout__WEBPACK_IMPORTED_MODULE_9__.GridLayout["new"](this, {})
        });
        Object.defineProperty(this, "_isDisposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_disposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "_tooltips", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        var dom;
        if (id instanceof HTMLElement) {
            dom = id;
        }
        else {
            dom = document.getElementById(id);
        }
        this.interfaceColors = _util_InterfaceColors__WEBPACK_IMPORTED_MODULE_10__.InterfaceColors["new"](this, {});
        if (dom === null) {
            throw new Error("Could not find HTML element with id `" + id + "`");
        }
        this.dom = dom;
        var inner = document.createElement("div");
        inner.style.position = "relative";
        dom.appendChild(inner);
        this._inner = inner;
        _Registry__WEBPACK_IMPORTED_MODULE_11__.registry.rootElements.push(this);
    }
    Object.defineProperty(Root, "new", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (id) {
            var root = new Root(id, true);
            root._init();
            return root;
        }
    });
    Object.defineProperty(Root.prototype, "_handleLogo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._logo) {
                if (this._rootContainer.getPrivate("width", 0) <= 150 || this._rootContainer.getPrivate("height", 0) <= 60) {
                    this._logo.hide();
                }
                else {
                    this._logo.show();
                }
            }
        }
    });
    Object.defineProperty(Root.prototype, "_showBranding", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._logo) {
                var logo = this.tooltipContainer.children.push(_render_Container__WEBPACK_IMPORTED_MODULE_12__.Container["new"](this, {
                    interactive: true,
                    interactiveChildren: false,
                    position: "absolute",
                    setStateOnChildren: true,
                    paddingTop: 9,
                    paddingRight: 9,
                    paddingBottom: 9,
                    paddingLeft: 9,
                    scale: .6,
                    y: (0,_util_Percent__WEBPACK_IMPORTED_MODULE_13__.percent)(100),
                    centerY: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100,
                    tooltipText: "Chart created using amCharts 5",
                    tooltipX: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100,
                    cursorOverStyle: "pointer",
                    background: _render_Rectangle__WEBPACK_IMPORTED_MODULE_14__.Rectangle["new"](this, {
                        fill: (0,_util_Color__WEBPACK_IMPORTED_MODULE_15__.color)(0x474758),
                        fillOpacity: 0,
                        tooltipY: 5
                    })
                }));
                var tooltip = _render_Tooltip__WEBPACK_IMPORTED_MODULE_16__.Tooltip["new"](this, {
                    pointerOrientation: "horizontal",
                    paddingTop: 4,
                    paddingRight: 7,
                    paddingBottom: 4,
                    paddingLeft: 7
                });
                tooltip.label.setAll({
                    fontSize: 12
                });
                tooltip.get("background").setAll({
                    fill: this.interfaceColors.get("background"),
                    stroke: this.interfaceColors.get("grid"),
                    strokeOpacity: 0.3
                });
                logo.set("tooltip", tooltip);
                logo.events.on("click", function () {
                    window.open("https://www.amcharts.com/", "_blank");
                });
                logo.states.create("hover", {});
                var m = logo.children.push(_render_Graphics__WEBPACK_IMPORTED_MODULE_17__.Graphics["new"](this, {
                    stroke: (0,_util_Color__WEBPACK_IMPORTED_MODULE_15__.color)(0xcccccc),
                    strokeWidth: 3,
                    svgPath: "M5 25 L13 25h13.6c3.4 0 6 0 10.3-4.3s5.2-12 8.6-12c3.4 0 4.3 8.6 7.7 8.6M83.4 25H79.8c-3.4 0-6 0-10.3-4.3s-5.2-12-8.6-12-4.3 8.6-7.7 8.6"
                }));
                m.states.create("hover", { stroke: (0,_util_Color__WEBPACK_IMPORTED_MODULE_15__.color)(0x3CABFF) });
                var a = logo.children.push(_render_Graphics__WEBPACK_IMPORTED_MODULE_17__.Graphics["new"](this, {
                    stroke: (0,_util_Color__WEBPACK_IMPORTED_MODULE_15__.color)(0x888888),
                    strokeWidth: 3,
                    svgPath: "M83.4 25h-31C37 25 39.5 4.4 28.4 4.4S18.9 24.2 4.3 25H0"
                }));
                a.states.create("hover", { stroke: (0,_util_Color__WEBPACK_IMPORTED_MODULE_15__.color)(0x474758) });
                //logo.set("tooltip", this._tooltip);
                //logo.setPrivate("tooltipTarget", logo.get("background"));
                this._logo = logo;
                this._handleLogo();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_init", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var renderer = this._renderer;
            var rootContainer = _render_Container__WEBPACK_IMPORTED_MODULE_12__.Container["new"](this, { visible: true, width: this.dom.clientWidth, height: this.dom.clientHeight });
            this._rootContainer = rootContainer;
            this._rootContainer._defaultThemes.push(_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_18__.DefaultTheme["new"](this));
            var container = rootContainer.children.push(_render_Container__WEBPACK_IMPORTED_MODULE_12__.Container["new"](this, { visible: true, width: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100, height: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100 }));
            this.container = container;
            renderer.resize(this.dom.clientWidth, this.dom.clientHeight);
            //@todo: better appendChild - refer
            this._inner.appendChild(renderer.view);
            // TODO: TMP TMP TMP for testing only, remove
            //document.body.appendChild((<any>renderer)._ghostView);
            this._disposers.push(new _util_ResizeSensor__WEBPACK_IMPORTED_MODULE_19__.ResizeSensor(this.dom, function () {
                var dom = _this.dom;
                var w = dom.clientWidth;
                var h = dom.clientHeight;
                if (w > 0 && h > 0) {
                    var focusElementContainer_1 = _this._focusElementContainer;
                    focusElementContainer_1.style.width = w + "px";
                    focusElementContainer_1.style.height = h + "px";
                    renderer.resize(w, h);
                    var rootContainer_1 = _this._rootContainer;
                    rootContainer_1.setPrivate("width", w);
                    rootContainer_1.setPrivate("height", h);
                    _this._render();
                    _this._handleLogo();
                }
            }));
            // Create element which is used to make announcements to screen reader
            var readerAlertElement = document.createElement("div");
            readerAlertElement.setAttribute("role", "alert");
            readerAlertElement.style.zIndex = "-100000";
            readerAlertElement.style.opacity = "0";
            readerAlertElement.style.position = "absolute";
            readerAlertElement.style.top = "0";
            this._readerAlertElement = readerAlertElement;
            this._inner.appendChild(this._readerAlertElement);
            var focusElementContainer = document.createElement("div");
            focusElementContainer.style.position = "absolute";
            focusElementContainer.style.pointerEvents = "none";
            focusElementContainer.style.top = "0px";
            focusElementContainer.style.left = "0px";
            focusElementContainer.style.overflow = "hidden";
            focusElementContainer.style.width = this.dom.clientWidth + "px";
            focusElementContainer.style.height = this.dom.clientHeight + "px";
            _util_Utils__WEBPACK_IMPORTED_MODULE_20__.setInteractive(focusElementContainer, false);
            this._focusElementContainer = focusElementContainer;
            this._inner.appendChild(this._focusElementContainer);
            this._tooltipElementContainer = document.createElement("div");
            this._inner.appendChild(this._tooltipElementContainer);
            // Add keyboard events for accessibility, e.g. simulating drag with arrow
            // keys and click with ENTER
            if (_util_Utils__WEBPACK_IMPORTED_MODULE_20__.supports("keyboardevents")) {
                this._disposers.push(_util_Utils__WEBPACK_IMPORTED_MODULE_20__.addEventListener(document, "keydown", function (ev) {
                    var focusedSprite = _this._focusedSprite;
                    if (focusedSprite) {
                        if (ev.keyCode == 27) {
                            // ESC pressed - lose current focus
                            _util_Utils__WEBPACK_IMPORTED_MODULE_20__.blur();
                            _this._focusedSprite = undefined;
                        }
                        var dragOffsetX = 0;
                        var dragOffsetY = 0;
                        // TODO: figure out if using bogus MouseEvent is fine, or it will
                        // fail on some platforms
                        switch (ev.keyCode) {
                            case 13:
                                ev.preventDefault();
                                var downEvent = renderer.getEvent(new MouseEvent("click"));
                                focusedSprite.events.dispatch("click", {
                                    type: "click",
                                    originalEvent: downEvent.event,
                                    point: downEvent.point,
                                    simulated: true,
                                    target: focusedSprite
                                });
                                return;
                            case 37:
                                dragOffsetX = -6;
                                break;
                            case 39:
                                dragOffsetX = 6;
                                break;
                            case 38:
                                dragOffsetY = -6;
                                break;
                            case 40:
                                dragOffsetY = 6;
                                break;
                            default:
                                return;
                        }
                        if (dragOffsetX != 0 || dragOffsetY != 0) {
                            ev.preventDefault();
                            if (!focusedSprite.isDragging()) {
                                // Start dragging
                                _this._keyboardDragPoint = {
                                    x: 0,
                                    y: 0
                                };
                                var downEvent = renderer.getEvent(new MouseEvent("mousedown", {
                                    clientX: 0,
                                    clientY: 0
                                }));
                                if (focusedSprite.events.isEnabled("pointerdown")) {
                                    focusedSprite.events.dispatch("pointerdown", {
                                        type: "pointerdown",
                                        originalEvent: downEvent.event,
                                        point: downEvent.point,
                                        simulated: true,
                                        target: focusedSprite
                                    });
                                }
                            }
                            else {
                                // Move focus marker
                                //this._positionFocusElement(focusedSprite);
                            }
                            // Move incrementally
                            var dragPoint = _this._keyboardDragPoint;
                            dragPoint.x += dragOffsetX;
                            dragPoint.y += dragOffsetY;
                            var moveEvent = renderer.getEvent(new MouseEvent("mousemove", {
                                clientX: dragPoint.x,
                                clientY: dragPoint.y
                            }), false);
                            if (focusedSprite.events.isEnabled("globalpointermove")) {
                                focusedSprite.events.dispatch("globalpointermove", {
                                    type: "globalpointermove",
                                    originalEvent: moveEvent.event,
                                    point: moveEvent.point,
                                    simulated: true,
                                    target: focusedSprite
                                });
                            }
                        }
                    }
                }));
                document.addEventListener("keyup", function (ev) {
                    if (_this._focusedSprite) {
                        var focusedSprite = _this._focusedSprite;
                        switch (ev.keyCode) {
                            case 37:
                            case 39:
                            case 38:
                            case 40:
                                if (focusedSprite.isDragging()) {
                                    // Simulate drag stop
                                    var dragPoint = _this._keyboardDragPoint;
                                    var upEvent = renderer.getEvent(new MouseEvent("mouseup", {
                                        clientX: dragPoint.x,
                                        clientY: dragPoint.y
                                    }));
                                    if (focusedSprite.events.isEnabled("globalpointerup")) {
                                        focusedSprite.events.dispatch("globalpointerup", {
                                            type: "globalpointerup",
                                            originalEvent: upEvent.event,
                                            point: upEvent.point,
                                            simulated: true,
                                            target: focusedSprite
                                        });
                                    }
                                    //this._positionFocusElement(focusedSprite);
                                    _this._keyboardDragPoint = undefined;
                                    // @todo dispatch mouseup event instead of calling dragStop?
                                    // this._dispatchEvent("globalpointerup", target, upEvent);
                                    return;
                                }
                                break;
                        }
                    }
                });
            }
            this._startTicker();
            this.setThemes([]);
            this._addTooltip();
            if (!this._hasLicense()) {
                this._showBranding();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._renderer.render(this._rootContainer._display);
            if (this._focusElementDirty) {
                this._updateCurrentFocus();
                this._focusElementDirty = false;
            }
        }
    });
    Object.defineProperty(Root.prototype, "_runTickers", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            _util_Array__WEBPACK_IMPORTED_MODULE_21__.each(this._tickers, function (f) {
                f(currentTime);
            });
        }
    });
    Object.defineProperty(Root.prototype, "_runAnimations", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            _util_Array__WEBPACK_IMPORTED_MODULE_21__.keepIf(this._animations, function (animation) {
                return !animation._runAnimation(currentTime);
            });
        }
    });
    Object.defineProperty(Root.prototype, "_runDirties", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            //console.log("tick **************************************************************");
            var allParents = {};
            while (this._isDirtyParents) {
                // This must be before calling _prepareChildren
                this._isDirtyParents = false;
                _util_Object__WEBPACK_IMPORTED_MODULE_22__.keys(this._dirtyParents).forEach(function (key) {
                    var parent = _this._dirtyParents[key];
                    delete _this._dirtyParents[key];
                    if (!parent.isDisposed()) {
                        allParents[parent.uid] = parent;
                        parent._prepareChildren();
                    }
                });
            }
            _util_Object__WEBPACK_IMPORTED_MODULE_22__.keys(allParents).forEach(function (key) {
                allParents[key]._updateChildren();
            });
            var objects = [];
            //		console.log("_beforeChanged")
            _util_Object__WEBPACK_IMPORTED_MODULE_22__.keys(this._dirty).forEach(function (key) {
                var entity = _this._dirty[key];
                if (entity.isDisposed()) {
                    delete _this._dirty[entity.uid];
                }
                else {
                    objects.push(entity);
                    entity._beforeChanged();
                }
            });
            //		console.log("_changed")
            objects.forEach(function (entity) {
                entity._changed();
                delete _this._dirty[entity.uid];
                entity._clearDirty();
            });
            this._isDirty = false;
            var depths = {};
            var bounds = [];
            _util_Object__WEBPACK_IMPORTED_MODULE_22__.keys(this._dirtyBounds).forEach(function (key) {
                var entity = _this._dirtyBounds[key];
                delete _this._dirtyBounds[key];
                if (!entity.isDisposed()) {
                    depths[entity.uid] = entity.depth();
                    bounds.push(entity);
                }
            });
            // High depth -> low depth
            bounds.sort(function (x, y) {
                return _util_Order__WEBPACK_IMPORTED_MODULE_23__.compare(depths[y.uid], depths[x.uid]);
            });
            //		console.log("_updateBounds")
            bounds.forEach(function (entity) {
                entity._updateBounds();
            });
            //		console.log("_updatePosition")
            var dirtyPositions = this._dirtyPositions;
            _util_Object__WEBPACK_IMPORTED_MODULE_22__.keys(dirtyPositions).forEach(function (key) {
                var sprite = dirtyPositions[key];
                delete dirtyPositions[key];
                if (!sprite.isDisposed()) {
                    sprite._updatePosition();
                }
            });
            //		console.log("_afterChanged")
            objects.forEach(function (entity) {
                entity._afterChanged();
            });
        }
    });
    Object.defineProperty(Root.prototype, "_runTicker", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            if (!this.isDisposed()) {
                this.animationTime = currentTime;
                if (this.events.isEnabled("framestarted")) {
                    this.events.dispatch("framestarted", {
                        type: "framestarted",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                this._runTickers(currentTime);
                this._runAnimations(currentTime);
                this._runDirties();
                this._render();
                if (this.events.isEnabled("frameended")) {
                    this.events.dispatch("frameended", {
                        type: "frameended",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                // No more work to do
                if (this._tickers.length === 0 &&
                    this._animations.length === 0 &&
                    !this._isDirty) {
                    this._ticker = null;
                    this.animationTime = null;
                }
                else {
                    requestAnimationFrame(this._ticker);
                }
            }
        }
    });
    Object.defineProperty(Root.prototype, "_startTicker", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this._ticker === null) {
                this.animationTime = null;
                this._ticker = function (currentTime) {
                    _this._runTicker(currentTime);
                };
                requestAnimationFrame(this._ticker);
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addDirtyEntity", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity) {
            if (this._dirty[entity.uid] === undefined) {
                this._isDirty = true;
                this._dirty[entity.uid] = entity;
                this._startTicker();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addDirtyParent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parent) {
            if (this._dirtyParents[parent.uid] === undefined) {
                this._isDirty = true;
                this._isDirtyParents = true;
                this._dirtyParents[parent.uid] = parent;
                this._startTicker();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addDirtyBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity) {
            if (this._dirtyBounds[entity.uid] === undefined) {
                this._isDirty = true;
                this._dirtyBounds[entity.uid] = entity;
                this._startTicker();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addDirtyPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (sprite) {
            if (this._dirtyPositions[sprite.uid] === undefined) {
                this._isDirty = true;
                this._dirtyPositions[sprite.uid] = sprite;
                this._startTicker();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (animation) {
            // TODO use numeric id instead
            if (this._animations.indexOf(animation) === -1) {
                this._animations.push(animation);
                this._startTicker();
            }
        }
    });
    Object.defineProperty(Root.prototype, "eachFrame", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            var _this = this;
            this._tickers.push(f);
            this._startTicker();
            return new _util_Disposer__WEBPACK_IMPORTED_MODULE_24__.Disposer(function () {
                _util_Array__WEBPACK_IMPORTED_MODULE_21__.removeFirst(_this._tickers, f);
            });
        }
    });
    /**
     * Returns width of the target container, in pixels.
     *
     * @return Width
     */
    Object.defineProperty(Root.prototype, "width", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.dom.clientWidth;
        }
    });
    /**
     * Returns height of the target container, in pixels.
     *
     * @return Height
     */
    Object.defineProperty(Root.prototype, "height", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.dom.clientHeight;
        }
    });
    /**
     * Disposes root and all the content in it.
     */
    Object.defineProperty(Root.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._isDisposed) {
                this._isDisposed = true;
                this._rootContainer.dispose();
                this._renderer.dispose();
                this.horizontalLayout.dispose();
                this.verticalLayout.dispose();
                this.interfaceColors.dispose();
                _util_Array__WEBPACK_IMPORTED_MODULE_21__.each(this._disposers, function (x) {
                    x.dispose();
                });
                if (this._inner) {
                    _util_Utils__WEBPACK_IMPORTED_MODULE_20__.removeElement(this._inner);
                }
                _util_Array__WEBPACK_IMPORTED_MODULE_21__.remove(_Registry__WEBPACK_IMPORTED_MODULE_11__.registry.rootElements, this);
            }
        }
    });
    /**
     * Returns `true` if root element is disposed.
     *
     * @return Disposed?
     */
    Object.defineProperty(Root.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isDisposed;
        }
    });
    /**
     * Triggers screen reader read out a message.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
     * @param  text  Alert text
     */
    Object.defineProperty(Root.prototype, "readerAlert", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            this._readerAlertElement.innerHTML = text;
        }
    });
    /**
     * Sets themes to be used for the chart.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
     * @param  themes  A list of themes
     */
    Object.defineProperty(Root.prototype, "setThemes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (themes) {
            this._rootContainer.set("themes", themes);
            // otherwise new themes are not applied
            var tooltipContainer = this.tooltipContainer;
            if (tooltipContainer) {
                tooltipContainer._applyThemes();
            }
            // @todo review this
            var interfaceColors = this.interfaceColors;
            if (interfaceColors) {
                interfaceColors._applyThemes();
            }
        }
    });
    Object.defineProperty(Root.prototype, "_addTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this.tooltipContainer) {
                var tooltipContainer = this._rootContainer.children.push(_render_Container__WEBPACK_IMPORTED_MODULE_12__.Container["new"](this, { position: "absolute", isMeasured: false, width: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100, height: _util_Percent__WEBPACK_IMPORTED_MODULE_13__.p100, layer: 100 }));
                this.tooltipContainer = tooltipContainer;
                var tooltip = _render_Tooltip__WEBPACK_IMPORTED_MODULE_16__.Tooltip["new"](this, {});
                this.container.set("tooltip", tooltip);
                tooltip.hide(0);
                this._tooltip = tooltip;
            }
        }
    });
    /**
     * Accesibility
     */
    Object.defineProperty(Root.prototype, "_registerTabindexOrder", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            if (target.get("focusable")) {
                _util_Array__WEBPACK_IMPORTED_MODULE_21__.pushOne(this._tabindexes, target);
            }
            else {
                _util_Array__WEBPACK_IMPORTED_MODULE_21__.remove(this._tabindexes, target);
            }
            this._invalidateTabindexes();
        }
    });
    Object.defineProperty(Root.prototype, "_unregisterTabindexOrder", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            _util_Array__WEBPACK_IMPORTED_MODULE_21__.remove(this._tabindexes, target);
            this._invalidateTabindexes();
        }
    });
    Object.defineProperty(Root.prototype, "_invalidateTabindexes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._tabindexes.sort(function (a, b) {
                var aindex = a.get("tabindexOrder", 0);
                var bindex = b.get("tabindexOrder", 0);
                if (aindex == bindex) {
                    return 0;
                }
                else if (aindex > bindex) {
                    return 1;
                }
                else {
                    return -1;
                }
            });
            _util_Array__WEBPACK_IMPORTED_MODULE_21__.each(this._tabindexes, function (item, index) {
                if (!item.getPrivate("focusElement")) {
                    _this._makeFocusElement(index, item);
                }
                else {
                    _this._moveFocusElement(index, item);
                }
            });
            //this._makeFocusElement(0, this._tabindexes[0], false);
            // }
        }
    });
    Object.defineProperty(Root.prototype, "_updateCurrentFocus", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._focusedSprite) {
                this._decorateFocusElement(this._focusedSprite);
                this._positionFocusElement(this._focusedSprite);
            }
        }
    });
    Object.defineProperty(Root.prototype, "_decorateFocusElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target, focusElement) {
            // Decorate with proper accessibility attributes
            if (!focusElement) {
                focusElement = target.getPrivate("focusElement");
            }
            if (!focusElement) {
                return;
            }
            if (target.get("visible") && target.get("role") != "tooltip" && !target.isHidden()) {
                focusElement.setAttribute("tabindex", "" + this.tabindex);
            }
            else {
                focusElement.removeAttribute("tabindex");
            }
            var role = target.get("role");
            if (role) {
                focusElement.setAttribute("role", role);
            }
            else {
                focusElement.removeAttribute("role");
            }
            var ariaLabel = target.get("ariaLabel");
            if (ariaLabel) {
                var label = (0,_util_PopulateString__WEBPACK_IMPORTED_MODULE_25__.populateString)(target, ariaLabel);
                focusElement.setAttribute("aria-label", label);
            }
            else {
                focusElement.removeAttribute("aria-label");
            }
            var ariaLive = target.get("ariaLive");
            if (ariaLive) {
                focusElement.setAttribute("aria-live", ariaLive);
            }
            else {
                focusElement.removeAttribute("aria-live");
            }
            var ariaChecked = target.get("ariaChecked");
            if (ariaChecked != null) {
                focusElement.setAttribute("aria-checked", ariaChecked ? "true" : "false");
            }
            else {
                focusElement.removeAttribute("aria-checked");
            }
            if (target.get("ariaHidden")) {
                focusElement.setAttribute("aria-hidden", "hidden");
            }
            else {
                focusElement.removeAttribute("aria-hidden");
            }
            var ariaOrientation = target.get("ariaOrientation");
            if (ariaOrientation) {
                focusElement.setAttribute("aria-orientation", ariaOrientation);
            }
            else {
                focusElement.removeAttribute("aria-orientation");
            }
            var ariaValueNow = target.get("ariaValueNow");
            if (ariaValueNow) {
                focusElement.setAttribute("aria-valuenow", ariaValueNow);
            }
            else {
                focusElement.removeAttribute("aria-valuenow");
            }
            var ariaValueText = target.get("ariaValueText");
            if (ariaValueText) {
                focusElement.setAttribute("aria-valuetext", ariaValueText);
            }
            else {
                focusElement.removeAttribute("aria-valuetext");
            }
        }
    });
    Object.defineProperty(Root.prototype, "_makeFocusElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, target) {
            var _this = this;
            if (target.getPrivate("focusElement")) {
                return;
            }
            // Init
            var focusElement = document.createElement("div");
            if (target.get("role") != "tooltip") {
                focusElement.tabIndex = this.tabindex;
            }
            focusElement.style.position = "absolute";
            _util_Utils__WEBPACK_IMPORTED_MODULE_20__.setInteractive(focusElement, false);
            target.setPrivate("focusElement", focusElement);
            this._decorateFocusElement(target);
            focusElement.addEventListener("focus", function (ev) {
                _this._handleFocus(ev, index);
            });
            focusElement.addEventListener("blur", function (ev) {
                _this._handleBlur(ev, index);
            });
            this._moveFocusElement(index, target);
        }
    });
    Object.defineProperty(Root.prototype, "_removeFocusElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            // Init
            var container = this._focusElementContainer;
            var focusElement = target.getPrivate("focusElement");
            container.removeChild(focusElement);
        }
    });
    Object.defineProperty(Root.prototype, "_moveFocusElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, target) {
            // Get container
            var container = this._focusElementContainer;
            var focusElement = target.getPrivate("focusElement");
            if (focusElement === this._focusElementContainer.children[index]) {
                // Nothing to do
                return;
            }
            var next = this._focusElementContainer.children[index + 1];
            if (next) {
                container.insertBefore(focusElement, next);
            }
            else {
                container.append(focusElement);
            }
        }
    });
    Object.defineProperty(Root.prototype, "_positionFocusElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            var bounds = target.globalBounds();
            var width = bounds.right == bounds.left ? target.width() : bounds.right - bounds.left;
            var height = bounds.top == bounds.bottom ? target.height() : bounds.bottom - bounds.top;
            var focusElement = target.getPrivate("focusElement");
            focusElement.style.top = (bounds.top - 2) + "px";
            focusElement.style.left = (bounds.left - 2) + "px";
            focusElement.style.width = (width + 4) + "px";
            focusElement.style.height = (height + 4) + "px";
        }
    });
    Object.defineProperty(Root.prototype, "_handleFocus", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (ev, index) {
            // Get element
            var focused = this._tabindexes[index];
            // Size and position
            this._positionFocusElement(focused);
            //this._decorateFocusElement(focused);
            this._focusedSprite = focused;
            if (focused.events.isEnabled("focus")) {
                focused.events.dispatch("focus", {
                    type: "focus",
                    originalEvent: ev,
                    target: focused
                });
            }
        }
    });
    Object.defineProperty(Root.prototype, "_handleBlur", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (ev, _index) {
            var focused = this._focusedSprite;
            if (focused && focused.events.isEnabled("blur")) {
                focused.events.dispatch("blur", {
                    type: "blur",
                    originalEvent: ev,
                    target: focused
                });
            }
            this._focusedSprite = undefined;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Root.prototype, "updateTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            var text = target._getText();
            var tooltipElement = target.getPrivate("tooltipElement");
            if (target.get("role") == "tooltip" && text != "") {
                if (!tooltipElement) {
                    tooltipElement = this._makeTooltipElement(target);
                }
                if (tooltipElement.innerHTML != text) {
                    tooltipElement.innerHTML = text;
                }
            }
            else if (tooltipElement) {
                tooltipElement.remove();
                target.removePrivate("tooltipElement");
            }
        }
    });
    Object.defineProperty(Root.prototype, "_makeTooltipElement", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            var container = this._tooltipElementContainer;
            var tooltipElement = document.createElement("div");
            tooltipElement.style.position = "absolute";
            tooltipElement.style.opacity = "0.0000001";
            _util_Utils__WEBPACK_IMPORTED_MODULE_20__.setInteractive(tooltipElement, false);
            this._decorateFocusElement(target, tooltipElement);
            container.append(tooltipElement);
            target.setPrivate("tooltipElement", tooltipElement);
            return tooltipElement;
        }
    });
    Object.defineProperty(Root.prototype, "_invalidateAccessibility", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            this._focusElementDirty = true;
            var focusElement = target.getPrivate("focusElement");
            if (target.get("focusable")) {
                if (focusElement) {
                    this._decorateFocusElement(target);
                    this._positionFocusElement(target);
                }
                // else {
                // 	this._renderer._makeFocusElement(0, this);
                // }
            }
            else if (focusElement) {
                this._removeFocusElement(target);
            }
            //this.updateCurrentFocus();
        }
    });
    /**
     * Returns `true` if `target` is currently focused.
     *
     * @param   target  Target
     * @return          Focused?
     */
    Object.defineProperty(Root.prototype, "focused", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            return this._focusedSprite === target;
        }
    });
    /**
     * Converts document coordinates to coordinates withing root element.
     *
     * @param   point  Document point
     * @return         Root point
     */
    Object.defineProperty(Root.prototype, "documentPointToRoot", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            var bbox = this.dom.getBoundingClientRect();
            return {
                x: point.x - bbox.left,
                y: point.y - bbox.top
            };
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Root.prototype, "addDisposer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (disposer) {
            this._disposers.push(disposer);
            return disposer;
        }
    });
    /**
 * To all the clever heads out there. Yes, we did not make any attempts to
 * scramble this.
 *
 * This is a part of a tool meant for our users to manage their commercial
 * licenses for removal of amCharts branding from charts.
 *
 * The only legit way to do so is to purchase a commercial license for amCharts:
 * https://www.amcharts.com/online-store/
 *
 * Removing or altering this code, or disabling amCharts branding in any other
 * way is against the license and thus illegal.
 */
    Object.defineProperty(Root.prototype, "_hasLicense", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            for (var i = 0; i < _Registry__WEBPACK_IMPORTED_MODULE_11__.registry.licenses.length; i++) {
                if (_Registry__WEBPACK_IMPORTED_MODULE_11__.registry.licenses[i].match(/^AM5C.{5,}/i)) {
                    return true;
                }
            }
            return false;
        }
    });
    return Root;
}());

//# sourceMappingURL=Root.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/Theme.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/Theme.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Theme": () => (/* binding */ Theme)
/* harmony export */ });
/* harmony import */ var _util_Template__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/Template */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js");
/* harmony import */ var _util_Order__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/Order */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");



/**
 * A base class for an amCharts theme.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
 * @important
 */
var Theme = /** @class */ (function () {
    function Theme(root, isReal) {
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._root = root;
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   root      Root element
     * @param   settings  Settings
     * @param   template  Template
     * @return            Instantiated object
     */
    Object.defineProperty(Theme, "new", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root) {
            var x = (new this(root, true));
            x.setupDefaultRules();
            return x;
        }
    });
    Object.defineProperty(Theme.prototype, "setupDefaultRules", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    /**
     * Looks up the rules for a specific theme class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
     * @param   themeClass Theme class
     * @return             Array<IRule<A>>
     */
    Object.defineProperty(Theme.prototype, "_lookupRules", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (themeClass) {
            return this._rules[themeClass];
        }
    });
    /**
     * Creates a [[Template]] for specific theme class and tags.
     *
     * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any
     * type checks.
     *
     * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
     * @param   themeClass Theme class
     * @param   themeTags  Theme tags
     * @return             Template
     */
    Object.defineProperty(Theme.prototype, "ruleRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (themeClass, themeTags) {
            if (themeTags === void 0) { themeTags = []; }
            var rules = this._rules[themeClass];
            if (!rules) {
                rules = this._rules[themeClass] = [];
            }
            themeTags.sort(_util_Order__WEBPACK_IMPORTED_MODULE_0__.compare);
            var _a = _util_Array__WEBPACK_IMPORTED_MODULE_1__.getSortedIndex(rules, function (x) {
                var order = _util_Order__WEBPACK_IMPORTED_MODULE_0__.compare(x.tags.length, themeTags.length);
                if (order === 0) {
                    return _util_Order__WEBPACK_IMPORTED_MODULE_0__.compareArray(x.tags, themeTags, _util_Order__WEBPACK_IMPORTED_MODULE_0__.compare);
                }
                else {
                    return order;
                }
            }), index = _a.index, found = _a.found;
            if (found) {
                return rules[index].template;
            }
            else {
                var template = _util_Template__WEBPACK_IMPORTED_MODULE_2__.Template["new"]({});
                rules.splice(index, 0, {
                    tags: themeTags,
                    template: template,
                });
                return template;
            }
        }
    });
    /**
     * Creates a [[Template]] for specific theme class and tags.
     *
     * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
     * @param   themeClass Theme class
     * @param   themeTags  Theme tags
     * @return             Template
     */
    Object.defineProperty(Theme.prototype, "rule", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (themeClass, themeTags) {
            if (themeTags === void 0) { themeTags = []; }
            return this.ruleRaw(themeClass, themeTags);
        }
    });
    return Theme;
}());

//# sourceMappingURL=Theme.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Bullet.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Bullet.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bullet": () => (/* binding */ Bullet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_util_Entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");


/**
 * A universal placeholder for bullet elements.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
 */
var Bullet = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Bullet, _super);
    function Bullet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // used by MapPolygons where one data item can have multiple bullets of the same kind
        Object.defineProperty(_this, "_index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Target series object if it's a bullet for series.
         */
        Object.defineProperty(_this, "series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(Bullet.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // Applying themes because bullet will not have parent
            _super.prototype._afterNewApplyThemes.call(this);
        }
    });
    Object.defineProperty(Bullet.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("sprite")) {
                var sprite = this.get("sprite");
                if (sprite) {
                    sprite.setAll({ position: "absolute", role: "figure" });
                    this._disposers.push(sprite);
                }
            }
            if (this.isDirty("locationX") || this.isDirty("locationY")) {
                if (this.series) {
                    this.series._positionBullet(this);
                }
            }
        }
    });
    Object.defineProperty(Bullet, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Bullet"
    });
    Object.defineProperty(Bullet, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity.classNames.concat([Bullet.className])
    });
    return Bullet;
}(_core_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity));

//# sourceMappingURL=Bullet.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Button": () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _render_RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/RoundedRectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js");
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");




/**
 * Draws an interactive button.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info
 * @important
 */
var Button = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Button.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["button"]);
            _super.prototype._afterNew.call(this);
            if (!this._settings.background) {
                this.set("background", _render_RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__.RoundedRectangle["new"](this._root, {
                    themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["background"])
                }));
            }
        }
    });
    Object.defineProperty(Button.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._prepareChildren.call(this);
            if (this.isDirty("icon")) {
                var previous = this._prevSettings.icon;
                var icon = this.get("icon");
                if (icon !== previous) {
                    this._disposeProperty("icon");
                    if (previous) {
                        previous.dispose();
                    }
                    if (icon) {
                        this.children.push(icon);
                    }
                    this._prevSettings.icon = icon;
                }
            }
            if (this.isDirty("label")) {
                var previous = this._prevSettings.label;
                var label = this.get("label");
                if (label !== previous) {
                    this._disposeProperty("label");
                    if (previous) {
                        previous.dispose();
                    }
                    if (label) {
                        this.children.push(label);
                    }
                    this._prevSettings.label = label;
                }
            }
        }
    });
    Object.defineProperty(Button, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Button"
    });
    Object.defineProperty(Button, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Container__WEBPACK_IMPORTED_MODULE_3__.Container.classNames.concat([Button.className])
    });
    return Button;
}(_Container__WEBPACK_IMPORTED_MODULE_3__.Container));

//# sourceMappingURL=Button.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Chart": () => (/* binding */ Chart)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");



/**
 * A base class for all charts.
 */
var Chart = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Chart, _super);
    function Chart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A [[Container]] chart places its elements in.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "chartContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, interactiveChildren: false }))
        });
        /**
         * A [[Container]] chart places its bullets in.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "bulletsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { interactiveChildren: false, isMeasured: false, position: "absolute", width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100 })
        });
        return _this;
    }
    Object.defineProperty(Chart, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Chart"
    });
    Object.defineProperty(Chart, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container.classNames.concat([Chart.className])
    });
    return Chart;
}(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container));

//# sourceMappingURL=Chart.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Circle": () => (/* binding */ Circle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");


/**
 * Draws a circle.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var Circle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Circle, _super);
    function Circle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Circle.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("radius")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(Circle.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this._clear) {
                this._display.drawCircle(0, 0, this.get("radius", 10));
            }
        }
    });
    Object.defineProperty(Circle, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Circle"
    });
    Object.defineProperty(Circle, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics.classNames.concat([Circle.className])
    });
    return Circle;
}(_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics));

//# sourceMappingURL=Circle.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataItem": () => (/* binding */ DataItem),
/* harmony export */   "Component": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _util_Data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Data */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Data.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");






/**
 * A base element that holds data bit (data item) for any [[Component]].
 */
var DataItem = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DataItem, _super);
    function DataItem(component, dataContext, settings) {
        var _this = _super.call(this, settings) || this;
        /**
         * A data item's owener [[Component]].
         */
        Object.defineProperty(_this, "component", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A reference to actual item in source data this item is based on.
         */
        Object.defineProperty(_this, "dataContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @todo requires description
         */
        Object.defineProperty(_this, "bullets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A set of "open" values.
         */
        Object.defineProperty(_this, "open", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A set of "close" values.
         */
        Object.defineProperty(_this, "close", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this.dataContext = dataContext;
        _this.component = component;
        _this._settings.visible = true;
        _this._checkDirty();
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(DataItem.prototype, "markDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.component._markDirtyValues(this);
        }
    });
    Object.defineProperty(DataItem.prototype, "_startAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.component._root._addAnimation(this);
        }
    });
    Object.defineProperty(DataItem.prototype, "_animationTime", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.component._root.animationTime;
        }
    });
    Object.defineProperty(DataItem.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.component) {
                this.component.disposeDataItem(this);
            }
            _super.prototype._dispose.call(this);
        }
    });
    /**
     * Shows a data item that's currently hidden.
     */
    Object.defineProperty(DataItem.prototype, "show", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            this.setRaw("visible", true);
            if (this.component) {
                this.component.showDataItem(this, duration);
            }
        }
    });
    /**
     * Hides a data item that's currently visible.
     */
    Object.defineProperty(DataItem.prototype, "hide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            this.setRaw("visible", false);
            if (this.component) {
                this.component.hideDataItem(this, duration);
            }
        }
    });
    Object.defineProperty(DataItem.prototype, "isHidden", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return !this.get("visible");
        }
    });
    return DataItem;
}(_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Settings));

/**
 * A base class for elements that make use of data.
 */
var Component = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Component, _super);
    function Component() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Data__WEBPACK_IMPORTED_MODULE_2__.ListData()
        });
        Object.defineProperty(_this, "_dataItems", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "valueFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "fields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["id"]
        });
        Object.defineProperty(_this, "_valueFields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_valueFieldsF", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_fields", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_fieldsF", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_valuesDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_dataChanged", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_dataGrouped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Indicates if the component has already been initialized.
         */
        Object.defineProperty(_this, "inited", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(Component.prototype, "data", {
        /**
         * @return  Data
         */
        get: function () {
            return this._data;
        },
        /**
         * Component's data.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
         */
        set: function (data) {
            data.incrementRef();
            this._data.decrementRef();
            this._data = data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            this._data.decrementRef();
        }
    });
    Object.defineProperty(Component.prototype, "_onDataClear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Component.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this._data.incrementRef();
            this._updateFields();
            this._disposers.push(this.data.events.onAll(function (change) {
                _this._markDirtyValues();
                _this._markDirtyGroup();
                _this._dataChanged = true;
                if (change.type === "clear") {
                    _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(_this._dataItems, function (dataItem) {
                        dataItem.dispose();
                    });
                    _this._dataItems.length = 0;
                    _this._onDataClear();
                }
                else if (change.type === "push") {
                    var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                    _this._dataItems.push(dataItem);
                    _this.processDataItem(dataItem);
                }
                else if (change.type === "setIndex") {
                    var dataItem_1 = _this._dataItems[change.index];
                    var properties_1 = _this._makeDataItem(change.newValue);
                    _util_Object__WEBPACK_IMPORTED_MODULE_4__.keys(properties_1).forEach(function (key) {
                        dataItem_1.animate({
                            key: key,
                            to: properties_1[key],
                            duration: _this.get("interpolationDuration", 0),
                            easing: _this.get("interpolationEasing"),
                        });
                    });
                    dataItem_1.dataContext = change.newValue;
                }
                else if (change.type === "insertIndex") {
                    var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                    _this._dataItems.splice(change.index, 0, dataItem);
                    _this.processDataItem(dataItem);
                }
                else if (change.type === "removeIndex") {
                    var dataItem = _this._dataItems[change.index];
                    dataItem.dispose();
                    _this._dataItems.splice(change.index, 1);
                    _this._markDirtyValues();
                }
                else {
                    throw new Error("Unknown IStreamEvent type");
                }
                _this._afterDataChange();
            }));
        }
    });
    Object.defineProperty(Component.prototype, "_updateFields", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.valueFields) {
                this._valueFields = [];
                this._valueFieldsF = {};
                _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.valueFields, function (key) {
                    var field = _this.get((key + "Field"));
                    if (field) {
                        _this._valueFields.push(key);
                        _this._valueFieldsF[key] = { fieldKey: key + "Field", workingKey: key + "Working" };
                    }
                });
            }
            if (this.fields) {
                this._fields = [];
                this._fieldsF = {};
                _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this.fields, function (key) {
                    var field = _this.get((key + "Field"));
                    if (field) {
                        _this._fields.push(key);
                        _this._fieldsF[key] = key + "Field";
                    }
                });
            }
        }
    });
    Object.defineProperty(Component.prototype, "dataItems", {
        /**
         * A list of component's data items.
         *
         * @return  Data items
         */
        get: function () {
            return this._dataItems;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "processDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) { }
    });
    Object.defineProperty(Component.prototype, "_makeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data) {
            var _this = this;
            //const output: this["_dataItemSettings"] = {};
            var output = {}; // temporary to solve error
            if (this._valueFields) {
                _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this._valueFields, function (key) {
                    var field = _this.get((_this._valueFieldsF[key].fieldKey));
                    output[key] = data[field];
                    output[_this._valueFieldsF[key].workingKey] = output[key];
                });
            }
            if (this._fields) {
                _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this._fields, function (key) {
                    var field = _this.get((_this._fieldsF[key]));
                    output[key] = data[field];
                });
            }
            return output;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Component.prototype, "makeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data) {
            var dataItem = new DataItem(this, undefined, data);
            this.processDataItem(dataItem);
            return dataItem;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Component.prototype, "pushDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data) {
            var dataItem = this.makeDataItem(data);
            this.dataItems.push(dataItem);
            return dataItem;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Component.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) { }
    });
    /**
     * Shows component's data item.
     *
     * @param   dataItem   Data item
     * @param   _duration  Animation duration in milliseconds
     * @return             Promise
     */
    Object.defineProperty(Component.prototype, "showDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, _duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    dataItem.set("visible", true);
                    return [2 /*return*/];
                });
            });
        }
    });
    /**
     * Hides component's data item.
     *
     * @param   dataItem   Data item
     * @param   _duration  Animation duration in milliseconds
     * @return             Promise
     */
    Object.defineProperty(Component.prototype, "hideDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, _duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    dataItem.set("visible", false);
                    return [2 /*return*/];
                });
            });
        }
    });
    Object.defineProperty(Component.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._valuesDirty = false;
        }
    });
    Object.defineProperty(Component.prototype, "_afterDataChange", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Component.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this._dataChanged) {
                var type = "datavalidated";
                if (this.events.isEnabled(type)) {
                    this.events.dispatch(type, { type: type, target: this });
                    this._dataChanged = false;
                }
            }
            this.inited = true;
        }
    });
    Object.defineProperty(Component.prototype, "_markDirtyValues", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) {
            this.markDirty();
            this._valuesDirty = true;
        }
    });
    Object.defineProperty(Component.prototype, "_markDirtyGroup", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._dataGrouped = false;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Component.prototype, "markDirtySize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._sizeDirty = true;
            this.markDirty();
        }
    });
    Object.defineProperty(Component, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Component"
    });
    Object.defineProperty(Component, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Container__WEBPACK_IMPORTED_MODULE_5__.Container.classNames.concat([Component.className])
    });
    return Component;
}(_Container__WEBPACK_IMPORTED_MODULE_5__.Container));

//# sourceMappingURL=Component.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Container": () => (/* binding */ Container)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Children__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Children */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Children.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Sprite */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js");
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Rectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js");
/* harmony import */ var _HorizontalLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./HorizontalLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js");
/* harmony import */ var _VerticalLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VerticalLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js");
/* harmony import */ var _GridLayout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GridLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");










/**
 * A basic element that can have child elements, maintain their layout, and
 * have a background.
 *
 * It can have any [[Sprite]] element as a child, from very basic shapes, to
 * full-fledged charts.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
 * @important
 */
var Container = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Container, _super);
    function Container() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._root._renderer.makeContainer()
        });
        Object.defineProperty(_this, "_childrenDisplay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._root._renderer.makeContainer()
        });
        /**
         * List of Container's child elements.
         */
        Object.defineProperty(_this, "children", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Children__WEBPACK_IMPORTED_MODULE_1__.Children(_this)
        });
        Object.defineProperty(_this, "_percentageSizeChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_percentagePositionChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_prevWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_prevHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_contentWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_contentHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_contentMask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(Container.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this._display.addChild(this._childrenDisplay);
        }
    });
    Object.defineProperty(Container.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.allChildren(), function (child) {
                child.dispose();
            });
            var mask = this.get("mask");
            if (mask) {
                mask.dispose();
            }
            var background = this.get("background");
            if (background) {
                background.dispose();
            }
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(Container.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this.isDirty("interactiveChildren")) {
                this._display.interactiveChildren = this.get("interactiveChildren", false);
            }
            if (this.isDirty("layout")) {
                this.markDirtyBounds();
                if (this._prevSettings.layout) {
                    this.children.each(function (child) {
                        child.removePrivate("x");
                        child.removePrivate("y");
                    });
                }
            }
            if (this.isDirty("paddingTop") || this.isDirty("paddingBottom") || this.isDirty("paddingLeft") || this.isDirty("paddingRight")) {
                this.children.each(function (child) {
                    child.markDirtyPosition();
                });
            }
            if (this.isDirty("maskContent")) {
                var childrenDisplay = this._childrenDisplay;
                var contentMask = this._contentMask;
                if (this.get("maskContent")) {
                    if (!contentMask) {
                        contentMask = _Rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle["new"](this._root, {
                            width: this.width(),
                            height: this.height()
                        });
                        this._contentMask = contentMask;
                        childrenDisplay.addChildAt(contentMask._display, 0);
                        childrenDisplay.mask = contentMask._display;
                    }
                }
                else {
                    if (contentMask) {
                        childrenDisplay.removeChild(contentMask._display);
                        childrenDisplay.mask = null;
                        contentMask.dispose();
                    }
                }
            }
        }
    });
    Object.defineProperty(Container.prototype, "_updateSize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateSize.call(this);
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._percentageSizeChildren, function (child) {
                child._updateSize();
            });
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._percentagePositionChildren, function (child) {
                child.markDirtyPosition();
                child._updateSize();
            });
            this.updateBackground();
        }
    });
    Object.defineProperty(Container.prototype, "updateBackground", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var background = this.get("background");
            var bounds = this._localBounds;
            if (bounds && !this.isHidden()) {
                var x = bounds.left;
                var y = bounds.top;
                var w = bounds.right - x;
                var h = bounds.bottom - y;
                var width = this.width();
                var height = this.height();
                if (background) {
                    background.setAll({ width: w, height: h, x: x, y: y });
                    if (this._display.interactive) {
                        background._display.interactive = true;
                    }
                }
                var contentMask = this._contentMask;
                if (contentMask) {
                    contentMask.setAll({ width: width, height: height });
                }
                var verticalScrollbar = this.get("verticalScrollbar");
                if (verticalScrollbar) {
                    verticalScrollbar.set("height", height);
                    verticalScrollbar.set("x", width - verticalScrollbar.width() - verticalScrollbar.get("marginRight", 0));
                    verticalScrollbar.set("end", verticalScrollbar.get("start", 0) + height / this._contentHeight);
                    var bg = verticalScrollbar.get("background");
                    if (bg) {
                        bg.setAll({ width: verticalScrollbar.width(), height: height });
                    }
                }
            }
        }
    });
    Object.defineProperty(Container.prototype, "_applyThemes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (_super.prototype._applyThemes.call(this)) {
                this.eachChildren(function (child) {
                    child._applyThemes();
                });
                return true;
            }
            else {
                return false;
            }
        }
    });
    Object.defineProperty(Container.prototype, "_applyState", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            _super.prototype._applyState.call(this, name);
            if (this.get("setStateOnChildren")) {
                this.eachChildren(function (child) {
                    child.states.apply(name);
                });
            }
        }
    });
    Object.defineProperty(Container.prototype, "_applyStateAnimated", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, duration) {
            _super.prototype._applyStateAnimated.call(this, name, duration);
            if (this.get("setStateOnChildren")) {
                this.eachChildren(function (child) {
                    child.states.applyAnimate(name, duration);
                });
            }
        }
    });
    /**
     * Returns container's inner width (width without padding) in pixels.
     *
     * @return Inner width (px)
     */
    Object.defineProperty(Container.prototype, "innerWidth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.width() - this.get("paddingRight", 0) - this.get("paddingLeft", 0);
        }
    });
    /**
     * Returns container's inner height (height without padding) in pixels.
     *
     * @return Inner height (px)
     */
    Object.defineProperty(Container.prototype, "innerHeight", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.height() - this.get("paddingTop", 0) - this.get("paddingBottom", 0);
        }
    });
    Object.defineProperty(Container.prototype, "_getBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var width = this.get("width");
            var height = this.get("height");
            var pWidth = this.getPrivate("width");
            var pHeight = this.getPrivate("height");
            var bounds = {
                left: 0,
                top: 0,
                right: this.width(),
                bottom: this.height(),
            };
            var layout = this.get("layout");
            var horizontal = false;
            var vertical = false;
            if (layout instanceof _HorizontalLayout__WEBPACK_IMPORTED_MODULE_4__.HorizontalLayout || layout instanceof _GridLayout__WEBPACK_IMPORTED_MODULE_5__.GridLayout) {
                horizontal = true;
            }
            if (layout instanceof _VerticalLayout__WEBPACK_IMPORTED_MODULE_6__.VerticalLayout) {
                vertical = true;
            }
            if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get("verticalScrollbar")) {
                // void
            }
            else {
                var m = Number.MAX_VALUE;
                var l_1 = m;
                var r_1 = -m;
                var t_1 = m;
                var b_1 = -m;
                var paddingLeft = this.get("paddingLeft", 0);
                var paddingTop = this.get("paddingTop", 0);
                var paddingRight = this.get("paddingRight", 0);
                var paddingBottom = this.get("paddingBottom", 0);
                this.children.each(function (child) {
                    if (child.get("position") != "absolute" && child.get("isMeasured")) {
                        var childBounds = child.adjustedLocalBounds();
                        var childX = child.x();
                        var childY = child.y();
                        var cl = childX + childBounds.left;
                        var cr = childX + childBounds.right;
                        var ct = childY + childBounds.top;
                        var cb = childY + childBounds.bottom;
                        if (horizontal) {
                            cl -= child.get("marginLeft", 0);
                            cr += child.get("marginRight", 0);
                        }
                        if (vertical) {
                            ct -= child.get("marginTop", 0);
                            cb += child.get("marginBottom", 0);
                        }
                        if (cl < l_1) {
                            l_1 = cl;
                        }
                        if (cr > r_1) {
                            r_1 = cr;
                        }
                        if (ct < t_1) {
                            t_1 = ct;
                        }
                        if (cb > b_1) {
                            b_1 = cb;
                        }
                    }
                });
                if (l_1 == m) {
                    l_1 = 0;
                }
                if (r_1 == -m) {
                    r_1 = 0;
                }
                if (t_1 == m) {
                    t_1 = 0;
                }
                if (b_1 == -m) {
                    b_1 = 0;
                }
                bounds.left = l_1 - paddingLeft;
                bounds.top = t_1 - paddingTop;
                bounds.right = r_1 + paddingRight;
                bounds.bottom = b_1 + paddingBottom;
            }
            this._contentWidth = bounds.right - bounds.left;
            this._contentHeight = bounds.bottom - bounds.top;
            if (_util_Type__WEBPACK_IMPORTED_MODULE_7__.isNumber(width)) {
                bounds.left = 0;
                bounds.right = width;
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_7__.isNumber(pWidth)) {
                bounds.left = 0;
                bounds.right = pWidth;
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_7__.isNumber(height)) {
                bounds.top = 0;
                bounds.bottom = height;
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_7__.isNumber(pHeight)) {
                bounds.top = 0;
                bounds.bottom = pHeight;
            }
            this._localBounds = bounds;
        }
    });
    Object.defineProperty(Container.prototype, "_updateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var layout = this.get("layout");
            if (layout) {
                layout.updateContainer(this);
            }
            _super.prototype._updateBounds.call(this);
            this.updateBackground();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Container.prototype, "markDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.markDirty.call(this);
            this._root._addDirtyParent(this);
        }
    });
    Object.defineProperty(Container.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var innerWidth = this.innerWidth();
            var innerHeight = this.innerHeight();
            if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {
                var layout = this.get("layout");
                var horizontal_1 = false;
                var vertical_1 = false;
                if (layout) {
                    if (layout instanceof _HorizontalLayout__WEBPACK_IMPORTED_MODULE_4__.HorizontalLayout || layout instanceof _GridLayout__WEBPACK_IMPORTED_MODULE_5__.GridLayout) {
                        horizontal_1 = true;
                    }
                    if (layout instanceof _VerticalLayout__WEBPACK_IMPORTED_MODULE_6__.VerticalLayout) {
                        vertical_1 = true;
                    }
                }
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._percentageSizeChildren, function (child) {
                    var width = child.get("width");
                    if (!horizontal_1) {
                        if (width instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_8__.Percent) {
                            child.setPrivate("width", width.value * innerWidth);
                        }
                    }
                    if (!vertical_1) {
                        var height = child.get("height");
                        if (height instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_8__.Percent) {
                            child.setPrivate("height", height.value * innerHeight);
                        }
                    }
                });
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._percentagePositionChildren, function (child) {
                    child.markDirtyPosition();
                    child.markDirtyBounds();
                });
                this._prevWidth = innerWidth;
                this._prevHeight = innerHeight;
                this._sizeDirty = true;
                this.updateBackground();
            }
        }
    });
    Object.defineProperty(Container.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.isDirty("verticalScrollbar")) {
                var verticalScrollbar_1 = this.get("verticalScrollbar");
                if (verticalScrollbar_1) {
                    verticalScrollbar_1._setParent(this);
                    verticalScrollbar_1.children.removeValue(verticalScrollbar_1.startGrip);
                    verticalScrollbar_1.children.removeValue(verticalScrollbar_1.endGrip);
                    this.set("maskContent", true);
                    this.set("paddingRight", verticalScrollbar_1.width() + verticalScrollbar_1.get("marginRight", 0) + verticalScrollbar_1.get("marginLeft", 0));
                    var background = this.get("background");
                    if (!background) {
                        background = this.set("background", _Rectangle__WEBPACK_IMPORTED_MODULE_3__.Rectangle["new"](this._root, {
                            themeTags: ["background"],
                            fillOpacity: 0,
                            fill: this._root.interfaceColors.get("alternativeBackground")
                        }));
                    }
                    this.set("wheelable", true);
                    this._disposers.push(this.events.on("wheel", function (event) {
                        var wheelEvent = event.originalEvent;
                        var shiftY = wheelEvent.deltaY / 5000;
                        var start = verticalScrollbar_1.get("start", 0);
                        var end = verticalScrollbar_1.get("end", 1);
                        if (start + shiftY > 0 && end + shiftY < 1) {
                            verticalScrollbar_1.set("start", start + shiftY);
                            verticalScrollbar_1.set("end", end + shiftY);
                        }
                    }));
                    this._disposers.push(verticalScrollbar_1.events.on("rangechanged", function () {
                        var h = _this._contentHeight;
                        var childrenDisplay = _this._childrenDisplay;
                        var contentMask = _this._contentMask;
                        childrenDisplay.y = -verticalScrollbar_1.get("start") * h;
                        childrenDisplay.markDirtyLayer();
                        if (contentMask) {
                            contentMask._display.y = -childrenDisplay.y;
                            childrenDisplay.mask = contentMask._display;
                        }
                    }));
                    this._display.addChild(verticalScrollbar_1._display);
                }
            }
            if (this.isDirty("background")) {
                // TODO maybe this should dispose ?
                var previous = this._prevSettings["background"];
                if (previous) {
                    this._display.removeChild(previous._display);
                }
                var background = this.get("background");
                if (background instanceof _Sprite__WEBPACK_IMPORTED_MODULE_9__.Sprite) {
                    background.set("isMeasured", false);
                    background._setParent(this);
                    this._display.addChildAt(background._display, 0);
                }
            }
            if (this.isDirty("mask")) {
                var mask = this.get("mask");
                var previous = this._prevSettings["mask"];
                if (previous) {
                    this._display.removeChild(previous._display);
                    if (previous != mask) {
                        previous.dispose();
                    }
                }
                if (mask) {
                    mask._setParent(this);
                    this._display.addChildAt(mask._display, 0);
                    this._childrenDisplay.mask = mask._display;
                }
            }
        }
    });
    Object.defineProperty(Container.prototype, "_processTemplateField", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._processTemplateField.call(this);
            this.children.each(function (child) {
                child._processTemplateField();
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Container.prototype, "walkChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            this.children.each(function (child) {
                if (child instanceof Container) {
                    child.walkChildren(f);
                }
                f(child);
            });
        }
    });
    Object.defineProperty(Container.prototype, "eachChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            var background = this.get("background");
            if (background) {
                f(background);
            }
            var verticalScrollbar = this.get("verticalScrollbar");
            if (verticalScrollbar) {
                f(verticalScrollbar);
            }
            var mask = this.get("mask");
            if (mask) {
                f(mask);
            }
            this.children.values.forEach(function (child) {
                f(child);
            });
        }
    });
    Object.defineProperty(Container.prototype, "allChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var output = [];
            this.eachChildren(function (x) {
                output.push(x);
            });
            return output;
        }
    });
    Object.defineProperty(Container, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Container"
    });
    Object.defineProperty(Container, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Sprite__WEBPACK_IMPORTED_MODULE_9__.Sprite.classNames.concat([Container.className])
    });
    return Container;
}(_Sprite__WEBPACK_IMPORTED_MODULE_9__.Sprite));

//# sourceMappingURL=Container.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "visualSettings": () => (/* binding */ visualSettings),
/* harmony export */   "Graphics": () => (/* binding */ Graphics)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sprite */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js");
/* harmony import */ var _backend_Renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend/Renderer */ "./node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");





var visualSettings = ["fill", "fillOpacity", "stroke", "strokeWidth", "strokeOpacity", "fillPattern", "strokePattern", "fillGradient", "strokeGradient", "strokeDasharray", "strokeDashoffset"];
/**
 * Base class used for drawing shapes.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var Graphics = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Graphics, _super);
    function Graphics() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._root._renderer.makeGraphics()
        });
        Object.defineProperty(_this, "_clear", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(Graphics.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("draw") || this.isDirty("svgPath")) {
                this.markDirtyBounds();
            }
            if (this.isDirty("fill") || this.isDirty("stroke") || this.isDirty("fillGradient") || this.isDirty("strokeGradient") || this.isDirty("fillPattern") || this.isDirty("strokePattern") || this.isDirty("fillOpacity") || this.isDirty("strokeOpacity") || this.isDirty("strokeWidth") || this.isDirty("draw") || this.isDirty("blendMode") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("svgPath") || this.isDirty("shadowColor") || this.isDirty("shadowBlur") || this.isDirty("shadowOffsetX") || this.isDirty("shadowOffsetY")) {
                this._clear = true;
            }
            if (this.isDirty("fillGradient")) {
                var gradient = this.get("fillGradient");
                if (gradient) {
                    this._display.isMeasured = true;
                    var gradientTarget = gradient.get("target");
                    if (gradientTarget) {
                        this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                            _this._markDirtyKey("fill");
                        }));
                        this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                            _this._markDirtyKey("fill");
                        }));
                    }
                }
            }
            if (this.isDirty("strokeGradient")) {
                var gradient = this.get("strokeGradient");
                if (gradient) {
                    this._display.isMeasured = true;
                    var gradientTarget = gradient.get("target");
                    if (gradientTarget) {
                        this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                            _this._markDirtyKey("stroke");
                        }));
                        this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                            _this._markDirtyKey("stroke");
                        }));
                    }
                }
            }
        }
    });
    Object.defineProperty(Graphics.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this._clear) {
                this.markDirtyLayer();
                this._display.clear();
                var strokeDasharray = this.get("strokeDasharray");
                if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(strokeDasharray)) {
                    if (strokeDasharray < 0.5) {
                        strokeDasharray = [0];
                    }
                    else {
                        strokeDasharray = [strokeDasharray];
                    }
                }
                this._display.setLineDash(strokeDasharray);
                var strokeDashoffset = this.get("strokeDashoffset");
                if (strokeDashoffset) {
                    this._display.setLineDashOffset(strokeDashoffset);
                }
                var blendMode = this.get("blendMode", _backend_Renderer__WEBPACK_IMPORTED_MODULE_2__.BlendMode.NORMAL);
                this._display.blendMode = blendMode;
                var draw = this.get("draw");
                if (draw) {
                    draw(this._display, this);
                }
                var svgPath = this.get("svgPath");
                if (svgPath != null) {
                    this._display.svgPath(svgPath);
                }
            }
        }
    });
    Object.defineProperty(Graphics.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this._clear) {
                var fill_1 = this.get("fill");
                var fillGradient = this.get("fillGradient");
                var fillPattern = this.get("fillPattern");
                var fillOpacity_1 = this.get("fillOpacity");
                var stroke_1 = this.get("stroke");
                var strokeGradient = this.get("strokeGradient");
                var strokePattern = this.get("strokePattern");
                var shadowColor = this.get("shadowColor");
                var shadowBlur = this.get("shadowBlur");
                var shadowOffsetX = this.get("shadowOffsetX");
                var shadowOffsetY = this.get("shadowOffsetY");
                var shadowOpacity = this.get("shadowOpacity");
                //const bounds = this._display.getLocalBounds();
                if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {
                    this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);
                }
                if (fillPattern) {
                    var changed = false;
                    if (fill_1 && (!fillPattern.get("fill") || fillPattern.get("fillInherited"))) {
                        fillPattern.set("fill", fill_1);
                        fillPattern.set("fillInherited", true);
                        changed = true;
                    }
                    if (stroke_1 && (!fillPattern.get("color") || fillPattern.get("colorInherited"))) {
                        fillPattern.set("color", stroke_1);
                        fillPattern.set("colorInherited", true);
                        changed = true;
                    }
                    if (changed) {
                        // @todo: is this OK?
                        fillPattern._changed();
                    }
                    var pattern = fillPattern.pattern;
                    if (pattern) {
                        this._display.beginFill(pattern, fillOpacity_1);
                        this._display.endFill();
                    }
                }
                else if (fillGradient) {
                    if (fill_1) {
                        var stops = fillGradient.get("stops", []);
                        if (stops.length) {
                            _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(stops, function (stop) {
                                if ((!stop.color || stop.colorInherited) && fill_1) {
                                    stop.color = fill_1;
                                    stop.colorInherited = true;
                                }
                                if (stop.opacity == null || stop.opacityInherited) {
                                    stop.opacity = fillOpacity_1;
                                    stop.opacityInherited = true;
                                }
                            });
                        }
                    }
                    var gradient = fillGradient.getFill(this);
                    if (gradient) {
                        this._display.beginFill(gradient, fillOpacity_1);
                        this._display.endFill();
                    }
                }
                else if (fill_1) {
                    this._display.beginFill(fill_1, fillOpacity_1);
                    this._display.endFill();
                }
                if (stroke_1 || strokeGradient || strokePattern) {
                    var strokeOpacity_1 = this.get("strokeOpacity");
                    var strokeWidth = this.get("strokeWidth", 1);
                    if (strokePattern) {
                        var changed = false;
                        if (stroke_1 && (!strokePattern.get("color") || strokePattern.get("colorInherited"))) {
                            strokePattern.set("color", stroke_1);
                            strokePattern.set("colorInherited", true);
                            changed = true;
                        }
                        if (changed) {
                            // @todo: is this OK?
                            strokePattern._changed();
                        }
                        var pattern = strokePattern.pattern;
                        if (pattern) {
                            this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1);
                            this._display.endStroke();
                        }
                    }
                    else if (strokeGradient) {
                        var stops = strokeGradient.get("stops", []);
                        if (stops.length) {
                            _util_Array__WEBPACK_IMPORTED_MODULE_3__.each(stops, function (stop) {
                                if ((!stop.color || stop.colorInherited) && stroke_1) {
                                    stop.color = stroke_1;
                                    stop.colorInherited = true;
                                }
                                if (stop.opacity == null || stop.opacityInherited) {
                                    stop.opacity = strokeOpacity_1;
                                    stop.opacityInherited = true;
                                }
                            });
                        }
                        var gradient = strokeGradient.getFill(this);
                        if (gradient) {
                            this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1);
                            this._display.endStroke();
                        }
                    }
                    else if (stroke_1) {
                        this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1);
                        this._display.endStroke();
                    }
                }
            }
            this._clear = false;
        }
    });
    Object.defineProperty(Graphics, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Graphics"
    });
    Object.defineProperty(Graphics, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Sprite__WEBPACK_IMPORTED_MODULE_4__.Sprite.classNames.concat([Graphics.className])
    });
    return Graphics;
}(_Sprite__WEBPACK_IMPORTED_MODULE_4__.Sprite));

//# sourceMappingURL=Graphics.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GridLayout": () => (/* binding */ GridLayout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Layout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");




/**
 * A grid children layout for [[Container]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
 */
var GridLayout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(GridLayout, _super);
    function GridLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(GridLayout.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._setRawDefault("maxColumns", Number.MAX_VALUE);
            _super.prototype._afterNew.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(GridLayout.prototype, "updateContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (container) {
            var paddingLeft = container.get("paddingLeft", 0);
            var paddingRight = container.get("paddingRight", 0);
            var paddingTop = container.get("paddingTop", 0);
            var availableWidth = container.maxWidth() - paddingLeft - paddingRight;
            var minCellWidth = availableWidth;
            var maxCellWidth = 1;
            container.children.each(function (child) {
                if (child.get("position") != "absolute") {
                    var childWidth = child.width();
                    if (childWidth < minCellWidth) {
                        minCellWidth = childWidth;
                    }
                    if (childWidth > maxCellWidth) {
                        maxCellWidth = childWidth;
                    }
                }
            });
            minCellWidth = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(minCellWidth, 1, availableWidth);
            maxCellWidth = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(maxCellWidth, 1, availableWidth);
            var columnCount = 1;
            if (this.get("fixedWidthGrid")) {
                columnCount = availableWidth / maxCellWidth;
            }
            else {
                columnCount = availableWidth / minCellWidth;
            }
            columnCount = Math.max(1, Math.floor(columnCount));
            columnCount = Math.min(this.get("maxColumns", Number.MAX_VALUE), columnCount);
            var columnWidths = this.getColumnWidths(container.children, columnCount, maxCellWidth, availableWidth);
            var prevY = paddingTop;
            var column = 0;
            var maxColumnHeight = 0;
            columnCount = columnWidths.length;
            var prevX = paddingLeft;
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var marginTop = child.get("marginTop", 0);
                    var marginBottom = child.get("marginBottom", 0);
                    var bounds = child.adjustedLocalBounds();
                    var marginLeft = child.get("marginLeft", 0);
                    var marginRight = child.get("marginRight", 0);
                    var x = prevX + marginLeft - bounds.left;
                    var y = prevY + marginTop - bounds.top;
                    child.setPrivate("x", x);
                    child.setPrivate("y", y);
                    prevX += columnWidths[column] + marginRight;
                    maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);
                    column++;
                    if (column >= columnCount) {
                        column = 0;
                        prevX = paddingLeft;
                        prevY += maxColumnHeight;
                    }
                }
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(GridLayout.prototype, "getColumnWidths", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (children, columnCount, maxCellWidth, availableWidth) {
            var _this = this;
            var totalWidth = 0;
            var columnWidths = [];
            var column = 0;
            children.each(function (child) {
                var bounds = child.adjustedLocalBounds();
                if (child.get("position") != "absolute") {
                    if (_this.get("fixedWidthGrid")) {
                        columnWidths[column] = maxCellWidth;
                    }
                    else {
                        columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get("marginLeft", 0) + child.get("marginRight", 0));
                    }
                    if (column < children.length - 1) {
                        column++;
                        if (column == columnCount) {
                            column = 0;
                        }
                    }
                }
            });
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(columnWidths, function (w) {
                totalWidth += w;
            });
            if (totalWidth > availableWidth) {
                if (columnCount > 2) {
                    columnCount -= 1;
                    return this.getColumnWidths(children, columnCount, maxCellWidth, availableWidth);
                }
                else {
                    return [availableWidth];
                }
            }
            return columnWidths;
        }
    });
    Object.defineProperty(GridLayout, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "GridLayout"
    });
    Object.defineProperty(GridLayout, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Layout__WEBPACK_IMPORTED_MODULE_3__.Layout.classNames.concat([GridLayout.className])
    });
    return GridLayout;
}(_Layout__WEBPACK_IMPORTED_MODULE_3__.Layout));

//# sourceMappingURL=GridLayout.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HorizontalLayout": () => (/* binding */ HorizontalLayout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Layout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");




/**
 * A horizontal children layout for [[Container]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
 */
var HorizontalLayout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HorizontalLayout, _super);
    function HorizontalLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(HorizontalLayout.prototype, "updateContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (container) {
            var paddingLeft = container.get("paddingLeft", 0);
            var availableWidth = container.innerWidth();
            var totalPercent = 0;
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var childWidth = child.get("width");
                    if (childWidth instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_1__.Percent) {
                        totalPercent += childWidth.value;
                    }
                    else {
                        if (!_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(childWidth)) {
                            childWidth = child.width();
                        }
                        availableWidth -= childWidth + child.get("marginLeft", 0) + child.get("marginRight", 0);
                    }
                }
            });
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var childWidth = child.get("width");
                    if (childWidth instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_1__.Percent) {
                        var privateWidth = availableWidth * childWidth.value / totalPercent - child.get("marginLeft", 0) - child.get("marginRight", 0);
                        child.setPrivate("width", privateWidth);
                    }
                }
            });
            var prevX = paddingLeft;
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var bounds = child.adjustedLocalBounds();
                    var marginLeft = child.get("marginLeft", 0);
                    var marginRight = child.get("marginRight", 0);
                    var x = prevX + marginLeft - bounds.left;
                    child.setPrivate("x", x);
                    prevX = x + bounds.right + marginRight;
                }
            });
        }
    });
    Object.defineProperty(HorizontalLayout, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "HorizontalLayout"
    });
    Object.defineProperty(HorizontalLayout, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Layout__WEBPACK_IMPORTED_MODULE_3__.Layout.classNames.concat([HorizontalLayout.className])
    });
    return HorizontalLayout;
}(_Layout__WEBPACK_IMPORTED_MODULE_3__.Layout));

//# sourceMappingURL=HorizontalLayout.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Label": () => (/* binding */ Label)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _render_Text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/Text */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Text.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");






/**
 * Creates a label with support for in-line styling and data bindings.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info
 */
var Label = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Label, _super);
    function Label() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_textKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "text",
                "fill",
                "textAlign",
                "fontFamily",
                "fontSize",
                "fontStyle",
                "fontWeight",
                "fontStyle",
                "fontVariant",
                "shadowColor",
                "shadowBlur",
                "shadowOffsetX",
                "shadowOffsetY",
                "shadowOpacity",
                // "leading",
                // "letterSpacing",
                "lineHeight",
                "baselineRatio",
                //"padding",
                // "stroke",
                // "strokeThickness",
                // "trim",
                // "wordWrap",
                "direction",
                "textBaseline",
                "oversizedBehavior",
                "breakWords",
                "ellipsis",
                "minScale",
                "populateText",
                "role",
                "ignoreFormatting"
            ]
        });
        return _this;
    }
    Object.defineProperty(Label.prototype, "text", {
        /**
         * @ignore Text is not to be used directly
         */
        get: function () {
            return this._text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Label.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this._makeText();
            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(this._textKeys, function (property) {
                var propValue = _this.get(property);
                if (propValue != undefined) {
                    _this._text.set(property, propValue);
                }
            });
        }
    });
    Object.defineProperty(Label.prototype, "_makeText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._text = this.children.push(_render_Text__WEBPACK_IMPORTED_MODULE_2__.Text["new"](this._root, {}));
        }
    });
    Object.defineProperty(Label.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._updateChildren.call(this);
            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(this._textKeys, function (property) {
                _this._text.set(property, _this.get(property));
            });
            if (this.isDirty("maxWidth")) {
                this._setMaxDimentions();
            }
            if (this.isDirty("maxHeight")) {
                this._setMaxDimentions();
            }
            if (this.isDirty("rotation")) {
                this._setMaxDimentions();
            }
            if (this.isDirty("textAlign") || this.isDirty("width")) {
                var textAlign = this.get("textAlign");
                var x = void 0;
                if (this.get("width") != null) {
                    if (textAlign == "right") {
                        x = _util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100;
                    }
                    else if (textAlign == "center") {
                        x = _util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50;
                    }
                    else {
                        x = 0;
                    }
                }
                this.text.set("x", x);
            }
        }
    });
    Object.defineProperty(Label.prototype, "_setMaxDimentions", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var rotation = this.get("rotation");
            var vertical = rotation == 90 || rotation == 270;
            var maxWidth = this.get("maxWidth", Infinity);
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(maxWidth)) {
                this.text.set(vertical ? "maxHeight" : "maxWidth", maxWidth - this.get("paddingLeft", 0) - this.get("paddingRight", 0));
            }
            else {
                this.text.set(vertical ? "maxHeight" : "maxWidth", undefined);
            }
            var maxHeight = this.get("maxHeight", Infinity);
            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(maxHeight)) {
                this.text.set(vertical ? "maxWidth" : "maxHeight", maxHeight - this.get("paddingTop", 0) - this.get("paddingBottom", 0));
            }
            else {
                this.text.set(vertical ? "maxWidth" : "maxHeight", undefined);
            }
        }
    });
    Object.defineProperty(Label.prototype, "_setDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype._setDataItem.call(this, dataItem);
            if (this.text.get("populateText")) {
                this.text.markDirtyText();
            }
        }
    });
    /**
     * Returns text with populated placeholders and formatting if `populateText` is
     * set to `true`.
     *
     * @return Populated text
     */
    Object.defineProperty(Label.prototype, "getText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._text._getText();
        }
    });
    Object.defineProperty(Label, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Label"
    });
    Object.defineProperty(Label, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Container__WEBPACK_IMPORTED_MODULE_5__.Container.classNames.concat([Label.className])
    });
    return Label;
}(_Container__WEBPACK_IMPORTED_MODULE_5__.Container));

//# sourceMappingURL=Label.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Layout": () => (/* binding */ Layout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");


/**
 * Base class for [[Container]] layouts.
 */
var Layout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Layout, _super);
    function Layout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Layout, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Layout"
    });
    Object.defineProperty(Layout, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity.classNames.concat([Layout.className])
    });
    return Layout;
}(_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity));

//# sourceMappingURL=Layout.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Line.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Line.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Line": () => (/* binding */ Line)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _util_Draw__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Draw */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js");



/**
 * Draws a line.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var Line = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Line, _super);
    function Line() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Line.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("points") || this._sizeDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(Line.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this._clear) {
                var points = this.get("points");
                if (points && points.length > 0) {
                    var point = points[0];
                    this._display.moveTo(point.x, point.y);
                    _util_Draw__WEBPACK_IMPORTED_MODULE_1__.segmentedLine(this._display, [[points]]);
                }
                else {
                    var w = this.width();
                    var h = this.height();
                    this._display.moveTo(0, 0);
                    this._display.lineTo(w, h);
                }
            }
        }
    });
    Object.defineProperty(Line, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Line"
    });
    Object.defineProperty(Line, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics.classNames.concat([Line.className])
    });
    return Line;
}(_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics));

//# sourceMappingURL=Line.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MonotoneXTension": () => (/* binding */ MonotoneXTension),
/* harmony export */   "curveMonotoneXTension": () => (/* binding */ curveMonotoneXTension)
/* harmony export */ });
/**
 * @ignore
 */
var MonotoneXTension = /** @class */ (function () {
    function MonotoneXTension(context, tension) {
        Object.defineProperty(this, "_line", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_x0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_x1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_y0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_y1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_t0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_tension", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        this._context = context;
        this._tension = tension;
    }
    Object.defineProperty(MonotoneXTension.prototype, "areaStart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._line = 0;
        }
    });
    Object.defineProperty(MonotoneXTension.prototype, "areaEnd", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._line = NaN;
        }
    });
    Object.defineProperty(MonotoneXTension.prototype, "lineStart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._x0 = this._x1 =
                this._y0 = this._y1 =
                    this._t0 = NaN;
            this._point = 0;
        }
    });
    Object.defineProperty(MonotoneXTension.prototype, "lineEnd", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
                case 3:
                    point(this, this._t0, slope2(this, this._t0));
                    break;
            }
            if (this._line || (this._line !== 0 && this._point === 1))
                this._context.closePath();
            this._line = 1 - this._line;
        }
    });
    Object.defineProperty(MonotoneXTension.prototype, "point", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y) {
            var t1 = NaN;
            x = +x, y = +y;
            if (x === this._x1 && y === this._y1)
                return; // Ignore coincident points.
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                    break;
                default:
                    point(this, this._t0, t1 = slope3(this, x, y));
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
            this._t0 = t1;
        }
    });
    return MonotoneXTension;
}());

/**
 * @ignore
 */
function curveMonotoneXTension(tension) {
    function monotoneXTension(context) {
        return new MonotoneXTension(context, tension);
    }
    return monotoneXTension;
}
/**
 * @ignore
 */
function sign(x) {
    return x < 0 ? -1 : 1;
}
/**
 * @ignore
 */
function slope3(that, x2, y2) {
    var h0 = (that._x1 - that._x0);
    var h1 = (x2 - that._x1);
    var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
    var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
    var p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
/**
 * @ignore
 */
function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
/**
 * @ignore
 */
function point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
//# sourceMappingURL=MonotoneXTension.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PointedRectangle": () => (/* binding */ PointedRectangle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _util_Math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");



/**
 * Draws a rectangle with a pointer.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var PointedRectangle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PointedRectangle, _super);
    function PointedRectangle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PointedRectangle.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("pointerBaseWidth") || this.isDirty("cornerRadius") || this.isDirty("pointerLength") || this.isDirty("pointerX") || this.isDirty("pointerY") || this.isDirty("width") || this.isDirty("height")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(PointedRectangle.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this._clear) {
                this.markDirtyBounds();
                var w = this.width();
                var h = this.height();
                if (w > 0 && h > 0) {
                    var cr = this.get("cornerRadius", 8);
                    cr = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(cr, 0, Math.min(w / 2, h / 2));
                    var x = this.get("pointerX", 0);
                    var y = this.get("pointerY", 0);
                    var bwh = this.get("pointerBaseWidth", 15) / 2;
                    // corner coordinates
                    // top left
                    var xtl = 0;
                    var ytl = 0;
                    // top right
                    var xtr = w;
                    var ytr = 0;
                    // bottom right
                    var xbr = w;
                    var ybr = h;
                    // bottom left
                    var xbl = 0;
                    var ybl = h;
                    // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
                    // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
                    var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
                    var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
                    var display = this._display;
                    // top
                    display.moveTo(cr, 0);
                    if (d1 > 0 && d2 > 0) {
                        var stemX = Math.round(_util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(x, cr + bwh, w - bwh - cr));
                        y = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(y, -Infinity, 0);
                        display.lineTo(stemX - bwh, 0);
                        display.lineTo(x, y);
                        display.lineTo(stemX + bwh, 0);
                    }
                    display.lineTo(w - cr, 0);
                    display.arcTo(w, 0, w, cr, cr);
                    // right
                    if (d1 > 0 && d2 < 0) {
                        var stemY = Math.round(_util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(y, cr + bwh, h - bwh - cr));
                        x = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(x, w, Infinity);
                        display.lineTo(w, cr);
                        display.lineTo(w, stemY - bwh);
                        display.lineTo(x, y);
                        display.lineTo(w, stemY + bwh);
                    }
                    display.lineTo(w, h - cr);
                    display.arcTo(w, h, w - cr, h, cr);
                    // bottom
                    if (d1 < 0 && d2 < 0) {
                        var stemX = Math.round(_util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(x, cr + bwh, w - bwh - cr));
                        y = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(y, h, Infinity);
                        display.lineTo(w - cr, h);
                        display.lineTo(stemX + bwh, h);
                        display.lineTo(x, y);
                        display.lineTo(stemX - bwh, h);
                    }
                    display.lineTo(cr, h);
                    display.arcTo(0, h, 0, h - cr, cr);
                    // left
                    if (d1 < 0 && d2 > 0) {
                        var stemY = Math.round(_util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(y, cr + bwh, h - cr - bwh));
                        x = _util_Math__WEBPACK_IMPORTED_MODULE_1__.fitToRange(x, -Infinity, 0);
                        display.lineTo(0, h - cr);
                        display.lineTo(0, stemY + bwh);
                        display.lineTo(x, y);
                        display.lineTo(0, stemY - bwh);
                    }
                    display.lineTo(0, cr);
                    display.arcTo(0, 0, cr, 0, cr);
                }
            }
        }
    });
    Object.defineProperty(PointedRectangle, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PointedRectangle"
    });
    Object.defineProperty(PointedRectangle, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics.classNames.concat([PointedRectangle.className])
    });
    return PointedRectangle;
}(_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics));

//# sourceMappingURL=PointedRectangle.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rectangle": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");


/**
 * Draws a rectangle.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var Rectangle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Rectangle, _super);
    function Rectangle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Rectangle.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(Rectangle.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this._clear && !this.get("draw")) {
                this._draw();
            }
        }
    });
    Object.defineProperty(Rectangle.prototype, "_draw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._display.drawRect(0, 0, this.width(), this.height());
        }
    });
    Object.defineProperty(Rectangle.prototype, "_updateSize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.markDirty();
            this._clear = true;
        }
    });
    Object.defineProperty(Rectangle, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Rectangle"
    });
    Object.defineProperty(Rectangle, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics.classNames.concat([Rectangle.className])
    });
    return Rectangle;
}(_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics));

//# sourceMappingURL=Rectangle.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RoundedRectangle": () => (/* binding */ RoundedRectangle)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _Rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Rectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js");





/**
 * Draws a rectangle with rounded corners.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 * @important
 */
var RoundedRectangle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(RoundedRectangle, _super);
    function RoundedRectangle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RoundedRectangle.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("cornerRadiusTL") || this.isDirty("cornerRadiusTR") || this.isDirty("cornerRadiusBR") || this.isDirty("cornerRadiusBL")) {
                this._clear = true;
            }
        }
    });
    Object.defineProperty(RoundedRectangle.prototype, "_draw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var width = this.width();
            var height = this.height();
            var w = width;
            var h = height;
            var wSign = w / Math.abs(width);
            var hSign = h / Math.abs(height);
            if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(w) && _util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(h)) {
                var minSide = Math.min(w, h) / 2;
                var crtl = _util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(this.get("cornerRadiusTL", 8), minSide);
                var crtr = _util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(this.get("cornerRadiusTR", 8), minSide);
                var crbr = _util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(this.get("cornerRadiusBR", 8), minSide);
                var crbl = _util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(this.get("cornerRadiusBL", 8), minSide);
                var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));
                crtl = _util_Math__WEBPACK_IMPORTED_MODULE_3__.fitToRange(crtl, 0, maxcr);
                crtr = _util_Math__WEBPACK_IMPORTED_MODULE_3__.fitToRange(crtr, 0, maxcr);
                crbr = _util_Math__WEBPACK_IMPORTED_MODULE_3__.fitToRange(crbr, 0, maxcr);
                crbl = _util_Math__WEBPACK_IMPORTED_MODULE_3__.fitToRange(crbl, 0, maxcr);
                this._display.moveTo(crtl * wSign, 0);
                this._display.lineTo(w - crtr * wSign, 0);
                if (crtr > 0) {
                    this._display.arcTo(w, 0, w, crtr * hSign, crtr);
                }
                this._display.lineTo(w, h - crbr * hSign);
                if (crbr > 0) {
                    this._display.arcTo(w, h, w - crbr * wSign, h, crbr);
                }
                this._display.lineTo(crbl * wSign, h);
                if (crbl > 0) {
                    this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);
                }
                this._display.lineTo(0, crtl * hSign);
                if (crtl > 0) {
                    this._display.arcTo(0, 0, crtl * wSign, 0, crtl);
                }
            }
        }
    });
    Object.defineProperty(RoundedRectangle, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "RoundedRectangle"
    });
    Object.defineProperty(RoundedRectangle, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle.classNames.concat([RoundedRectangle.className])
    });
    return RoundedRectangle;
}(_Rectangle__WEBPACK_IMPORTED_MODULE_4__.Rectangle));

//# sourceMappingURL=RoundedRectangle.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scrollbar": () => (/* binding */ Scrollbar)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _render_RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/RoundedRectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js");
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js");
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Button */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");







/**
 * A control that allows zooming chart's axes, or other uses requiring range
 * selection.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info
 */
var Scrollbar = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Scrollbar, _super);
    function Scrollbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A thumb elment - a draggable square between the grips, used for panning
         * the selection.
         */
        Object.defineProperty(_this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._makeThumb()
        });
        /**
         * Start grip button.
         */
        Object.defineProperty(_this, "startGrip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._makeButton()
        });
        /**
         * End grip button.
         */
        Object.defineProperty(_this, "endGrip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._makeButton()
        });
        Object.defineProperty(_this, "_thumbBusy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_startDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_endDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_thumbDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(Scrollbar.prototype, "_addOrientationClass", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = _util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["scrollbar", this._settings.orientation]);
            if (!this._settings.background) {
                this._settings.background = _render_RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__.RoundedRectangle["new"](this._root, {
                    themeTags: _util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["main", "background"])
                });
            }
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_makeButton", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.children.push(_Button__WEBPACK_IMPORTED_MODULE_3__.Button["new"](this._root, {
                themeTags: ["resize", "button", this.get("orientation")], icon: _Graphics__WEBPACK_IMPORTED_MODULE_4__.Graphics["new"](this._root, {
                    themeTags: ["icon"]
                })
            }));
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_makeThumb", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.children.push(_render_RoundedRectangle__WEBPACK_IMPORTED_MODULE_2__.RoundedRectangle["new"](this._root, {
                themeTags: ["thumb", this.get("orientation")]
            }));
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_handleAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (animation) {
            var _this = this;
            if (animation) {
                this._disposers.push(animation.events.on("stopped", function () {
                    _this.setPrivateRaw("isBusy", false);
                    _this._thumbBusy = false;
                }));
            }
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._addOrientationClass();
            _super.prototype._afterNew.call(this);
            var startGrip = this.startGrip;
            var endGrip = this.endGrip;
            var thumb = this.thumb;
            var background = this.get("background");
            if (background) {
                this._disposers.push(background.events.on("click", function (event) {
                    _this.setPrivateRaw("isBusy", true);
                    var point = _this._display.toLocal(event.point);
                    var w = _this.width();
                    var h = _this.height();
                    var orientation = _this.get("orientation");
                    var newMiddle;
                    if (orientation == "vertical") {
                        newMiddle = (point.y - thumb.height() / 2) / h;
                    }
                    else {
                        newMiddle = (point.x - thumb.width() / 2) / w;
                    }
                    var newCoordinate;
                    var key;
                    if (orientation == "vertical") {
                        newCoordinate = newMiddle * h;
                        key = "y";
                    }
                    else {
                        newCoordinate = newMiddle * w;
                        key = "x";
                    }
                    _this._thumbBusy = true;
                    _this._handleAnimation(_this.thumb.animate({ key: key, to: newCoordinate, duration: _this.get("animationDuration", 0), easing: _this.get("animationEasing") }));
                }));
            }
            this._disposers.push(thumb.events.on("dblclick", function () {
                var duration = _this.get("animationDuration", 0);
                var easing = _this.get("animationEasing");
                _this.animate({ key: "start", to: 0, duration: duration, easing: easing });
                _this.animate({ key: "end", to: 1, duration: duration, easing: easing });
            }));
            this._disposers.push(startGrip.events.on("pointerdown", function () {
                _this.setPrivateRaw("isBusy", true);
                _this._startDown = true;
            }));
            this._disposers.push(endGrip.events.on("pointerdown", function () {
                _this.setPrivateRaw("isBusy", true);
                _this._endDown = true;
            }));
            this._disposers.push(thumb.events.on("pointerdown", function () {
                _this.setPrivateRaw("isBusy", true);
                _this._thumbDown = true;
            }));
            this._disposers.push(startGrip.events.on("globalpointerup", function () {
                if (_this._startDown) {
                    _this.setPrivateRaw("isBusy", false);
                }
                _this._startDown = false;
            }));
            this._disposers.push(endGrip.events.on("globalpointerup", function () {
                if (_this._endDown) {
                    _this.setPrivateRaw("isBusy", false);
                }
                _this._endDown = false;
            }));
            this._disposers.push(thumb.events.on("globalpointerup", function () {
                if (_this._thumbDown) {
                    _this.setPrivateRaw("isBusy", false);
                }
                _this._thumbDown = false;
            }));
            this._disposers.push(startGrip.on("x", function () {
                _this._updateThumb();
            }));
            this._disposers.push(endGrip.on("x", function () {
                _this._updateThumb();
            }));
            this._disposers.push(startGrip.on("y", function () {
                _this._updateThumb();
            }));
            this._disposers.push(endGrip.on("y", function () {
                _this._updateThumb();
            }));
            this._disposers.push(thumb.events.on("positionchanged", function () {
                _this._updateGripsByThumb();
            }));
            if (this.get("orientation") == "vertical") {
                startGrip.set("x", 0);
                endGrip.set("x", 0);
                this._disposers.push(thumb.adapters.add("y", function (value) {
                    return Math.max(Math.min(Number(value), _this.height() - thumb.height()), 0);
                }));
                this._disposers.push(thumb.adapters.add("x", function (_value) {
                    return _this.width() / 2;
                }));
                this._disposers.push(startGrip.adapters.add("x", function (_value) {
                    return _this.width() / 2;
                }));
                this._disposers.push(endGrip.adapters.add("x", function (_value) {
                    return _this.width() / 2;
                }));
                this._disposers.push(startGrip.adapters.add("y", function (value) {
                    return Math.max(Math.min(Number(value), _this.height()), 0);
                }));
                this._disposers.push(endGrip.adapters.add("y", function (value) {
                    return Math.max(Math.min(Number(value), _this.height()), 0);
                }));
            }
            else {
                startGrip.set("y", 0);
                endGrip.set("y", 0);
                this._disposers.push(thumb.adapters.add("x", function (value) {
                    return Math.max(Math.min(Number(value), _this.width() - thumb.width()), 0);
                }));
                this._disposers.push(thumb.adapters.add("y", function (_value) {
                    return _this.height() / 2;
                }));
                this._disposers.push(startGrip.adapters.add("y", function (_value) {
                    return _this.height() / 2;
                }));
                this._disposers.push(endGrip.adapters.add("y", function (_value) {
                    return _this.height() / 2;
                }));
                this._disposers.push(startGrip.adapters.add("x", function (value) {
                    return Math.max(Math.min(Number(value), _this.width()), 0);
                }));
                this._disposers.push(endGrip.adapters.add("x", function (value) {
                    return Math.max(Math.min(Number(value), _this.width()), 0);
                }));
            }
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) {
                this.updateGrips();
            }
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this.isDirty("start") || this.isDirty("end")) {
                var eventType = "rangechanged";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, { type: eventType, target: this, start: this.get("start", 0), end: this.get("end", 1) });
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Scrollbar.prototype, "updateGrips", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var startGrip = this.startGrip;
            var endGrip = this.endGrip;
            var orientation = this.get("orientation");
            var height = this.height();
            var width = this.width();
            if (orientation == "vertical") {
                startGrip.set("y", height * this.get("start", 0));
                endGrip.set("y", height * this.get("end", 1));
            }
            else {
                startGrip.set("x", width * this.get("start", 0));
                endGrip.set("x", width * this.get("end", 1));
            }
            var valueFunction = this.getPrivate("positionTextFunction");
            var from = Math.round(this.get("start", 0) * 100);
            var to = Math.round(this.get("end", 0) * 100);
            var fromValue;
            var toValue;
            if (valueFunction) {
                fromValue = valueFunction.call(this, this.get("start", 0));
                toValue = valueFunction.call(this, this.get("end", 0));
            }
            else {
                fromValue = from + "%";
                toValue = to + "%";
            }
            startGrip.set("ariaLabel", this._t("From %1", undefined, fromValue));
            startGrip.set("ariaValueNow", "" + from);
            startGrip.set("ariaValueText", from + "%");
            endGrip.set("ariaLabel", this._t("To %1", undefined, toValue));
            endGrip.set("ariaValueNow", "" + to);
            endGrip.set("ariaValueText", to + "%");
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_updateThumb", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var thumb = this.thumb;
            var startGrip = this.startGrip;
            var endGrip = this.endGrip;
            var height = this.height();
            var width = this.width();
            var x0 = startGrip.x();
            var x1 = endGrip.x();
            var y0 = startGrip.y();
            var y1 = endGrip.y();
            var start = 0;
            var end = 1;
            if (this.get("orientation") == "vertical") {
                if (_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(y0) && _util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(y1)) {
                    if (!this._thumbBusy && !thumb.isDragging()) {
                        thumb.set("height", y1 - y0);
                        thumb.set("y", y0);
                    }
                    start = y0 / height;
                    end = y1 / height;
                }
            }
            else {
                if (_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(x0) && _util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(x1)) {
                    if (!this._thumbBusy && !thumb.isDragging()) {
                        thumb.set("width", x1 - x0);
                        thumb.set("x", x0);
                    }
                    start = x0 / width;
                    end = x1 / width;
                }
            }
            if (this.getPrivate("isBusy") && (this.get("start") != start || this.get("end") != end)) {
                this.set("start", start);
                this.set("end", end);
            }
            var valueFunction = this.getPrivate("positionTextFunction");
            var from = Math.round(this.get("start", 0) * 100);
            var to = Math.round(this.get("end", 0) * 100);
            var fromValue;
            var toValue;
            if (valueFunction) {
                fromValue = valueFunction.call(this, this.get("start", 0));
                toValue = valueFunction.call(this, this.get("end", 0));
            }
            else {
                fromValue = from + "%";
                toValue = to + "%";
            }
            thumb.set("ariaLabel", this._t("From %1 to %2", undefined, fromValue, toValue));
            thumb.set("ariaValueNow", "" + from);
            thumb.set("ariaValueText", from + "%");
        }
    });
    Object.defineProperty(Scrollbar.prototype, "_updateGripsByThumb", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var thumb = this.thumb;
            var startGrip = this.startGrip;
            var endGrip = this.endGrip;
            if (this.get("orientation") == "vertical") {
                var thumbSize = thumb.height();
                startGrip.set("y", thumb.y());
                endGrip.set("y", thumb.y() + thumbSize);
            }
            else {
                var thumbSize = thumb.width();
                startGrip.set("x", thumb.x());
                endGrip.set("x", thumb.x() + thumbSize);
            }
        }
    });
    Object.defineProperty(Scrollbar, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Scrollbar"
    });
    Object.defineProperty(Scrollbar, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Container__WEBPACK_IMPORTED_MODULE_6__.Container.classNames.concat([Scrollbar.className])
    });
    return Scrollbar;
}(_Container__WEBPACK_IMPORTED_MODULE_6__.Container));

//# sourceMappingURL=Scrollbar.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SerialChart": () => (/* binding */ SerialChart)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Chart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Chart */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");






/**
 * A base class for all series-based charts.
 */
var SerialChart = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SerialChart, _super);
    function SerialChart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A [[Container]] where chart will store all series.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "seriesContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container["new"](_this._root, { width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100, isMeasured: false })
        });
        /**
         * A list of chart's series.
         */
        Object.defineProperty(_this, "series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_3__.ListAutoDispose()
        });
        return _this;
    }
    Object.defineProperty(SerialChart.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this._disposers.push(this.series);
            var children = this.seriesContainer.children;
            this._disposers.push(this.series.events.onAll(function (change) {
                if (change.type === "clear") {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(change.oldValues, function (series) {
                        _this._removeSeries(series);
                    });
                    var colors = _this.get("colors");
                    if (colors) {
                        colors.reset();
                    }
                }
                else if (change.type === "push") {
                    children.moveValue(change.newValue);
                    _this._processSeries(change.newValue);
                }
                else if (change.type === "setIndex") {
                    children.setIndex(change.index, change.newValue);
                    _this._processSeries(change.newValue);
                }
                else if (change.type === "insertIndex") {
                    children.insertIndex(change.index, change.newValue);
                    _this._processSeries(change.newValue);
                }
                else if (change.type === "removeIndex") {
                    _this._removeSeries(change.oldValue);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            }));
        }
    });
    Object.defineProperty(SerialChart.prototype, "_processSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            series.chart = this;
            series._placeBulletsContainer(this);
        }
    });
    Object.defineProperty(SerialChart.prototype, "_removeSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            if (!series.isDisposed()) {
                this.seriesContainer.children.removeValue(series);
                series._removeBulletsContainer();
            }
        }
    });
    Object.defineProperty(SerialChart, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "SerialChart"
    });
    Object.defineProperty(SerialChart, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Chart__WEBPACK_IMPORTED_MODULE_5__.Chart.classNames.concat([SerialChart.className])
    });
    return SerialChart;
}(_Chart__WEBPACK_IMPORTED_MODULE_5__.Chart));

//# sourceMappingURL=SerialChart.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Series.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Series.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Series": () => (/* binding */ Series)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_render_Component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/render/Component */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Component.js");
/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _core_util_Color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _core_util_Animation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/util/Animation */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _core_util_Time__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/util/Time */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Time.js");
/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _core_render_Label__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/render/Label */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js");












/**
 * A base class for all series.
 */
var Series = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Series, _super);
    function Series() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_aggregatesCalculated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_selectionAggregatesCalculated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_dataProcessed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_psi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_pei", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A chart series belongs to.
         */
        Object.defineProperty(_this, "chart", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * List of bullets to use for the series.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
         */
        Object.defineProperty(_this, "bullets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.List()
        });
        /**
         * A [[Container]] series' bullets are stored in.
         *
         * @default Container.new()
         */
        Object.defineProperty(_this, "bulletsContainer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container["new"](_this._root, { isMeasured: false, width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100, position: "absolute" })
        });
        return _this;
    }
    Object.defineProperty(Series.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this.valueFields.push("value");
            _super.prototype._afterNew.call(this);
            this._disposers.push(this.bullets.events.onAll(function (change) {
                if (change.type === "clear") {
                    _this._handleBullets(_this.dataItems);
                }
                else if (change.type === "push") {
                    _this._handleBullets(_this.dataItems);
                }
                else if (change.type === "setIndex") {
                    _this._handleBullets(_this.dataItems);
                }
                else if (change.type === "insertIndex") {
                    _this._handleBullets(_this.dataItems);
                }
                else if (change.type === "removeIndex") {
                    _this._handleBullets(_this.dataItems);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            }));
        }
    });
    Object.defineProperty(Series.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.bulletsContainer.dispose(); // can be in a different parent
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(Series.prototype, "_handleBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItems) {
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(dataItems, function (dataItem) {
                var bullets = dataItem.bullets;
                if (bullets) {
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(bullets, function (bullet) {
                        bullet.dispose();
                    });
                    dataItem.bullets = undefined;
                }
            });
            this._markDirtyValues();
        }
    });
    /**
     * Looks up and returns a data item by its ID.
     *
     * @param   id  ID
     * @return      Data item
     */
    Object.defineProperty(Series.prototype, "getDataItemById", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (id) {
            return _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.find(this.dataItems, function (dataItem) {
                return dataItem.get("id") == id;
            });
        }
    });
    Object.defineProperty(Series.prototype, "_makeBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var _this = this;
            if (this._shouldMakeBullet(dataItem)) {
                dataItem.bullets = [];
                this.bullets.each(function (bulletFunction) {
                    _this._makeBullet(dataItem, bulletFunction);
                });
            }
        }
    });
    Object.defineProperty(Series.prototype, "_shouldMakeBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) {
            return true;
        }
    });
    Object.defineProperty(Series.prototype, "_makeBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, bulletFunction, index) {
            var bullet = bulletFunction(this._root, this, dataItem);
            if (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    sprite._setDataItem(dataItem);
                    sprite.setRaw("position", "absolute");
                    this.bulletsContainer.children.push(sprite);
                }
                bullet._index = index;
                bullet.series = this;
                dataItem.bullets.push(bullet);
            }
            return bullet;
        }
    });
    Object.defineProperty(Series.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._aggregatesCalculated = false;
            this._selectionAggregatesCalculated = false;
        }
    });
    Object.defineProperty(Series.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._prepareChildren.call(this);
            var startIndex = this.getPrivate("startIndex", 0);
            var endIndex = this.getPrivate("endIndex", this.dataItems.length);
            var calculateAggregates = this.get("calculateAggregates");
            if (calculateAggregates) {
                if (this._valuesDirty && !this._dataProcessed) {
                    if (!this._aggregatesCalculated) {
                        this._calculateAggregates(0, this.dataItems.length);
                        this._aggregatesCalculated = true;
                    }
                }
                if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {
                    if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {
                        // void
                    }
                    else {
                        this._calculateAggregates(startIndex, endIndex);
                    }
                    this._selectionAggregatesCalculated = true;
                }
            }
            if (this.isDirty("tooltip")) {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.hide(0);
                    tooltip.set("tooltipTarget", this);
                }
            }
            if (this.bullets.length > 0) {
                var count = this.dataItems.length;
                var startIndex_1 = this.getPrivate("startIndex", 0);
                var endIndex_1 = this.getPrivate("endIndex", count);
                for (var i = 0; i < startIndex_1; i++) {
                    this._hideBullets(this.dataItems[i]);
                }
                for (var i = startIndex_1; i < endIndex_1; i++) {
                    var dataItem = this.dataItems[i];
                    if (!dataItem.bullets) {
                        this._makeBullets(dataItem);
                    }
                }
                for (var i = endIndex_1; i < count; i++) {
                    this._hideBullets(this.dataItems[i]);
                }
            }
            if (this.isDirty("fill") || this.isDirty("stroke")) {
                var markerRectangle = void 0;
                var legendDataItem = this.get("legendDataItem");
                if (legendDataItem) {
                    markerRectangle = legendDataItem.get("markerRectangle");
                    if (markerRectangle) {
                        if (this.isDirty("stroke")) {
                            var stroke = this.get("stroke");
                            markerRectangle.set("stroke", stroke);
                        }
                        if (this.isDirty("fill")) {
                            var fill = this.get("fill");
                            markerRectangle.set("fill", fill);
                        }
                    }
                }
                this.updateLegendMarker(undefined);
            }
        }
    });
    Object.defineProperty(Series.prototype, "_calculateAggregates", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (startIndex, endIndex) {
            var _this = this;
            var fields = this._valueFields;
            if (!fields) {
                throw new Error("No value fields are set for the series.");
            }
            var sum = {};
            var absSum = {};
            var count = {};
            var low = {};
            var high = {};
            var open = {};
            var close = {};
            var average = {};
            var previous = {};
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(fields, function (key) {
                sum[key] = 0;
                absSum[key] = 0;
                count[key] = 0;
            });
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(fields, function (key) {
                var change = key + "Change";
                var changePercent = key + "ChangePercent";
                var changePrevious = key + "ChangePrevious";
                var changePreviousPercent = key + "ChangePreviousPercent";
                var changeSelection = key + "ChangeSelection";
                var ChangeSelectionPercent = key + "ChangeSelectionPercent";
                for (var i = startIndex; i < endIndex; i++) {
                    var dataItem = _this.dataItems[i];
                    var value = dataItem.get(key);
                    if (value != null) {
                        count[key]++;
                        sum[key] += value;
                        absSum[key] += Math.abs(value);
                        average[key] = sum[key] / count[key];
                        if (low[key] > value || low[key] == null) {
                            low[key] = value;
                        }
                        if (high[key] < value || high[key] == null) {
                            high[key] = value;
                        }
                        close[key] = value;
                        if (open[key] == null) {
                            open[key] = value;
                            previous[key] = value;
                        }
                        if (startIndex === 0) {
                            dataItem.setRaw((change), value - open[key]);
                            dataItem.setRaw((changePercent), (value - open[key]) / open[key] * 100);
                        }
                        dataItem.setRaw((changePrevious), value - previous[key]);
                        dataItem.setRaw((changePreviousPercent), (value - previous[key]) / previous[key] * 100);
                        dataItem.setRaw((changeSelection), value - open[key]);
                        dataItem.setRaw((ChangeSelectionPercent), (value - open[key]) / open[key] * 100);
                        previous[key] = value;
                    }
                }
            });
            _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(fields, function (key) {
                _this.setPrivate((key + "AverageSelection"), average[key]);
                _this.setPrivate((key + "CountSelection"), count[key]);
                _this.setPrivate((key + "SumSelection"), sum[key]);
                _this.setPrivate((key + "AbsoluteSumSelection"), absSum[key]);
                _this.setPrivate((key + "LowSelection"), low[key]);
                _this.setPrivate((key + "HighSelection"), high[key]);
                _this.setPrivate((key + "OpenSelection"), open[key]);
                _this.setPrivate((key + "CloseSelection"), close[key]);
            });
            if (startIndex === 0 && endIndex === this.dataItems.length) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(fields, function (key) {
                    _this.setPrivate((key + "Average"), average[key]);
                    _this.setPrivate((key + "Count"), count[key]);
                    _this.setPrivate((key + "Sum"), sum[key]);
                    _this.setPrivate((key + "AbsoluteSum"), absSum[key]);
                    _this.setPrivate((key + "Low"), low[key]);
                    _this.setPrivate((key + "High"), high[key]);
                    _this.setPrivate((key + "Open"), open[key]);
                    _this.setPrivate((key + "Close"), close[key]);
                });
            }
        }
    });
    Object.defineProperty(Series.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._updateChildren.call(this);
            this._psi = this.getPrivate("startIndex", 0);
            this._pei = this.getPrivate("endIndex", this.dataItems.length);
            // Apply heat rules
            if (this._valuesDirty && this.get("heatRules") != null) {
                var rules = this.get("heatRules", []);
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(rules, function (rule) {
                    var minValue = rule.minValue || _this.getPrivate((rule.dataField + "Low")) || 0;
                    var maxValue = rule.maxValue || _this.getPrivate((rule.dataField + "High")) || 0;
                    _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(rule.target._entities, function (target) {
                        var value = target.dataItem.get(rule.dataField) || 0;
                        var percent;
                        if (rule.logarithmic) {
                            percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));
                        }
                        else {
                            percent = (value - minValue) / (maxValue - minValue);
                        }
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(value) && (!_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(percent) || Math.abs(percent) == Infinity)) {
                            percent = 0.5;
                        }
                        // fixes problems if all values are the same
                        var propertyValue;
                        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(rule.min)) {
                            propertyValue = rule.min + (rule.max - rule.min) * percent;
                        }
                        else if (rule.min instanceof _core_util_Color__WEBPACK_IMPORTED_MODULE_6__.Color) {
                            propertyValue = _core_util_Color__WEBPACK_IMPORTED_MODULE_6__.Color.interpolate(percent, rule.min, rule.max);
                        }
                        else if (rule.min instanceof _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.Percent) {
                            propertyValue = (0,_core_util_Animation__WEBPACK_IMPORTED_MODULE_7__.percentInterpolate)(percent, rule.min, rule.max);
                        }
                        if (rule.customFunction) {
                            rule.customFunction.call(_this, target, minValue, maxValue, propertyValue);
                        }
                        else {
                            target.set(rule.key, propertyValue);
                        }
                    });
                });
            }
            if (this.bullets.length > 0) {
                var count = this.dataItems.length;
                var startIndex = this.getPrivate("startIndex", 0);
                var endIndex = this.getPrivate("endIndex", count);
                if (endIndex < count) {
                    endIndex++;
                }
                if (startIndex > 0) {
                    startIndex--;
                }
                for (var i = startIndex; i < endIndex; i++) {
                    this._positionBullets(this.dataItems[i]);
                }
            }
        }
    });
    Object.defineProperty(Series.prototype, "_positionBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var _this = this;
            if (dataItem.bullets) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(dataItem.bullets, function (bullet) {
                    _this._positionBullet(bullet);
                    var sprite = bullet.get("sprite");
                    if (bullet.get("dynamic")) {
                        if (sprite) {
                            sprite._markDirtyKey("fill");
                            sprite.markDirtySize();
                        }
                        if (sprite instanceof _core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container) {
                            sprite.walkChildren(function (child) {
                                child._markDirtyKey("fill");
                                child.markDirtySize();
                            });
                        }
                    }
                    if (sprite instanceof _core_render_Label__WEBPACK_IMPORTED_MODULE_8__.Label && sprite.get("populateText")) {
                        sprite.text.markDirtyText();
                    }
                });
            }
        }
    });
    Object.defineProperty(Series.prototype, "_hideBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            if (dataItem.bullets) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(dataItem.bullets, function (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite.setPrivate("visible", false);
                    }
                });
            }
        }
    });
    Object.defineProperty(Series.prototype, "_positionBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_bullet) {
        }
    });
    Object.defineProperty(Series.prototype, "_placeBulletsContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (chart) {
            chart.bulletsContainer.children.moveValue(this.bulletsContainer);
        }
    });
    Object.defineProperty(Series.prototype, "_removeBulletsContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var bulletsContainer = this.bulletsContainer;
            if (bulletsContainer.parent) {
                bulletsContainer.parent.children.removeValue(bulletsContainer);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Series.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var bullets = dataItem.bullets;
            if (bullets) {
                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(bullets, function (bullet) {
                    bullet.dispose();
                });
            }
        }
    });
    Object.defineProperty(Series.prototype, "_getItemReaderLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return "";
        }
    });
    /**
     * Shows series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */
    Object.defineProperty(Series.prototype, "showDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises, bullets;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                            bullets = dataItem.bullets;
                            if (bullets) {
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(bullets, function (bullet) {
                                    promises.push(bullet.get("sprite").show(duration));
                                });
                            }
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Hides series's data item.
     *
     * @param   dataItem  Data item
     * @param   duration  Animation duration in milliseconds
     * @return            Promise
     */
    Object.defineProperty(Series.prototype, "hideDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var promises, bullets;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                            bullets = dataItem.bullets;
                            if (bullets) {
                                _core_util_Array__WEBPACK_IMPORTED_MODULE_4__.each(bullets, function (bullet) {
                                    promises.push(bullet.get("sprite").hide(duration));
                                });
                            }
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    Object.defineProperty(Series.prototype, "_sequencedShowHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (show, duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var startIndex_2, endIndex_2;
                var _this = this;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.get("sequencedInterpolation")) return [3 /*break*/, 4];
                            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(duration)) {
                                duration = this.get("interpolationDuration", 0);
                            }
                            if (!(duration > 0)) return [3 /*break*/, 2];
                            startIndex_2 = this.getPrivate("startIndex", 0);
                            endIndex_2 = this.getPrivate("endIndex", this.dataItems.length);
                            return [4 /*yield*/, Promise.all(_core_util_Array__WEBPACK_IMPORTED_MODULE_4__.map(this.dataItems, function (dataItem, i) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function () {
                                    var realDuration, delay;
                                    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                realDuration = duration || 0;
                                                if (i < startIndex_2 - 10 || i > endIndex_2 + 10) {
                                                    realDuration = 0;
                                                }
                                                delay = this.get("sequencedDelay", 0) + realDuration / (endIndex_2 - startIndex_2);
                                                return [4 /*yield*/, _core_util_Time__WEBPACK_IMPORTED_MODULE_9__.sleep(delay * (i - startIndex_2))];
                                            case 1:
                                                _a.sent();
                                                if (!show) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.showDataItem(dataItem, realDuration)];
                                            case 2:
                                                _a.sent();
                                                return [3 /*break*/, 5];
                                            case 3: return [4 /*yield*/, this.hideDataItem(dataItem, realDuration)];
                                            case 4:
                                                _a.sent();
                                                _a.label = 5;
                                            case 5: return [2 /*return*/];
                                        }
                                    });
                                }); }))];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, Promise.all(_core_util_Array__WEBPACK_IMPORTED_MODULE_4__.map(this.dataItems, function (dataItem) {
                                if (show) {
                                    return _this.showDataItem(dataItem, 0);
                                }
                                else {
                                    return _this.hideDataItem(dataItem, 0);
                                }
                            }))];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Series.prototype, "updateLegendValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var legendDataItem = dataItem.get("legendDataItem");
            if (legendDataItem) {
                var valueLabel = legendDataItem.get("valueLabel");
                if (valueLabel) {
                    var text = valueLabel.text;
                    var txt = "";
                    valueLabel._setDataItem(dataItem);
                    txt = this.get("legendValueText", text.get("text", ""));
                    valueLabel.set("text", txt);
                    text.markDirtyText();
                }
                var label = legendDataItem.get("label");
                if (label) {
                    var text = label.text;
                    var txt = "";
                    label._setDataItem(dataItem);
                    txt = this.get("legendLabelText", text.get("text", ""));
                    label.set("text", txt);
                    text.markDirtyText();
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Series.prototype, "updateLegendMarker", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_dataItem) {
        }
    });
    Object.defineProperty(Series.prototype, "_onHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._onHide.call(this);
            var tooltip = this.getTooltip();
            if (tooltip) {
                tooltip.hide();
            }
        }
    });
    Object.defineProperty(Series, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Series"
    });
    Object.defineProperty(Series, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _core_render_Component__WEBPACK_IMPORTED_MODULE_10__.Component.classNames.concat([Series.className])
    });
    return Series;
}(_core_render_Component__WEBPACK_IMPORTED_MODULE_10__.Component));

//# sourceMappingURL=Series.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sprite": () => (/* binding */ Sprite)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_Entity__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _util_Template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Template */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _util_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _util_Disposer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _util_Animation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/Animation */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Object__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");











//import { populateString } from "../util/PopulateString";
/**
 * An [[EventDispatcher]] for [[Sprite]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
 */
var SpriteEventDispatcher = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SpriteEventDispatcher, _super);
    function SpriteEventDispatcher(sprite) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "_sprite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_rendererDisposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_dispatchParents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        _this._sprite = sprite;
        return _this;
    }
    Object.defineProperty(SpriteEventDispatcher.prototype, "_makePointerEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, event) {
            return {
                type: key,
                originalEvent: event.event,
                point: event.point,
                simulated: event.simulated,
                native: event.native,
                target: this._sprite
            };
        }
    });
    Object.defineProperty(SpriteEventDispatcher.prototype, "_onRenderer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, dispatch) {
            var _this = this;
            // TODO: is this OK? it'd be good not to require to set this on each individual element
            this._sprite.set("interactive", true);
            this._sprite._display.interactive = true;
            var events = this._rendererDisposers[key];
            if (events === undefined) {
                var disposer_1 = this._sprite._display.on(key, function (e) {
                    dispatch.call(_this, e);
                });
                events = this._rendererDisposers[key] = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.CounterDisposer(function () {
                    delete _this._rendererDisposers[key];
                    disposer_1.dispose();
                });
            }
            return events.increment();
        }
    });
    Object.defineProperty(SpriteEventDispatcher.prototype, "_on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (once, type, callback, context, shouldClone, dispatch) {
            var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);
            var rendererEvent = SpriteEventDispatcher.RENDERER_EVENTS[type];
            if (rendererEvent !== undefined) {
                info.disposer = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                    info.disposer,
                    this._onRenderer(type, rendererEvent),
                ]);
            }
            return info;
        }
    });
    /**
     * Will stop any bubbling up of the event to element's parents.
     *
     * Should be called in an event handler, e.g.:
     *
     * ```TypeScript
     * element.events.on("pointerdown", function(ev) {
     *   // Do something here and prevent from "pointerdown" bubbling up
     *   // ...
     *   ev.target.events.stopParentDispatch();
     * });
     * ```
     * ```JavaScript
     * element.events.on("pointerdown", function(ev) {
     *   // Do something here and prevent from "pointerdown" bubbling up
     *   // ...
     *   ev.target.events.stopParentDispatch();
     * });
     * ```
     */
    Object.defineProperty(SpriteEventDispatcher.prototype, "stopParentDispatch", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._dispatchParents = false;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(SpriteEventDispatcher.prototype, "dispatchParents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, event) {
            var old = this._dispatchParents;
            this._dispatchParents = true;
            try {
                this.dispatch(type, event);
                if (this._dispatchParents && this._sprite.parent) {
                    this._sprite.parent.events.dispatchParents(type, event);
                }
            }
            finally {
                this._dispatchParents = old;
            }
        }
    });
    Object.defineProperty(SpriteEventDispatcher, "RENDERER_EVENTS", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: {
            "click": function (event) {
                if (this.isEnabled("click") && !this._sprite.isDragging() && !this._sprite._hasMoved(this._makePointerEvent("click", event))) {
                    this.dispatch("click", this._makePointerEvent("click", event));
                }
            },
            "dblclick": function (event) {
                this.dispatchParents("dblclick", this._makePointerEvent("dblclick", event));
            },
            "pointerover": function (event) {
                if (this.isEnabled("pointerover")) {
                    this.dispatch("pointerover", this._makePointerEvent("pointerover", event));
                }
            },
            "pointerout": function (event) {
                if (this.isEnabled("pointerout")) {
                    this.dispatch("pointerout", this._makePointerEvent("pointerout", event));
                }
            },
            "pointerdown": function (event) {
                this.dispatchParents("pointerdown", this._makePointerEvent("pointerdown", event));
            },
            "pointerup": function (event) {
                if (this.isEnabled("pointerup")) {
                    this.dispatch("pointerup", this._makePointerEvent("pointerup", event));
                }
            },
            "globalpointerup": function (event) {
                if (this.isEnabled("globalpointerup")) {
                    this.dispatch("globalpointerup", this._makePointerEvent("globalpointerup", event));
                }
            },
            "globalpointermove": function (event) {
                if (this.isEnabled("globalpointermove")) {
                    this.dispatch("globalpointermove", this._makePointerEvent("globalpointermove", event));
                }
            },
            "wheel": function (event) {
                if (this.isEnabled("wheel")) {
                    this.dispatch("wheel", {
                        type: "wheel",
                        target: this._sprite,
                        originalEvent: event.event,
                        point: event.point,
                    });
                }
            },
        }
    });
    return SpriteEventDispatcher;
}(_util_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher));
/**
 * A base class for all visual elements.
 *
 * @important
 */
var Sprite = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Sprite, _super);
    function Sprite() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_adjustedLocalBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { left: 0, right: 0, top: 0, bottom: 0 }
        });
        Object.defineProperty(_this, "_localBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { left: 0, right: 0, top: 0, bottom: 0 }
        });
        Object.defineProperty(_this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_dataItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_templateField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_sizeDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // Will be true only when dragging
        Object.defineProperty(_this, "_isDragging", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // The event when the dragging starts
        Object.defineProperty(_this, "_dragEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // The position when dragging starts
        Object.defineProperty(_this, "_dragPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_isHidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_isShowing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_isHiding", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_isDown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_downPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_downPoints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_toggleDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_dragDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_tooltipDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_hoverDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_focusDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_tooltipMoveDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_tooltipPointerDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(Sprite.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setPrivateRaw("visible", true);
            _super.prototype._afterNew.call(this);
        }
    });
    Object.defineProperty(Sprite.prototype, "_markDirtyKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            _super.prototype._markDirtyKey.call(this, key);
            if (key == "x" || key == "y" || key == "dx" || key == "dy") {
                this.markDirtyBounds();
                this._addPercentagePositionChildren();
                this.markDirtyPosition();
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_markDirtyPrivateKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            _super.prototype._markDirtyPrivateKey.call(this, key);
            if (key == "x" || key == "y") {
                this.markDirtyPosition();
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_removeTemplateField", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._templateField) {
                this._templateField._removeObjectTemplate(this);
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_createEvents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return new SpriteEventDispatcher(this);
        }
    });
    Object.defineProperty(Sprite.prototype, "_processTemplateField", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var template;
            var field = this.get("templateField");
            if (field) {
                var dataItem = this.dataItem;
                if (dataItem) {
                    var context = dataItem.dataContext;
                    if (context) {
                        template = context[field];
                        if (!(template instanceof _util_Template__WEBPACK_IMPORTED_MODULE_3__.Template) && template) {
                            template = _util_Template__WEBPACK_IMPORTED_MODULE_3__.Template["new"](template);
                        }
                    }
                }
            }
            if (this._templateField !== template) {
                this._removeTemplateField();
                this._templateField = template;
                if (template) {
                    template._setObjectTemplate(this);
                }
                this._applyTemplates();
            }
        }
    });
    // TODO change this to run before the element is added to the parent, so that way
    //      it doesn't need to apply the themes twice
    Object.defineProperty(Sprite.prototype, "_setDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var oldDataItem = this._dataItem;
            this._dataItem = dataItem;
            this._processTemplateField();
            var eventType = "dataitemchanged";
            if (this.events.isEnabled(eventType)) {
                this.events.dispatch(eventType, {
                    type: eventType,
                    target: this,
                    oldDataItem: oldDataItem,
                    newDataItem: dataItem
                });
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "dataItem", {
        /**
         * A [[DataItem]] used for this element.
         *
         * @return DataItem
         */
        get: function () {
            if (this._dataItem) {
                return this._dataItem;
            }
            else {
                var parent_1 = this._parent;
                while (parent_1) {
                    if (parent_1._dataItem) {
                        return parent_1._dataItem;
                    }
                    else {
                        parent_1 = parent_1._parent;
                    }
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "_addPercentageSizeChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var parent = this.parent;
            if (parent) {
                if (this.get("width") instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent || this.get("height") instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                    _util_Array__WEBPACK_IMPORTED_MODULE_5__.pushOne(parent._percentageSizeChildren, this);
                }
                else {
                    _util_Array__WEBPACK_IMPORTED_MODULE_5__.removeFirst(parent._percentageSizeChildren, this);
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_addPercentagePositionChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var parent = this.parent;
            if (parent) {
                if (this.get("x") instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent || this.get("y") instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                    _util_Array__WEBPACK_IMPORTED_MODULE_5__.pushOne(parent._percentagePositionChildren, this);
                }
                else {
                    _util_Array__WEBPACK_IMPORTED_MODULE_5__.removeFirst(parent._percentagePositionChildren, this);
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirtyPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._root._addDirtyPosition(this);
        }
    });
    Object.defineProperty(Sprite.prototype, "updatePivotPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var bounds = this._localBounds;
            if (bounds) {
                var centerX = this.get("centerX");
                if (centerX != null) {
                    this._display.pivot.x = bounds.left + _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(centerX, bounds.right - bounds.left);
                }
                var centerY = this.get("centerY");
                if (centerY != null) {
                    this._display.pivot.y = bounds.top + _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(centerY, bounds.bottom - bounds.top);
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("tooltip")) {
                var previous = this._prevSettings.tooltip;
                if (previous) {
                    previous.dispose();
                }
            }
            if (this.isDirty("layer")) {
                this._display.setLayer(this.get("layer"));
                this.markDirtyLayer();
            }
            if (this.isDirty("tooltipPosition")) {
                var tooltipMoveDp = this._tooltipMoveDp;
                if (tooltipMoveDp) {
                    tooltipMoveDp.dispose();
                    this._tooltipMoveDp = undefined;
                }
                var tooltipPointerDp = this._tooltipPointerDp;
                if (tooltipPointerDp) {
                    tooltipPointerDp.dispose();
                    this._tooltipPointerDp = undefined;
                }
                if (this.get("tooltipPosition") == "pointer") {
                    this._tooltipPointerDp = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                        this.events.on("pointerover", function () {
                            _this._tooltipMoveDp = _this.events.on("globalpointermove", function (e) {
                                _this.showTooltip(e.point);
                            });
                        }),
                        this.events.on("pointerout", function () {
                            var tooltipMoveDp = _this._tooltipMoveDp;
                            if (tooltipMoveDp) {
                                tooltipMoveDp.dispose();
                                _this._tooltipMoveDp = undefined;
                            }
                        })
                    ]);
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._changed.call(this);
            var display = this._display;
            var events = this.events;
            if (this.isDirty("draggable")) {
                var draggable = this.get("draggable");
                if (draggable) {
                    this.set("interactive", true);
                    this._dragDp = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                        events.on("pointerdown", function (ev) {
                            _this.dragStart(ev);
                        }),
                        events.on("globalpointermove", function (ev) {
                            _this.dragMove(ev);
                        }),
                        events.on("globalpointerup", function (ev) {
                            _this.dragStop(ev);
                        })
                    ]);
                }
                else {
                    if (this._dragDp) {
                        this._dragDp.dispose();
                        this._dragDp = undefined;
                    }
                }
            }
            if (this.isDirty("tooltipText")) {
                var tooltipText = this.get("tooltipText");
                if (tooltipText) {
                    this._tooltipDp = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                        events.on("pointerover", function () {
                            _this.showTooltip();
                        }),
                        events.on("pointerout", function () {
                            _this.hideTooltip();
                        })
                    ]);
                }
                else {
                    if (this._tooltipDp) {
                        this._tooltipDp.dispose();
                        this._tooltipDp = undefined;
                    }
                }
            }
            if (this.isDirty("toggleKey")) {
                var toggleKey_1 = this.get("toggleKey");
                if (toggleKey_1 && toggleKey_1 != "none") {
                    this._toggleDp = events.on("click", function () {
                        if (!_this._isDragging) {
                            _this.set(toggleKey_1, !_this.get(toggleKey_1));
                        }
                    });
                }
                else {
                    if (this._toggleDp) {
                        this._toggleDp.dispose();
                        this._toggleDp = undefined;
                    }
                }
            }
            if (this.isDirty("active")) {
                if (this.get("active")) {
                    this.states.applyAnimate("active");
                    this.set("ariaChecked", true);
                }
                else {
                    if (!this.isHidden()) {
                        this.states.applyAnimate("default");
                    }
                    this.set("ariaChecked", false);
                }
                this.markDirtyAccessibility();
            }
            if (this.isDirty("disabled")) {
                if (this.get("disabled")) {
                    this.states.applyAnimate("disabled");
                    this.set("ariaChecked", false);
                }
                else {
                    if (!this.isHidden()) {
                        this.states.applyAnimate("default");
                    }
                    this.set("ariaChecked", true);
                }
                this.markDirtyAccessibility();
            }
            if (this.isDirty("opacity")) {
                display.alpha = Math.max(0, this.get("opacity", 1));
            }
            if (this.isDirty("rotation")) {
                this.markDirtyBounds();
                display.angle = this.get("rotation", 0);
            }
            if (this.isDirty("scale")) {
                this.markDirtyBounds();
                display.scale = this.get("scale", 0);
            }
            if (this.isDirty("centerX") || this.isDirty("centerY")) {
                this.markDirtyBounds();
                this.updatePivotPoint();
            }
            if (this.isDirty("visible") || this.isPrivateDirty("visible") || this.isDirty("forceHidden")) {
                if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                    display.visible = false;
                }
                else {
                    display.visible = true;
                }
                this.markDirtyBounds();
                if (this.get("focusable")) {
                    this.markDirtyAccessibility();
                }
            }
            if (this.isDirty("width") || this.isDirty("height")) {
                this.markDirtyBounds();
                this._addPercentageSizeChildren();
                this._sizeDirty = true;
            }
            if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                this.markDirtyBounds();
                this._sizeDirty = true;
            }
            if (this._sizeDirty) {
                this._updateSize();
            }
            if (this.isDirty("wheelable")) {
                var wheelable = this.get("wheelable");
                if (wheelable) {
                    this.set("interactive", true);
                }
                display.wheelable = wheelable ? true : false;
            }
            // Accessibility
            if (this.isDirty("tabindexOrder")) {
                if (this.get("focusable")) {
                    this._root._registerTabindexOrder(this);
                }
                else {
                    this._root._unregisterTabindexOrder(this);
                }
            }
            if (this.isDirty("filter")) {
                //this.markDirtyBounds();
                display.filter = this.get("filter");
            }
            if (this.isDirty("cursorOverStyle")) {
                display.cursorOverStyle = this.get("cursorOverStyle");
            }
            if (this.isDirty("hoverOnFocus")) {
                if (this.get("hoverOnFocus")) {
                    this._focusDp = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                        events.on("focus", function () {
                            // TODO: proper hover, not just tooltip
                            _this.showTooltip();
                        }),
                        events.on("blur", function () {
                            // TODO: proper hover, not just tooltip
                            _this.hideTooltip();
                        })
                    ]);
                }
                else {
                    if (this._focusDp) {
                        this._focusDp.dispose();
                        this._focusDp = undefined;
                    }
                }
            }
            if (this.isDirty("focusable")) {
                if (this.get("focusable")) {
                    this._root._registerTabindexOrder(this);
                }
                else {
                    this._root._unregisterTabindexOrder(this);
                }
                this.markDirtyAccessibility();
            }
            if (this.isDirty("role") || this.isDirty("ariaLive") || this.isDirty("ariaChecked") || this.isDirty("ariaHidden") || this.isDirty("ariaOrientation") || this.isDirty("ariaValueNow") || this.isDirty("ariaValueText") || this.isDirty("ariaLabel")) {
                // display.accessibility.ariaLabel = populateString(this, this.get("ariaLabel", ""));
                // @todo make sure ariaLabel gets populated in Root
                this.markDirtyAccessibility();
            }
            if (this.isDirty("exportable")) {
                display.exportable = this.get("exportable");
            }
            if (this.isDirty("interactive")) {
                var events_1 = this.events;
                if (this.get("interactive")) {
                    this._hoverDp = new _util_Disposer__WEBPACK_IMPORTED_MODULE_1__.MultiDisposer([
                        events_1.on("click", function (ev) {
                            if (_util_Utils__WEBPACK_IMPORTED_MODULE_6__.isTouchEvent(ev.originalEvent)) {
                                if (!_this.getPrivate("touchHovering")) {
                                    _this.setTimeout(function () {
                                        _this._handleOver();
                                        if (_this.get("tooltipText")) {
                                            _this.showTooltip();
                                        }
                                        _this.setPrivateRaw("touchHovering", true);
                                    }, 10);
                                }
                            }
                        }),
                        events_1.on("globalpointerup", function (ev) {
                            if (_util_Utils__WEBPACK_IMPORTED_MODULE_6__.isTouchEvent(ev.originalEvent)) {
                                if (_this.getPrivate("touchHovering")) {
                                    _this._handleOut();
                                    if (_this.get("tooltipText")) {
                                        _this.hideTooltip();
                                    }
                                }
                                _this.setPrivateRaw("touchHovering", false);
                            }
                            if (_this._isDown) {
                                _this._handleUp(ev);
                            }
                            //this._isDown = false;
                        }),
                        events_1.on("pointerover", function () {
                            _this._handleOver();
                        }),
                        events_1.on("pointerout", function () {
                            _this._handleOut();
                        }),
                        events_1.on("pointerdown", function (e) {
                            _this._handleDown(e);
                        })
                    ]);
                }
                else {
                    if (this._hoverDp) {
                        this._hoverDp.dispose();
                        this._hoverDp = undefined;
                    }
                }
            }
        }
    });
    /**
     * @ignore
     * @todo should this be user-accessible?
     */
    Object.defineProperty(Sprite.prototype, "dragStart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            this._dragEvent = e;
            this.events.stopParentDispatch();
        }
    });
    /**
     * @ignore
     * @todo should this be user-accessible?
     */
    Object.defineProperty(Sprite.prototype, "dragStop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            this._dragEvent = undefined;
            this._dragPoint = undefined;
            this.events.stopParentDispatch();
            if (this._isDragging) {
                this._isDragging = false;
                var type = "dragstop";
                if (this.events.isEnabled(type)) {
                    this.events.dispatch(type, {
                        type: type,
                        target: this,
                        originalEvent: e.originalEvent,
                        point: e.point,
                        simulated: e.simulated,
                    });
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_handleOver", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this.isHidden()) {
                if (this.get("active") && this.states.lookup("hoverActive")) {
                    this.states.applyAnimate("hoverActive");
                }
                else if (this.get("disabled") && this.states.lookup("hoverDisabled")) {
                    this.states.applyAnimate("hoverDisabled");
                }
                else {
                    this.states.applyAnimate("hover");
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_handleOut", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this.isHidden()) {
                if (this.get("active") && this.states.lookup("active")) {
                    this.states.applyAnimate("active");
                }
                else if (this.get("disabled") && this.states.lookup("disabled")) {
                    this.states.applyAnimate("disabled");
                }
                else {
                    if (this.states.lookup("hover") || this.states.lookup("hoverActive")) {
                        this.states.applyAnimate("default");
                    }
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_handleUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            if (!this.isHidden()) {
                if (this.get("active") && this.states.lookup("active")) {
                    this.states.applyAnimate("active");
                }
                else if (this.get("disabled") && this.states.lookup("disabled")) {
                    this.states.applyAnimate("disabled");
                }
                else if (this.states.lookup("down")) {
                    if (this.isHover()) {
                        this.states.applyAnimate("hover");
                    }
                    else {
                        this.states.applyAnimate("default");
                    }
                }
                // @todo remove this once migrated to _downPoints
                this._downPoint = undefined;
                var pointerId = _util_Utils__WEBPACK_IMPORTED_MODULE_6__.getPointerId(e.originalEvent);
                delete this._downPoints[pointerId];
                if (_util_Object__WEBPACK_IMPORTED_MODULE_7__.keys(this._downPoints).length == 0) {
                    this._isDown = false;
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_hasMoved", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            // @todo remove this once migrated to _downPoints
            // if (this._downPoint) {
            // 	const x = Math.abs(this._downPoint.x - e.point.x);
            // 	const y = Math.abs(this._downPoint.y - e.point.y);
            // 	return (x > 5) || (y > 5);
            // }
            var pointerId = _util_Utils__WEBPACK_IMPORTED_MODULE_6__.getPointerId(e.originalEvent);
            var downPoint = this._downPoints[pointerId];
            if (downPoint) {
                var x = Math.abs(downPoint.x - e.point.x);
                var y = Math.abs(downPoint.y - e.point.y);
                return (x > 5) || (y > 5);
            }
            return false;
        }
    });
    Object.defineProperty(Sprite.prototype, "_handleDown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            if (!this.isHidden() && !this.get("disabled")) {
                if (this.states.lookup("down")) {
                    this.states.applyAnimate("down");
                }
                this._downPoint = {
                    x: e.point.x,
                    y: e.point.y
                };
                // @todo remove this once migrated to _downPoints
                this._isDown = true;
                var pointerId = _util_Utils__WEBPACK_IMPORTED_MODULE_6__.getPointerId(e.originalEvent);
                this._downPoints[pointerId] = {
                    x: e.point.x,
                    y: e.point.y
                };
            }
        }
    });
    /**
     * @ignore
     * @todo should this be user-accessible?
     */
    Object.defineProperty(Sprite.prototype, "dragMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e) {
            var dragEvent = this._dragEvent;
            if (dragEvent) {
                var x = e.point.x - dragEvent.point.x;
                var y = e.point.y - dragEvent.point.y;
                var events = this.events;
                if (dragEvent.simulated && !this._isDragging) {
                    this._isDragging = true;
                    this._dragEvent = e;
                    this._dragPoint = {
                        x: this.x(),
                        y: this.y()
                    };
                    var type = "dragstart";
                    if (events.isEnabled(type)) {
                        events.dispatch(type, {
                            type: type,
                            target: this,
                            originalEvent: e.originalEvent,
                            point: e.point,
                            simulated: e.simulated,
                        });
                    }
                }
                if (this._isDragging) {
                    var dragPoint = this._dragPoint;
                    this.set("x", dragPoint.x + x);
                    this.set("y", dragPoint.y + y);
                    var type = "dragged";
                    if (events.isEnabled(type)) {
                        events.dispatch(type, {
                            type: type,
                            target: this,
                            originalEvent: e.originalEvent,
                            point: e.point,
                            simulated: e.simulated,
                        });
                    }
                }
                else {
                    if (Math.hypot(x, y) > 5) {
                        this._isDragging = true;
                        this._dragEvent = e;
                        this._dragPoint = {
                            x: this.x(),
                            y: this.y()
                        };
                        var type = "dragstart";
                        if (events.isEnabled(type)) {
                            events.dispatch(type, {
                                type: type,
                                target: this,
                                originalEvent: e.originalEvent,
                                point: e.point,
                                simulated: e.simulated
                            });
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_updateSize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Sprite.prototype, "_getBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._localBounds = this._display.getLocalBounds();
        }
    });
    /**
     * Returns depth (how deep in the hierachy of the content tree) of this
     * element.
     *
     * @return Depth
     */
    Object.defineProperty(Sprite.prototype, "depth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var self = this.parent;
            var depth = 0;
            while (true) {
                if (self) {
                    ++depth;
                    self = self.parent;
                }
                else {
                    return depth;
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirtySize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._sizeDirty = true;
            this.markDirty();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirtyBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var display = this._display;
            if (this.get("isMeasured")) {
                this._root._addDirtyBounds(this);
                display.isMeasured = true;
                display.invalidateBounds();
                var parent_2 = this.parent;
                if (parent_2 && this.get("position") != "absolute") {
                    if (parent_2.get("width") == null || parent_2.get("height") == null || parent_2.get("layout")) {
                        parent_2.markDirtyBounds();
                    }
                }
                if (this.get("focusable") && this.isFocus()) {
                    this.markDirtyAccessibility();
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirtyAccessibility", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            //if (this._root.focused(this)) {
            this._root._invalidateAccessibility(this);
            //}
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirtyLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            //this._display.markDirtyLayer(this.isDirty("opacity") || this.isDirty("visible")); https://codepen.io/team/amcharts/pen/gOWZPmP <- problems
            this._display.markDirtyLayer(true);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "markDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.markDirty.call(this);
            this.markDirtyLayer();
        }
    });
    Object.defineProperty(Sprite.prototype, "_updateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var oldBounds = this._adjustedLocalBounds;
            var newBounds;
            // if display.visible == false, it still returns bounds
            if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                newBounds = {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                };
                this._localBounds = newBounds;
                this._adjustedLocalBounds = newBounds;
            }
            else {
                this._getBounds();
                this._fixMinBounds(this._localBounds);
                this.updatePivotPoint();
                this._adjustedLocalBounds = this._display.getAdjustedBounds(this._localBounds);
                newBounds = this._adjustedLocalBounds;
            }
            if (!oldBounds || (oldBounds.left !== newBounds.left || oldBounds.top !== newBounds.top || oldBounds.right !== newBounds.right || oldBounds.bottom !== newBounds.bottom)) {
                var eventType = "boundschanged";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, { type: eventType, target: this });
                }
                if (this.parent) {
                    this.parent.markDirty();
                    this.parent.markDirtyBounds();
                }
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_fixMinBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            var minWidth = this.get("minWidth");
            var minHeight = this.get("minHeight");
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(minWidth)) {
                if (bounds.right - bounds.left < minWidth) {
                    bounds.right = bounds.left + minWidth;
                }
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(minHeight)) {
                if (bounds.bottom - bounds.top < minHeight) {
                    bounds.bottom = bounds.top + minHeight;
                }
            }
            var privateWidth = this.getPrivate("width");
            var privateHeight = this.getPrivate("height");
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(privateWidth)) {
                bounds.right = bounds.left + privateWidth;
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(privateHeight)) {
                bounds.bottom = bounds.top + privateHeight;
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_removeParent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parent) {
            if (parent) {
                parent.children.removeValue(this);
                _util_Array__WEBPACK_IMPORTED_MODULE_5__.removeFirst(parent._percentageSizeChildren, this);
                _util_Array__WEBPACK_IMPORTED_MODULE_5__.removeFirst(parent._percentagePositionChildren, this);
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._clearDirty.call(this);
            this._sizeDirty = false;
        }
    });
    /**
     * Simulate hover over element.
     */
    Object.defineProperty(Sprite.prototype, "hover", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.showTooltip();
            this._handleOver();
        }
    });
    /**
     * Simulate unhover over element.
     */
    Object.defineProperty(Sprite.prototype, "unhover", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.hideTooltip();
            this._handleOut();
        }
    });
    /**
     * Shows element's [[Tooltip]].
     */
    Object.defineProperty(Sprite.prototype, "showTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            var tooltip = this.getTooltip();
            var tooltipText = this.get("tooltipText");
            if (tooltipText && tooltip) {
                var tooltipPosition = this.get("tooltipPosition");
                var tooltipTarget = this.getPrivate("tooltipTarget", this);
                if (tooltipPosition == "fixed" || !point) {
                    point = this._display.toGlobal(tooltipTarget._getTooltipPoint());
                }
                tooltip.set("pointTo", point);
                tooltip.set("tooltipTarget", tooltipTarget);
                if (!tooltip.get("x")) {
                    tooltip.set("x", point.x);
                }
                if (!tooltip.get("y")) {
                    tooltip.set("y", point.y);
                }
                tooltip.label.set("text", tooltipText);
                var dataItem = this.dataItem;
                if (dataItem) {
                    tooltip.label._setDataItem(dataItem);
                }
                tooltip.label.text.markDirtyText();
                var promise = tooltip.show();
                this.setPrivateRaw("showingTooltip", true);
                return promise;
            }
        }
    });
    /**
     * Hides element's [[Tooltip]].
     */
    Object.defineProperty(Sprite.prototype, "hideTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var tooltip = this.getTooltip();
            if (tooltip) {
                var promise = tooltip.hide();
                this.setPrivateRaw("showingTooltip", false);
                return promise;
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_getTooltipPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var bounds = this._localBounds;
            if (bounds) {
                var x = 0;
                var y = 0;
                if (!this.get("isMeasured")) {
                    x = _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(this.get("tooltipX", 0), this.width());
                    y = _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(this.get("tooltipY", 0), this.height());
                }
                else {
                    x = bounds.left + _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(this.get("tooltipX", 0), bounds.right - bounds.left);
                    y = bounds.top + _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(this.get("tooltipY", 0), bounds.bottom - bounds.top);
                }
                return { x: x, y: y };
            }
            return { x: 0, y: 0 };
        }
    });
    /**
     * Returns [[Tooltip]] used for this element.
     *
     * @return Tooltip
     */
    Object.defineProperty(Sprite.prototype, "getTooltip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var tooltip = this.get("tooltip");
            if (!tooltip) {
                var parent_3 = this.parent;
                if (parent_3) {
                    return parent_3.getTooltip();
                }
            }
            else {
                return tooltip;
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_updatePosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var parent = this.parent;
            var dx = this.get("dx", 0);
            var dy = this.get("dy", 0);
            var x = this.get("x");
            var _x = this.getPrivate("x");
            var xx = 0;
            var yy = 0;
            var position = this.get("position");
            if (x instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                if (parent) {
                    x = parent.innerWidth() * x.value + parent.get("paddingLeft", 0);
                }
                else {
                    x = 0;
                }
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(x)) {
                xx = x + dx;
            }
            else {
                if (_x != null) {
                    xx = _x;
                }
                else if (parent) {
                    if (position == "relative") {
                        xx = parent.get("paddingLeft", 0) + dx;
                    }
                }
            }
            var y = this.get("y");
            var _y = this.getPrivate("y");
            if (y instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                if (parent) {
                    y = parent.innerHeight() * y.value + parent.get("paddingTop", 0);
                }
                else {
                    y = 0;
                }
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(y)) {
                yy = y + dy;
            }
            else {
                if (_y != null) {
                    yy = _y;
                }
                else if (parent) {
                    if (position == "relative") {
                        yy = parent.get("paddingTop", 0) + dy;
                    }
                }
            }
            var display = this._display;
            if (display.x != xx || display.y != yy) {
                display.invalidateBounds();
                display.x = xx;
                display.y = yy;
                var eventType = "positionchanged";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, { type: eventType, target: this });
                }
            }
            // Update tooltip position together with the Sprite
            if (this.getPrivate("showingTooltip")) {
                this.showTooltip();
            }
        }
    });
    /**
     * Returns element's actual X position in pixels.
     *
     * @return X (px)
     */
    Object.defineProperty(Sprite.prototype, "x", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var x = this.get("x");
            var _x = this.getPrivate("x");
            var parent = this.parent;
            if (parent) {
                if (x instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                    return _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(x, parent.innerWidth()) + parent.get("paddingLeft", 0);
                }
                else {
                    if (!_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(x)) {
                        if (_x != null) {
                            return _x;
                        }
                        else {
                            return parent.get("paddingLeft", this._display.x);
                        }
                    }
                    else {
                        return x;
                    }
                }
            }
            return this._display.x;
        }
    });
    /**
     * Returns element's actual Y position in pixels.
     *
     * @return Y (px)
     */
    Object.defineProperty(Sprite.prototype, "y", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _y = this.getPrivate("y");
            if (_y != null) {
                return _y;
            }
            var y = this.get("y");
            var parent = this.parent;
            if (parent) {
                if (y instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                    return _util_Utils__WEBPACK_IMPORTED_MODULE_6__.relativeToValue(y, parent.innerHeight()) + parent.get("paddingTop", 0);
                }
                else {
                    if (!_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(y)) {
                        if (_y != null) {
                            return _y;
                        }
                        else {
                            return parent.get("paddingTop", this._display.y);
                        }
                    }
                    else {
                        return y;
                    }
                }
            }
            return this._display.y;
        }
    });
    Object.defineProperty(Sprite.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            this._display.dispose();
            this._removeTemplateField();
            this._removeParent(this.parent);
            var tooltip = this.get("tooltip");
            if (tooltip) {
                tooltip.dispose();
            }
            this.markDirty();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "adjustedLocalBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._fixMinBounds(this._adjustedLocalBounds);
            return this._adjustedLocalBounds;
        }
    });
    /**
     * Returns local coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */
    Object.defineProperty(Sprite.prototype, "localBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._localBounds;
        }
    });
    /**
     * Returns adjusted local coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */
    Object.defineProperty(Sprite.prototype, "bounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var bounds = this._adjustedLocalBounds;
            var x = this.x();
            var y = this.y();
            return { left: bounds.left + x, right: bounds.right + x, top: bounds.top + y, bottom: bounds.bottom + y };
        }
    });
    /**
     * Returns global coordinates of the element's bounds.
     *
     * @ignore
     * @return Global bounds
     */
    Object.defineProperty(Sprite.prototype, "globalBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var bounds = this.localBounds();
            var display = this._display;
            var p0 = display.toGlobal({ x: bounds.left, y: bounds.top });
            var p1 = display.toGlobal({ x: bounds.right, y: bounds.top });
            var p2 = display.toGlobal({ x: bounds.right, y: bounds.bottom });
            var p3 = display.toGlobal({ x: bounds.left, y: bounds.bottom });
            return {
                left: Math.min(p0.x, p1.x, p2.x, p3.x),
                top: Math.min(p0.y, p1.y, p2.y, p3.y),
                right: Math.max(p0.x, p1.x, p2.x, p3.x),
                bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
            };
        }
    });
    Object.defineProperty(Sprite.prototype, "_onShow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_duration) {
        }
    });
    Object.defineProperty(Sprite.prototype, "_onHide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_duration) {
        }
    });
    /**
     * Plays initial reveal animation regardless if element is currently hidden
     * or visible.
     *
     * @param   duration  Duration of the animation in milliseconds
     * @param   delay     Delay showing of the element by X milliseconds
     * @return            Promise
     */
    Object.defineProperty(Sprite.prototype, "appear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration, delay) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var _this = this;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.hide(0)];
                        case 1:
                            _a.sent();
                            if (delay) {
                                return [2 /*return*/, new Promise(function (success, _error) {
                                        _this.setTimeout(function () {
                                            success(_this.show(duration));
                                        }, delay);
                                    })];
                            }
                            else {
                                return [2 /*return*/, this.show(duration)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Shows currently hidden element and returns a `Promise` which completes
     * when all showing animations are finished.
     *
     * ```TypeScript
     * series.show().then(function(ev) {
     *   console.log("Series is now fully visible");
     * })
     * ```
     * ```JavaScript
     * series.show().then(function(ev) {
     *   console.log("Series is now fully visible");
     * })
     * ```
     *
     * @return Promise
     */
    Object.defineProperty(Sprite.prototype, "show", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var animations;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this._isShowing) return [3 /*break*/, 2];
                            this._isHidden = false;
                            this._isShowing = true;
                            this._isHiding = false;
                            if (this.states.lookup("default").get("visible")) {
                                this.set("visible", true);
                            }
                            this._onShow(duration);
                            animations = this.states.applyAnimate("default", duration);
                            return [4 /*yield*/, (0,_util_Animation__WEBPACK_IMPORTED_MODULE_9__.waitForAnimations)(animations)];
                        case 1:
                            _a.sent();
                            this._isShowing = false;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Hides the element and returns a `Promise` which completes when all hiding
     * animations are finished.
     *
     * ```TypeScript
     * series.hide().then(function(ev) {
     *   console.log("Series finished hiding");
     * })
     * ```
     * ```JavaScript
     * series.hide().then(function(ev) {
     *   console.log("Series finished hiding");
     * })
     * ```
     *
     * @return Promise
     */
    Object.defineProperty(Sprite.prototype, "hide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
                var state, animations;
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(!this._isHiding && !this._isHidden)) return [3 /*break*/, 2];
                            this._isHiding = true;
                            this._isShowing = false;
                            state = this.states.lookup("hidden");
                            if (!state) {
                                state = this.states.create("hidden", {
                                    "opacity": 0,
                                    "visible": false
                                });
                            }
                            this._isHidden = true;
                            this._onHide(duration);
                            animations = this.states.applyAnimate("hidden", duration);
                            return [4 /*yield*/, (0,_util_Animation__WEBPACK_IMPORTED_MODULE_9__.waitForAnimations)(animations)];
                        case 1:
                            _a.sent();
                            this._isHiding = false;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        }
    });
    /**
     * Returns `true` if this element is currently hidden.
     *
     * @return Is hidden?
     */
    Object.defineProperty(Sprite.prototype, "isHidden", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isHidden;
        }
    });
    /**
     * Returns `true` if this element is currently animating to a default state.
     *
     * @return Is showing?
     */
    Object.defineProperty(Sprite.prototype, "isShowing", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isShowing;
        }
    });
    /**
     * Returns `true` if this element is currently animating to a hidden state.
     *
     * @return Is hiding?
     */
    Object.defineProperty(Sprite.prototype, "isHiding", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isHiding;
        }
    });
    /**
     * Returns `true` if this element is currently hovered by a pointer.
     *
     * @return Is hovered?
     */
    Object.defineProperty(Sprite.prototype, "isHover", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._display.hovering();
        }
    });
    /**
     * Returns `true` if this element does currently have focus.
     *
     * @return Is focused?
     */
    Object.defineProperty(Sprite.prototype, "isFocus", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._root.focused(this);
        }
    });
    /**
     * Returns `true` if this element is currently being dragged.
     *
     * @return Is dragged?
     */
    Object.defineProperty(Sprite.prototype, "isDragging", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isDragging;
        }
    });
    /**
     * Returns width of this element in pixels.
     *
     * @return Width (px)
     */
    Object.defineProperty(Sprite.prototype, "width", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var width = this.get("width");
            var maxWidth = this.get("maxWidth");
            var minWidth = this.get("minWidth");
            var privateWidth = this.getPrivate("width");
            var w = 0;
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(privateWidth)) {
                w = privateWidth;
            }
            else {
                if (width == null) {
                    if (this._adjustedLocalBounds) {
                        w = this._adjustedLocalBounds.right - this._adjustedLocalBounds.left;
                    }
                }
                else {
                    if (width instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                        var parent_4 = this.parent;
                        if (parent_4) {
                            w = parent_4.innerWidth() * width.value;
                        }
                        else {
                            w = this._root.width() * width.value;
                        }
                    }
                    else if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(width)) {
                        w = width;
                    }
                }
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(minWidth)) {
                w = Math.max(minWidth, w);
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(maxWidth)) {
                w = Math.min(maxWidth, w);
            }
            return w;
        }
    });
    /**
     * Returns maximum allowed width of this element in pixels.
     *
     * @return Maximum width (px)
     */
    Object.defineProperty(Sprite.prototype, "maxWidth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var maxWidth = this.get("maxWidth");
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(maxWidth)) {
                return maxWidth;
            }
            else {
                var width = this.get("width");
                if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(width)) {
                    return width;
                }
            }
            var parent = this.parent;
            if (parent) {
                return parent.innerWidth();
            }
            return this._root.width();
        }
    });
    /**
     * Returns maximum allowed height of this element in pixels.
     *
     * @return Maximum height (px)
     */
    Object.defineProperty(Sprite.prototype, "maxHeight", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var maxHeight = this.get("maxHeight");
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(maxHeight)) {
                return maxHeight;
            }
            else {
                var height = this.get("height");
                if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(height)) {
                    return height;
                }
            }
            var parent = this.parent;
            if (parent) {
                return parent.innerHeight();
            }
            return this._root.height();
        }
    });
    /**
     * Returns height of this element in pixels.
     *
     * @return Height (px)
     */
    Object.defineProperty(Sprite.prototype, "height", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var height = this.get("height");
            var maxHeight = this.get("maxHeight");
            var minHeight = this.get("minHeight");
            var privateHeight = this.getPrivate("height");
            var h = 0;
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(privateHeight)) {
                h = privateHeight;
            }
            else {
                if (height == null) {
                    if (this._adjustedLocalBounds) {
                        h = this._adjustedLocalBounds.bottom - this._adjustedLocalBounds.top;
                    }
                }
                else {
                    if (height instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_4__.Percent) {
                        var parent_5 = this.parent;
                        if (parent_5) {
                            h = parent_5.innerHeight() * height.value;
                        }
                        else {
                            h = this._root.height() * height.value;
                        }
                    }
                    else if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(height)) {
                        h = height;
                    }
                }
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(minHeight)) {
                h = Math.max(minHeight, h);
            }
            if (_util_Type__WEBPACK_IMPORTED_MODULE_8__.isNumber(maxHeight)) {
                h = Math.min(maxHeight, h);
            }
            return h;
        }
    });
    Object.defineProperty(Sprite.prototype, "_findStaticTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            // templateField overrides template
            if (this._templateField && f(this._templateField)) {
                return this._templateField;
            }
            return _super.prototype._findStaticTemplate.call(this, f);
        }
    });
    Object.defineProperty(Sprite.prototype, "_walkParents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            if (this._parent) {
                this._walkParent(f);
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_walkParent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            if (this._parent) {
                this._parent._walkParent(f);
            }
            f(this);
        }
    });
    Object.defineProperty(Sprite.prototype, "parent", {
        /**
         * Parent [[Container]] of this element.
         *
         * @return Parent container
         */
        get: function () {
            return this._parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "_setParent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parent, updateChildren) {
            if (updateChildren === void 0) { updateChildren = false; }
            var prevParent = this._parent;
            if (parent !== prevParent) {
                this.markDirtyBounds();
                parent.markDirty();
                this._parent = parent;
                if (updateChildren) {
                    this._removeParent(prevParent);
                    if (parent) {
                        this._addPercentageSizeChildren();
                        this._addPercentagePositionChildren();
                    }
                }
                this.markDirtyPosition();
                this._applyThemes();
            }
        }
    });
    /**
     * Returns an instance of [[NumberFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return NumberFormatter instace
     */
    Object.defineProperty(Sprite.prototype, "getNumberFormatter", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.get("numberFormatter", this._root.numberFormatter);
        }
    });
    /**
     * Returns an instance of [[DateFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return DateFormatter instace
     */
    Object.defineProperty(Sprite.prototype, "getDateFormatter", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.get("dateFormatter", this._root.dateFormatter);
        }
    });
    /**
     * Returns an instance of [[DurationFormatter]] used in this element.
     *
     * If this element does not have it set, global one form [[Root]] is used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
     * @return DurationFormatter instace
     */
    Object.defineProperty(Sprite.prototype, "getDurationFormatter", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.get("durationFormatter", this._root.durationFormatter);
        }
    });
    /**
     * Converts X/Y coordinate within this element to a global coordinate.
     *
     * @param  point  Local coordinate
     * @return        Global coordinate
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "toGlobal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return this._display.toGlobal(point);
        }
    });
    /**
     * Converts global X/Y coordinate to a coordinate within this element.
     *
     * @param  point  Global coordinate
     * @return        Local coordinate
     * @ignore
     */
    Object.defineProperty(Sprite.prototype, "toLocal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return this._display.toLocal(point);
        }
    });
    Object.defineProperty(Sprite.prototype, "_getDownPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var id = this._getDownPointId();
            if (id) {
                return this._downPoints[id];
            }
        }
    });
    Object.defineProperty(Sprite.prototype, "_getDownPointId", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._downPoints) {
                return _util_Object__WEBPACK_IMPORTED_MODULE_7__.keysOrdered(this._downPoints, function (a, b) {
                    if (a > b) {
                        return 1;
                    }
                    if (a < b) {
                        return -1;
                    }
                    return 0;
                })[0];
            }
        }
    });
    /**
     * Moves sprite to the end of the parent's children array.
     *
     * Depending on `layout` setting of the parten container, it may effect the
     * positioning or overlapping order of the elements.
     */
    Object.defineProperty(Sprite.prototype, "toFront", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var parent = this.parent;
            if (parent) {
                parent.children.moveValue(this, parent.children.length - 1);
            }
        }
    });
    /**
     * Moves sprite to the beginning of the parent's children array.
     *
     * Depending on `layout` setting of the parten container, it may effect the
     * positioning or overlapping order of the elements.
     */
    Object.defineProperty(Sprite.prototype, "toBack", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var parent = this.parent;
            if (parent) {
                parent.children.moveValue(this, 0);
            }
        }
    });
    Object.defineProperty(Sprite, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Sprite"
    });
    Object.defineProperty(Sprite, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _util_Entity__WEBPACK_IMPORTED_MODULE_10__.Entity.classNames.concat([Sprite.className])
    });
    return Sprite;
}(_util_Entity__WEBPACK_IMPORTED_MODULE_10__.Entity));

//# sourceMappingURL=Sprite.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Text.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Text.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Text": () => (/* binding */ Text)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sprite */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js");
/* harmony import */ var _util_PopulateString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/PopulateString */ "./node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");




/**
 * @ignore Text is an internal class. Use Label instead.
 */
var Text = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Text, _super);
    function Text() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "textStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._root._renderer.makeTextStyle()
        });
        Object.defineProperty(_this, "_display", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._root._renderer.makeText("", _this.textStyle)
        });
        Object.defineProperty(_this, "_textStyles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "textAlign",
                "fontFamily",
                "fontSize",
                "fontStyle",
                "fontWeight",
                "fontStyle",
                "fontVariant",
                "shadowColor",
                "shadowBlur",
                "shadowOffsetX",
                "shadowOffsetY",
                "shadowOpacity",
                // "leading",
                // "letterSpacing",
                "lineHeight",
                "baselineRatio",
                //"padding",
                // "stroke",
                // "strokeThickness",
                // "trim",
                // "wordWrap",
                "direction",
                "textBaseline",
                "oversizedBehavior",
                "breakWords",
                "ellipsis",
                "minScale"
            ]
        });
        Object.defineProperty(_this, "_originalScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(Text.prototype, "_updateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this.get("text")) {
                var newBounds = {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                };
                this._adjustedLocalBounds = newBounds;
            }
            else {
                _super.prototype._updateBounds.call(this);
            }
        }
    });
    Object.defineProperty(Text.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._changed.call(this);
            this._display.clear();
            var textStyle = this.textStyle;
            if (this.isDirty("opacity")) {
                var opacity = this.get("opacity", 1);
                this._display.alpha = opacity;
            }
            if (this.isDirty("text") || this.isDirty("populateText")) {
                this._display.text = this._getText();
                this.markDirtyBounds();
                if (this.get("role") == "tooltip") {
                    this._root.updateTooltip(this);
                }
            }
            if (this.isDirty("width")) {
                textStyle.wordWrapWidth = this.width();
                this.markDirtyBounds();
            }
            if (this.isDirty("oversizedBehavior")) {
                textStyle.oversizedBehavior = this.get("oversizedBehavior", "none");
                this.markDirtyBounds();
            }
            if (this.isDirty("breakWords")) {
                textStyle.breakWords = this.get("breakWords", false);
                this.markDirtyBounds();
            }
            if (this.isDirty("ellipsis")) {
                textStyle.ellipsis = this.get("ellipsis");
                this.markDirtyBounds();
            }
            if (this.isDirty("ignoreFormatting")) {
                textStyle.ignoreFormatting = this.get("ignoreFormatting", false);
                this.markDirtyBounds();
            }
            if (this.isDirty("minScale")) {
                textStyle.minScale = this.get("minScale", 0);
                this.markDirtyBounds();
            }
            if (this.isDirty("fill")) {
                var fill = this.get("fill");
                if (fill) {
                    textStyle.fill = fill;
                }
            }
            if (this.isDirty("maxWidth")) {
                textStyle.maxWidth = this.get("maxWidth");
                this.markDirtyBounds();
            }
            if (this.isDirty("maxHeight")) {
                textStyle.maxHeight = this.get("maxHeight");
                this.markDirtyBounds();
            }
            _util_Array__WEBPACK_IMPORTED_MODULE_1__.each(this._textStyles, function (styleName) {
                if (_this._dirty[styleName]) {
                    textStyle[styleName] = _this.get(styleName);
                    _this.markDirtyBounds();
                }
            });
            textStyle["fontSize"] = this.get("fontSize");
            textStyle["fontFamily"] = this.get("fontFamily");
            this._display.style = textStyle;
            if (this.isDirty("role") && this.get("role") == "tooltip") {
                this._root.updateTooltip(this);
            }
        }
    });
    Object.defineProperty(Text.prototype, "_getText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var text = this.get("text", "");
            return this.get("populateText") ? (0,_util_PopulateString__WEBPACK_IMPORTED_MODULE_2__.populateString)(this, text) : text;
        }
    });
    Object.defineProperty(Text.prototype, "markDirtyText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._display.text = this._getText();
            if (this.get("role") == "tooltip") {
                this._root.updateTooltip(this);
            }
            this.markDirtyBounds();
            this.markDirty();
        }
    });
    Object.defineProperty(Text.prototype, "_setDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype._setDataItem.call(this, dataItem);
            if (this.get("populateText")) {
                this.markDirtyText();
            }
        }
    });
    Object.defineProperty(Text, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Text"
    });
    Object.defineProperty(Text, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Sprite__WEBPACK_IMPORTED_MODULE_3__.Sprite.classNames.concat([Text.className])
    });
    return Text;
}(_Sprite__WEBPACK_IMPORTED_MODULE_3__.Sprite));

//# sourceMappingURL=Text.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tick": () => (/* binding */ Tick)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Line */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Line.js");


/**
 * Draws a tick element (mostly used on axes).
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
 */
var Tick = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Tick, _super);
    function Tick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Tick, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Tick"
    });
    Object.defineProperty(Tick, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Line__WEBPACK_IMPORTED_MODULE_1__.Line.classNames.concat([Tick.className])
    });
    return Tick;
}(_Line__WEBPACK_IMPORTED_MODULE_1__.Line));

//# sourceMappingURL=Tick.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tooltip": () => (/* binding */ Tooltip)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _render_Label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/Label */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js");
/* harmony import */ var _render_PointedRectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/PointedRectangle */ "./node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js");
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Container */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js");
/* harmony import */ var _util_Math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _util_Color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");









/**
 * Creates a tooltip.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/} for more info
 * @important
 */
var Tooltip = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Tooltip, _super);
    function Tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_arrangeDisposer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_fx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_fy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_fillDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_strokeDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_labelDp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        return _this;
    }
    Object.defineProperty(Tooltip.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._settings.themeTags = _util_Utils__WEBPACK_IMPORTED_MODULE_1__.mergeTags(this._settings.themeTags, ["tooltip"]);
            _super.prototype._afterNew.call(this);
            this.set("background", _render_PointedRectangle__WEBPACK_IMPORTED_MODULE_2__.PointedRectangle["new"](this._root, {
                themeTags: ["tooltip", "background"]
            }));
            this._label = this.children.push(_render_Label__WEBPACK_IMPORTED_MODULE_3__.Label["new"](this._root, {}));
            this._disposers.push(this._label.events.on("boundschanged", function () {
                _this._updateBackground();
            }));
            this.on("bounds", function () {
                _this._updateBackground();
            });
            this._updateTextColor();
            this._root.tooltipContainer.children.push(this);
            this.hide(0);
            this._root._tooltips.push(this);
        }
    });
    Object.defineProperty(Tooltip.prototype, "label", {
        /**
         * A [[Label]] element for the tooltip.
         *
         * @readonly
         * @return Label
         */
        get: function () {
            return this._label;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Permanently disposes the tooltip.
     */
    Object.defineProperty(Tooltip.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.dispose.call(this);
            _util_Array__WEBPACK_IMPORTED_MODULE_4__.remove(this._root._tooltips, this);
        }
    });
    Object.defineProperty(Tooltip.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            var labelText = this.get("labelText");
            if (labelText != null) {
                this.label.set("text", this.get("labelText"));
            }
        }
    });
    Object.defineProperty(Tooltip.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._changed.call(this);
            if (this.isDirty("pointTo")) {
                // can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)
                this._updateBackground();
            }
            if (this.isDirty("tooltipTarget")) {
                this.updateBackgroundColor();
            }
        }
    });
    Object.defineProperty(Tooltip.prototype, "_onShow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._onShow.call(this);
            this.updateBackgroundColor();
        }
    });
    Object.defineProperty(Tooltip.prototype, "updateBackgroundColor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var tooltipTarget = this.get("tooltipTarget");
            var background = this.get("background");
            var fill;
            var stroke;
            if (tooltipTarget && background) {
                fill = tooltipTarget.get("fill");
                stroke = tooltipTarget.get("stroke");
                if (fill == null) {
                    fill = stroke;
                }
                if (this.get("getFillFromSprite")) {
                    if (this._fillDp) {
                        this._fillDp.dispose();
                    }
                    if (fill != null) {
                        background.set("fill", fill);
                    }
                    this._fillDp = tooltipTarget.on("fill", function (fill) {
                        if (fill != null) {
                            background.set("fill", fill);
                            _this._updateTextColor(fill);
                        }
                    });
                }
                if (this.get("getStrokeFromSprite")) {
                    if (this._strokeDp) {
                        this._strokeDp.dispose();
                    }
                    if (fill != null) {
                        background.set("stroke", fill);
                    }
                    this._strokeDp = tooltipTarget.on("fill", function (fill) {
                        if (fill != null) {
                            background.set("stroke", fill);
                        }
                    });
                }
                if (this.get("getLabelFillFromSprite")) {
                    if (this._labelDp) {
                        this._labelDp.dispose();
                    }
                    if (fill != null) {
                        this.label.set("fill", fill);
                    }
                    this._labelDp = tooltipTarget.on("fill", function (fill) {
                        if (fill != null) {
                            _this.label.set("fill", fill);
                        }
                    });
                }
            }
            this._updateTextColor(fill);
        }
    });
    Object.defineProperty(Tooltip.prototype, "_updateTextColor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fill) {
            if (this.get("autoTextColor")) {
                if (fill == null) {
                    fill = this.get("background").get("fill");
                }
                if (fill == null) {
                    fill = this._root.interfaceColors.get("background");
                }
                if (fill instanceof _util_Color__WEBPACK_IMPORTED_MODULE_5__.Color) {
                    this.label.set("fill", _util_Color__WEBPACK_IMPORTED_MODULE_5__.Color.alternative(fill, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text")));
                }
            }
        }
    });
    Object.defineProperty(Tooltip.prototype, "_updateBackground", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.updateBackground.call(this);
            var parent = this._root.container;
            if (parent) {
                var cw = 0.5;
                var ch = 0.5;
                var centerX = this.get("centerX");
                if (centerX instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_6__.Percent) {
                    cw = centerX.value;
                }
                var centerY = this.get("centerY");
                if (centerY instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_6__.Percent) {
                    ch = centerY.value;
                }
                var parentW = parent.width();
                var parentH = parent.height();
                var bounds = this.get("bounds", { left: 0, top: 0, right: parentW, bottom: parentH });
                this._updateBounds();
                var w = this.width();
                var h = this.height();
                // use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens
                if (w === 0) {
                    w = this._w;
                }
                if (h === 0) {
                    h = this._h;
                }
                var pointTo = this.get("pointTo", { x: parentW / 2, y: parentH / 2 });
                var x = pointTo.x;
                var y = pointTo.y;
                var pointerOrientation = this.get("pointerOrientation");
                var background = this.get("background");
                var pointerLength = 0;
                if (background instanceof _render_PointedRectangle__WEBPACK_IMPORTED_MODULE_2__.PointedRectangle) {
                    pointerLength = background.get("pointerLength", 0);
                }
                var pointerX = 0;
                var pointerY = 0;
                var boundsW = bounds.right - bounds.left;
                var boundsH = bounds.bottom - bounds.top;
                // horizontal
                if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
                    if (pointerOrientation == "horizontal") {
                        if (x > bounds.left + boundsW / 2) {
                            x -= (w * (1 - cw) + pointerLength);
                        }
                        else {
                            x += (w * cw + pointerLength);
                        }
                    }
                    else if (pointerOrientation == "left") {
                        x += (w * (1 - cw) + pointerLength);
                    }
                    else {
                        x -= (w * cw + pointerLength);
                    }
                }
                // vertical pointer
                else {
                    if (pointerOrientation == "vertical") {
                        if (y > bounds.top + h / 2 + pointerLength) {
                            y -= (h * (1 - ch) + pointerLength);
                        }
                        else {
                            y += (h * ch + pointerLength);
                        }
                    }
                    else if (pointerOrientation == "down") {
                        y -= (h * (1 - ch) + pointerLength);
                    }
                    else {
                        y += (h * ch + pointerLength);
                    }
                }
                x = _util_Math__WEBPACK_IMPORTED_MODULE_7__.fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw));
                y = _util_Math__WEBPACK_IMPORTED_MODULE_7__.fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch));
                pointerX = pointTo.x - x + w * cw;
                pointerY = pointTo.y - y + h * ch;
                this._fx = x;
                this._fy = y;
                var animationDuration = this.get("animationDuration", 0);
                if (animationDuration > 0 && this.get("visible") && this.get("opacity") > 0.1) {
                    var animationEasing = this.get("animationEasing");
                    this.animate({ key: "x", to: x, duration: animationDuration, easing: animationEasing });
                    this.animate({ key: "y", to: y, duration: animationDuration, easing: animationEasing });
                }
                else {
                    this.set("x", x);
                    this.set("y", y);
                }
                if (background instanceof _render_PointedRectangle__WEBPACK_IMPORTED_MODULE_2__.PointedRectangle) {
                    background.set("pointerX", pointerX);
                    background.set("pointerY", pointerY);
                }
                if (w > 0) {
                    this._w = w;
                }
                if (h > 0) {
                    this._h = h;
                }
            }
        }
    });
    Object.defineProperty(Tooltip, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Tooltip"
    });
    Object.defineProperty(Tooltip, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Container__WEBPACK_IMPORTED_MODULE_8__.Container.classNames.concat([Tooltip.className])
    });
    return Tooltip;
}(_Container__WEBPACK_IMPORTED_MODULE_8__.Container));

//# sourceMappingURL=Tooltip.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerticalLayout": () => (/* binding */ VerticalLayout)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Layout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");




/**
 * A vertical children layout for [[Container]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
 */
var VerticalLayout = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VerticalLayout, _super);
    function VerticalLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(VerticalLayout.prototype, "updateContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (container) {
            var paddingTop = container.get("paddingTop", 0);
            var availableHeight = container.innerHeight();
            var totalPercent = 0;
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var childHeight = child.get("height");
                    if (childHeight instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_1__.Percent) {
                        totalPercent += childHeight.value;
                    }
                    else {
                        if (!_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(childHeight)) {
                            childHeight = child.height();
                        }
                        availableHeight -= childHeight + child.get("marginTop", 0) + child.get("marginBottom", 0);
                    }
                }
            });
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var childHeight = child.get("height");
                    if (childHeight instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_1__.Percent) {
                        var privateHeight = availableHeight * childHeight.value / totalPercent - child.get("marginTop", 0) - child.get("marginBottom", 0);
                        child.setPrivate("height", privateHeight);
                    }
                }
            });
            var prevY = paddingTop;
            container.children.each(function (child) {
                if (child.get("position") == "relative") {
                    var bounds = child.adjustedLocalBounds();
                    var marginTop = child.get("marginTop", 0);
                    var marginBottom = child.get("marginBottom", 0);
                    var y = prevY + marginTop - bounds.top;
                    child.setPrivate("y", y);
                    prevY = y + bounds.bottom + marginBottom;
                }
            });
        }
    });
    Object.defineProperty(VerticalLayout, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "VerticalLayout"
    });
    Object.defineProperty(VerticalLayout, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Layout__WEBPACK_IMPORTED_MODULE_3__.Layout.classNames.concat([VerticalLayout.className])
    });
    return VerticalLayout;
}(_Layout__WEBPACK_IMPORTED_MODULE_3__.Layout));

//# sourceMappingURL=VerticalLayout.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/backend/CanvasRenderer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/backend/CanvasRenderer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CanvasPivot": () => (/* binding */ CanvasPivot),
/* harmony export */   "CanvasDisplayObject": () => (/* binding */ CanvasDisplayObject),
/* harmony export */   "CanvasContainer": () => (/* binding */ CanvasContainer),
/* harmony export */   "CanvasGraphics": () => (/* binding */ CanvasGraphics),
/* harmony export */   "CanvasText": () => (/* binding */ CanvasText),
/* harmony export */   "CanvasTextStyle": () => (/* binding */ CanvasTextStyle),
/* harmony export */   "CanvasRadialText": () => (/* binding */ CanvasRadialText),
/* harmony export */   "CanvasImage": () => (/* binding */ CanvasImage),
/* harmony export */   "CanvasRendererEvent": () => (/* binding */ CanvasRendererEvent),
/* harmony export */   "CanvasRenderer": () => (/* binding */ CanvasRenderer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Renderer */ "./node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js");
/* harmony import */ var _util_Color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _util_Matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/Matrix */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js");
/* harmony import */ var _util_Percent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _util_Throttler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/Throttler */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Throttler.js");
/* harmony import */ var _util_Disposer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _util_TextFormatter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/TextFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js");
/* harmony import */ var _util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _util_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _util_Math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/* harmony import */ var svg_arc_to_cubic_bezier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svg-arc-to-cubic-bezier */ "./node_modules/svg-arc-to-cubic-bezier/modules/index.js");
/** @ignore */ /** */













/**
 * @ignore
 */
function checkArgs(name, actual, expected) {
    if (actual !== expected) {
        throw new Error("Required " + expected + " arguments for " + name + " but got " + actual);
    }
}
/**
 * @ignore
 */
function checkMinArgs(name, actual, expected) {
    if (actual < expected) {
        throw new Error("Required at least " + expected + " arguments for " + name + " but got " + actual);
    }
}
/**
 * @ignore
 */
function checkEvenArgs(name, actual, expected) {
    checkMinArgs(name, actual, expected);
    if ((actual % expected) !== 0) {
        throw new Error("Arguments for " + name + " must be in pairs of " + expected);
    }
}
/**
 * @ignore
 */
function assertBinary(value) {
    if (value === 0 || value === 1) {
        return value;
    }
    else {
        throw new Error("Flag must be 0 or 1");
    }
}
//  1 -> 0xffffff * (2 / 2)
//  2 -> 0xffffff * (1 / 2)
//
//  3 -> 0xffffff * (3 / 4)
//  4 -> 0xffffff * (1 / 4)
//
//  5 -> 0xffffff * (7 / 8)
//  6 -> 0xffffff * (5 / 8)
//  7 -> 0xffffff * (3 / 8)
//  8 -> 0xffffff * (1 / 8)
//
//  9 -> 0xffffff * (15 / 16)
// 10 -> 0xffffff * (13 / 16)
// 11 -> 0xffffff * (11 / 16)
// 12 -> 0xffffff *  (9 / 16)
// 13 -> 0xffffff *  (7 / 16)
// 14 -> 0xffffff *  (5 / 16)
// 15 -> 0xffffff *  (3 / 16)
// 16 -> 0xffffff *  (1 / 16)
// @todo remove this old color distribution algo if the new one pans out
// function distributeIdBAK(id: number): number {
// 	if (id === 1) {
// 		return 0x000001;
// 	} else {
// 		// Finds the closest power of 2
// 		const base = Math.pow(2, Math.ceil(Math.log(id) / Math.log(2)));
// 		// Translates the id into an odd fraction index
// 		const index = ((base - id) * 2) + 1;
// 		// TODO is Math.round correct ?
// 		return Math.round(0xffffff * (index / base));
// 	}
// }
/**
 * Function by smeans:
 * https://lowcode.life/generating-unique-contrasting-colors-in-javascript/
 * @ignore
 */
function distributeId(id) {
    var rgb = [0, 0, 0];
    for (var i = 0; i < 24; i++) {
        rgb[i % 3] <<= 1;
        rgb[i % 3] |= id & 0x01;
        id >>= 1;
    }
    return (rgb[2] | 0) + (rgb[1] << 8) + (rgb[0] << 16);
}
/**
 * @ignore
 */
function eachTargets(hitTarget, f) {
    for (;;) {
        if (hitTarget.interactive) {
            if (!f(hitTarget)) {
                break;
            }
        }
        if (hitTarget._parent) {
            hitTarget = hitTarget._parent;
        }
        else {
            break;
        }
    }
}
// TODO feature detection for mouse/touch/pointer
/**
 * @ignore
 */
function onPointerEvent(element, name, f) {
    return _util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(element, _util_Utils__WEBPACK_IMPORTED_MODULE_1__.getRendererEvent(name), function (event) {
        if (event.touches) {
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(event.touches, function (touch) {
                f(touch);
            });
        }
        else {
            f(event);
        }
    });
}
/**
 * @ignore
 */
function isTainted(image) {
    var canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    var context = canvas.getContext("2d");
    context.drawImage(image, 0, 0, 1, 1);
    try {
        context.getImageData(0, 0, 1, 1);
        return false;
    }
    catch (err) {
        console.warn("Image \"" + image.src + "\" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors");
        return true;
    }
}
/**
 * @ignore
 */
var CanvasPivot = /** @class */ (function () {
    function CanvasPivot() {
        Object.defineProperty(this, "_x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    Object.defineProperty(CanvasPivot.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (value) {
            this._x = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CanvasPivot.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (value) {
            this._y = value;
        },
        enumerable: false,
        configurable: true
    });
    return CanvasPivot;
}());

/**
 * @ignore
 */
var CanvasDisplayObject = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasDisplayObject, _super);
    function CanvasDisplayObject(renderer) {
        var _this = _super.call(this, function () {
            _this._renderer._removeObject(_this);
        }) || this;
        Object.defineProperty(_this, "_layer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "mask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(_this, "visible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "exportable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "interactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "wheelable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "isMeasured", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "buttonMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "alpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "compoundAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "angle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "pivot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new CanvasPivot()
        });
        Object.defineProperty(_this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "cursorOverStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_replacedCursorStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_localMatrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Matrix__WEBPACK_IMPORTED_MODULE_4__.Matrix()
        });
        Object.defineProperty(_this, "_matrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Matrix__WEBPACK_IMPORTED_MODULE_4__.Matrix()
        });
        // TODO can this be replaced with _localMatrix ?
        Object.defineProperty(_this, "_uMatrix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Matrix__WEBPACK_IMPORTED_MODULE_4__.Matrix()
        });
        Object.defineProperty(_this, "_renderer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_localBounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_bounds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_colorId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this._renderer = renderer;
        return _this;
    }
    Object.defineProperty(CanvasDisplayObject.prototype, "getCanvas", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.getLayer().view;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "getLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var self = this;
            for (;;) {
                if (self._layer) {
                    return self._layer;
                }
                else if (self._parent) {
                    self = self._parent;
                }
                else {
                    return this._renderer.defaultLayer;
                }
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "setLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (order, visible) {
            if (visible === void 0) { visible = true; }
            if (order == null) {
                this._layer = undefined;
            }
            else {
                this._layer = this._renderer.getLayer(order, visible);
                this._layer.visible = visible;
                if (this._parent) {
                    this._parent.registerChildLayer(this._layer);
                }
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "markDirtyLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getLayer().dirty = true;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "clear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.invalidateBounds();
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "invalidateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._localBounds = undefined;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_bounds) { }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_getColorId", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._colorId === undefined) {
                this._colorId = this._renderer.paintId(this);
            }
            return this._colorId;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractive", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.interactive || this._renderer._forceInteractive > 0;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractiveMask", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._isInteractive();
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "contains", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child) {
            for (;;) {
                if (child === this) {
                    return true;
                }
                else if (child._parent) {
                    child = child._parent;
                }
                else {
                    return false;
                }
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "toGlobal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return this._matrix.apply(point);
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "toLocal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            return this._matrix.applyInverse(point);
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "getLocalMatrix", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._uMatrix.setTransform(0, 0, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
            return this._uMatrix;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "getLocalBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._localBounds) {
                var bn = 10000000;
                this._localBounds = {
                    left: bn,
                    top: bn,
                    right: -bn,
                    bottom: -bn
                };
                this._addBounds(this._localBounds);
            }
            return this._localBounds;
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "getAdjustedBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            this._setMatrix();
            var matrix = this.getLocalMatrix();
            var p0 = matrix.apply({ x: bounds.left, y: bounds.top });
            var p1 = matrix.apply({ x: bounds.right, y: bounds.top });
            var p2 = matrix.apply({ x: bounds.right, y: bounds.bottom });
            var p3 = matrix.apply({ x: bounds.left, y: bounds.bottom });
            return {
                left: Math.min(p0.x, p1.x, p2.x, p3.x),
                top: Math.min(p0.y, p1.y, p2.y, p3.y),
                right: Math.max(p0.x, p1.x, p2.x, p3.x),
                bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
            };
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback, context) {
            if (this.interactive) {
                return this._renderer._addEvent(this, key, callback, context);
            }
            else {
                return new _util_Disposer__WEBPACK_IMPORTED_MODULE_5__.Disposer(function () { });
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_setMatrix", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // TODO only calculate this if it has actually changed
            this._localMatrix.setTransform(this.x, this.y, this.pivot.x, this.pivot.y, 
            // Converts degrees to radians
            this.angle * Math.PI / 180, this.scale);
            this._matrix.copyFrom(this._localMatrix);
            if (this._parent) {
                // TODO only calculate this if it has actually changed
                this._matrix.prepend(this._parent._matrix);
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_transform", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, resolution) {
            var m = this._matrix;
            context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, m.tx * resolution, m.ty * resolution);
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            var _this = this;
            if (this.visible && (this.exportable !== false || !this._renderer._omitTainted)) {
                this._setMatrix();
                var resolution_1 = this._renderer.resolution;
                var layers = this._renderer.layers;
                var ghostContext = this._renderer._ghostContext;
                var mask_1 = this.mask;
                if (mask_1) {
                    mask_1._setMatrix();
                }
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(layers, function (layer) {
                    if (layer) {
                        layer.context.save();
                        // We must apply the mask before we transform the element
                        if (mask_1) {
                            mask_1._transform(layer.context, layer.scale || resolution_1);
                            mask_1._runPath(layer.context);
                            layer.context.clip();
                        }
                        layer.context.globalAlpha = _this.compoundAlpha * _this.alpha;
                        _this._transform(layer.context, layer.scale || resolution_1);
                        if (_this.filter) {
                            layer.context.filter = _this.filter;
                        }
                    }
                });
                ghostContext.save();
                // We must apply the mask before we transform the element
                if (mask_1 && this._isInteractiveMask()) {
                    mask_1._transform(ghostContext, resolution_1);
                    mask_1._runPath(ghostContext);
                    ghostContext.clip();
                }
                this._transform(ghostContext, resolution_1);
                this._render(parentLayer);
                ghostContext.restore();
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(layers, function (layer) {
                    if (layer) {
                        layer.context.restore();
                    }
                });
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            if (this.exportable === false) {
                var layer = this._layer || parentLayer;
                layer.tainted = true;
            }
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "hovering", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._renderer._hovering.has(this);
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "dragging", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            return this._renderer._dragging.some(function (x) { return x.value === _this; });
        }
    });
    Object.defineProperty(CanvasDisplayObject.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getLayer().dirty = true;
        }
    });
    return CanvasDisplayObject;
}(_util_Disposer__WEBPACK_IMPORTED_MODULE_5__.Disposer));

/**
 * @ignore
 */
var CanvasContainer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasContainer, _super);
    function CanvasContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "interactiveChildren", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "_childLayers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_children", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        return _this;
    }
    Object.defineProperty(CanvasContainer.prototype, "_isInteractiveMask", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.interactiveChildren || _super.prototype._isInteractiveMask.call(this);
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "addChild", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child) {
            child._parent = this;
            this._children.push(child);
            if (child._layer) {
                this.registerChildLayer(child._layer);
            }
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "addChildAt", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child, index) {
            child._parent = this;
            this._children.splice(index, 0, child);
            if (child._layer) {
                this.registerChildLayer(child._layer);
            }
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "removeChild", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child) {
            child._parent = undefined;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.removeFirst(this._children, child);
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            var _this = this;
            _super.prototype._render.call(this, parentLayer);
            var renderer = this._renderer;
            if (this.interactive && this.interactiveChildren) {
                ++renderer._forceInteractive;
            }
            var layer = this._layer || parentLayer;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._children, function (child) {
                child.compoundAlpha = _this.compoundAlpha * _this.alpha;
                child.render(layer);
            });
            if (this.interactive && this.interactiveChildren) {
                --renderer._forceInteractive;
            }
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "registerChildLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (layer) {
            if (!this._childLayers) {
                this._childLayers = [];
            }
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.pushOne(this._childLayers, layer);
            if (this._parent) {
                this._parent.registerChildLayer(layer);
            }
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "markDirtyLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (deep) {
            if (deep === void 0) { deep = false; }
            _super.prototype.markDirtyLayer.call(this);
            if (deep && this._childLayers) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._childLayers, function (layer) { return layer.dirty = true; });
            }
        }
    });
    Object.defineProperty(CanvasContainer.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.dispose.call(this);
            if (this._childLayers) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._childLayers, function (layer) {
                    layer.dirty = true;
                });
            }
        }
    });
    return CanvasContainer;
}(CanvasDisplayObject));

/**
 * @ignore
 */
function setPoint(bounds, point) {
    bounds.left = Math.min(bounds.left, point.x);
    bounds.top = Math.min(bounds.top, point.y);
    bounds.right = Math.max(bounds.right, point.x);
    bounds.bottom = Math.max(bounds.bottom, point.y);
}
/**
 * @ignore
 */
var Op = /** @class */ (function () {
    function Op() {
    }
    Object.defineProperty(Op.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_context, _forceColor) { }
    });
    Object.defineProperty(Op.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_context) { }
    });
    Object.defineProperty(Op.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_bounds) { }
    });
    return Op;
}());
/**
 * @ignore
 */
var BeginFill = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(BeginFill, _super);
    function BeginFill(color) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
        return _this;
    }
    Object.defineProperty(BeginFill.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, forceColor) {
            if (forceColor !== undefined) {
                context.fillStyle = forceColor;
            }
            else {
                context.fillStyle = this.color;
            }
        }
    });
    return BeginFill;
}(Op));
/**
 * @ignore
 */
var EndFill = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(EndFill, _super);
    function EndFill(clearShadow) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "clearShadow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clearShadow
        });
        return _this;
    }
    Object.defineProperty(EndFill.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, _forceColor) {
            context.fill();
            if (this.clearShadow) {
                context.shadowColor = "";
                context.shadowBlur = 0;
                context.shadowOffsetX = 0;
                context.shadowOffsetY = 0;
            }
        }
    });
    return EndFill;
}(Op));
/**
 * @ignore
 */
var EndStroke = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(EndStroke, _super);
    function EndStroke() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EndStroke.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, _forceColor) {
            context.stroke();
        }
    });
    return EndStroke;
}(Op));
/**
 * @ignore
 */
var LineStyle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(LineStyle, _super);
    function LineStyle(width, color) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: width
        });
        Object.defineProperty(_this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
        return _this;
    }
    Object.defineProperty(LineStyle.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, forceColor) {
            if (forceColor !== undefined) {
                context.strokeStyle = forceColor;
            }
            else {
                context.strokeStyle = this.color;
            }
            context.lineWidth = this.width;
        }
    });
    return LineStyle;
}(Op));
/**
 * @ignore
 */
var LineDash = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(LineDash, _super);
    function LineDash(dash) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "dash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dash
        });
        return _this;
    }
    Object.defineProperty(LineDash.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, _forceColor) {
            context.setLineDash(this.dash);
        }
    });
    return LineDash;
}(Op));
/**
 * @ignore
 */
var LineDashOffset = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(LineDashOffset, _super);
    function LineDashOffset(dashOffset) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "dashOffset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dashOffset
        });
        return _this;
    }
    Object.defineProperty(LineDashOffset.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, _forceColor) {
            context.lineDashOffset = this.dashOffset;
        }
    });
    return LineDashOffset;
}(Op));
/**
 * @ignore
 */
var DrawRect = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(DrawRect, _super);
    function DrawRect(x, y, width, height) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(_this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        Object.defineProperty(_this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: width
        });
        Object.defineProperty(_this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: height
        });
        return _this;
    }
    Object.defineProperty(DrawRect.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.rect(this.x, this.y, this.width, this.height);
        }
    });
    Object.defineProperty(DrawRect.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            var l = this.x;
            var t = this.y;
            var r = l + this.width;
            var b = t + this.height;
            setPoint(bounds, { x: l, y: t });
            setPoint(bounds, { x: r, y: t });
            setPoint(bounds, { x: l, y: b });
            setPoint(bounds, { x: r, y: b });
        }
    });
    return DrawRect;
}(Op));
/**
 * @ignore
 */
var DrawCircle = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(DrawCircle, _super);
    function DrawCircle(x, y, radius) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(_this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        Object.defineProperty(_this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
        return _this;
    }
    Object.defineProperty(DrawCircle.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.moveTo(this.x + this.radius, this.y);
            context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
        }
    });
    // TODO handle skewing and rotation
    Object.defineProperty(DrawCircle.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            setPoint(bounds, { x: this.x - this.radius, y: this.y - this.radius });
            setPoint(bounds, { x: this.x + this.radius, y: this.y + this.radius });
        }
    });
    return DrawCircle;
}(Op));
/**
 * @ignore
 */
var Arc = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(Arc, _super);
    function Arc(cx, cy, radius, startAngle, endAngle, anticlockwise) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "cx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cx
        });
        Object.defineProperty(_this, "cy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cy
        });
        Object.defineProperty(_this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
        Object.defineProperty(_this, "startAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: startAngle
        });
        Object.defineProperty(_this, "endAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: endAngle
        });
        Object.defineProperty(_this, "anticlockwise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: anticlockwise
        });
        return _this;
    }
    Object.defineProperty(Arc.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            if (this.radius > 0) {
                context.arc(this.cx, this.cy, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
            }
        }
    });
    Object.defineProperty(Arc.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            var arcBounds = _util_Math__WEBPACK_IMPORTED_MODULE_6__.getArcBounds(this.cx, this.cy, this.startAngle * _util_Math__WEBPACK_IMPORTED_MODULE_6__.DEGREES, this.endAngle * _util_Math__WEBPACK_IMPORTED_MODULE_6__.DEGREES, this.radius);
            setPoint(bounds, { x: arcBounds.left, y: arcBounds.top });
            setPoint(bounds, { x: arcBounds.right, y: arcBounds.bottom });
        }
    });
    return Arc;
}(Op));
/**
 * @ignore
 */
var ArcTo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ArcTo, _super);
    function ArcTo(x1, y1, x2, y2, radius) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "x1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x1
        });
        Object.defineProperty(_this, "y1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y1
        });
        Object.defineProperty(_this, "x2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x2
        });
        Object.defineProperty(_this, "y2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y2
        });
        Object.defineProperty(_this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: radius
        });
        return _this;
    }
    Object.defineProperty(ArcTo.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            if (this.radius > 0) {
                context.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
            }
        }
    });
    // TODO: add points
    Object.defineProperty(ArcTo.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_bounds) {
            /*
            // not finished
            https://math.stackexchange.com/questions/1781438/finding-the-center-of-a-circle-given-two-points-and-a-radius-algebraically
    
            if (prevPoint) {
                let x1 = prevPoint.x;
                let y1 = prevPoint.y;
                let x2 = this.x2;
                let y2 = this.y2;
                let r = this.radius;
    
                let xa = (x2 - x1) / 2;
                let ya = (y2 - y1) / 2;
    
                let x0 = x1 + xa;
                let y0 = y1 + ya;
    
                let a = Math.hypot(xa, ya);
                let b = Math.sqrt(r * r - a * a);
    
                let cx = x0 + b * ya / a;
                let cy = y0 - b * xa / a;
    
                console.log(cx, cy);
            }*/
        }
    });
    return ArcTo;
}(Op));
/**
 * @ignore
 */
var LineTo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(LineTo, _super);
    function LineTo(x, y) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(_this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        return _this;
    }
    Object.defineProperty(LineTo.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.lineTo(this.x, this.y);
        }
    });
    Object.defineProperty(LineTo.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            setPoint(bounds, { x: this.x, y: this.y });
        }
    });
    return LineTo;
}(Op));
/**
 * @ignore
 */
var MoveTo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(MoveTo, _super);
    function MoveTo(x, y) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: x
        });
        Object.defineProperty(_this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: y
        });
        return _this;
    }
    Object.defineProperty(MoveTo.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.moveTo(this.x, this.y);
        }
    });
    Object.defineProperty(MoveTo.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            setPoint(bounds, { x: this.x, y: this.y });
        }
    });
    return MoveTo;
}(Op));
/**
 * @ignore
 */
var ClosePath = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(ClosePath, _super);
    function ClosePath() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ClosePath.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.closePath();
        }
    });
    return ClosePath;
}(Op));
/**
 * @ignore
 */
var BezierCurveTo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(BezierCurveTo, _super);
    function BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "cpX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX
        });
        Object.defineProperty(_this, "cpY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY
        });
        Object.defineProperty(_this, "cpX2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX2
        });
        Object.defineProperty(_this, "cpY2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY2
        });
        Object.defineProperty(_this, "toX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toX
        });
        Object.defineProperty(_this, "toY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toY
        });
        return _this;
    }
    Object.defineProperty(BezierCurveTo.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.bezierCurveTo(this.cpX, this.cpY, this.cpX2, this.cpY2, this.toX, this.toY);
        }
    });
    // TODO: OK?
    Object.defineProperty(BezierCurveTo.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            setPoint(bounds, { x: this.cpX, y: this.cpY });
            setPoint(bounds, { x: this.cpX2, y: this.cpY2 });
            setPoint(bounds, { x: this.toX, y: this.toY });
        }
    });
    return BezierCurveTo;
}(Op));
/**
 * @ignore
 */
var QuadraticCurveTo = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(QuadraticCurveTo, _super);
    function QuadraticCurveTo(cpX, cpY, toX, toY) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "cpX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpX
        });
        Object.defineProperty(_this, "cpY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cpY
        });
        Object.defineProperty(_this, "toX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toX
        });
        Object.defineProperty(_this, "toY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: toY
        });
        return _this;
    }
    Object.defineProperty(QuadraticCurveTo.prototype, "path", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.quadraticCurveTo(this.cpX, this.cpY, this.toX, this.toY);
        }
    });
    // TODO: OK?
    Object.defineProperty(QuadraticCurveTo.prototype, "addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            setPoint(bounds, { x: this.cpX, y: this.cpY });
            setPoint(bounds, { x: this.toX, y: this.toY });
        }
    });
    return QuadraticCurveTo;
}(Op));
/**
 * @ignore
 */
var Shadow = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(Shadow, _super);
    function Shadow(color, blur, offsetX, offsetY, opacity) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: color
        });
        Object.defineProperty(_this, "blur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: blur
        });
        Object.defineProperty(_this, "offsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: offsetX
        });
        Object.defineProperty(_this, "offsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: offsetY
        });
        Object.defineProperty(_this, "opacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: opacity
        });
        return _this;
    }
    Object.defineProperty(Shadow.prototype, "colorize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, _forceColor) {
            if (this.opacity) {
                context.fillStyle = this.color;
            }
            context.shadowColor = this.color;
            if (this.blur) {
                context.shadowBlur = this.blur;
            }
            if (this.offsetX) {
                context.shadowOffsetX = this.offsetX;
            }
            if (this.offsetY) {
                context.shadowOffsetY = this.offsetY;
            }
        }
    });
    return Shadow;
}(Op));
/**
 * @ignore
 */
var CanvasGraphics = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasGraphics, _super);
    function CanvasGraphics() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_operations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "blendMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _Renderer__WEBPACK_IMPORTED_MODULE_7__.BlendMode.NORMAL
        });
        Object.defineProperty(_this, "_hasShadows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_fillAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_strokeAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(CanvasGraphics.prototype, "clear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.clear.call(this);
            this._operations.length = 0;
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "_pushOp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (op) {
            this._operations.push(op);
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "beginFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, alpha) {
            if (alpha === void 0) { alpha = 1; }
            this._fillAlpha = alpha;
            if (color) {
                if (color instanceof _util_Color__WEBPACK_IMPORTED_MODULE_8__.Color) {
                    this._pushOp(new BeginFill(color.toCSS(alpha)));
                }
                else {
                    this.isMeasured = true;
                    this._pushOp(new BeginFill(color));
                }
            }
            else {
                this._pushOp(new BeginFill("rgba(0, 0, 0, " + alpha + ")"));
            }
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "endFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._pushOp(new EndFill(this._hasShadows));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "endStroke", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._pushOp(new EndStroke());
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "lineStyle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (width, color, alpha) {
            if (width === void 0) { width = 0; }
            if (alpha === void 0) { alpha = 1; }
            this._strokeAlpha = alpha;
            if (color) {
                if (color instanceof _util_Color__WEBPACK_IMPORTED_MODULE_8__.Color) {
                    this._pushOp(new LineStyle(width, color.toCSS(alpha)));
                }
                else {
                    this._pushOp(new LineStyle(width, color));
                }
            }
            else {
                this._pushOp(new LineStyle(width, "rgba(0, 0, 0, " + alpha + ")"));
            }
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "setLineDash", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dash) {
            this._pushOp(new LineDash(dash ? dash : []));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "setLineDashOffset", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dashOffset) {
            this._pushOp(new LineDashOffset(dashOffset || 0));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "drawRect", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y, width, height) {
            this._pushOp(new DrawRect(x, y, width, height));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "drawCircle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y, radius) {
            this._pushOp(new DrawCircle(x, y, radius));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "arc", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (cx, cy, radius, startAngle, endAngle, anticlockwise) {
            if (anticlockwise === void 0) { anticlockwise = false; }
            this._pushOp(new Arc(cx, cy, radius, startAngle, endAngle, anticlockwise));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "arcTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x1, y1, x2, y2, radius) {
            this._pushOp(new ArcTo(x1, y1, x2, y2, radius));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "lineTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y) {
            this._pushOp(new LineTo(x, y));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "moveTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y) {
            this._pushOp(new MoveTo(x, y));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "bezierCurveTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (cpX, cpY, cpX2, cpY2, toX, toY) {
            this._pushOp(new BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "quadraticCurveTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (cpX, cpY, toX, toY) {
            this._pushOp(new QuadraticCurveTo(cpX, cpY, toX, toY));
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "closePath", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._pushOp(new ClosePath());
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "shadow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, blur, offsetX, offsetY, opacity) {
            this._hasShadows = true;
            this._pushOp(new Shadow(opacity ? color.toCSS(opacity) : color.toCSS(this._fillAlpha || this._strokeAlpha), blur, offsetX, offsetY));
        }
    });
    // https://svgwg.org/svg2-draft/paths.html#DProperty
    // TODO better error checking
    Object.defineProperty(CanvasGraphics.prototype, "svgPath", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (path) {
            var _this = this;
            var x = 0;
            var y = 0;
            var cpx = null;
            var cpy = null;
            var qcpx = null;
            var qcpy = null;
            var SEGMENTS_REGEXP = /([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g;
            var ARGS_REGEXP = /[\u0009\u0020\u000A\u000C\u000D]*([\+\-]?[0-9]*\.?[0-9]+(?:[eE][\+\-]?[0-9]+)?)[\u0009\u0020\u000A\u000C\u000D]*,?/g;
            var match;
            while ((match = SEGMENTS_REGEXP.exec(path)) !== null) {
                var name_1 = match[1];
                var rest = match[2];
                var args = [];
                while ((match = ARGS_REGEXP.exec(rest)) !== null) {
                    args.push(+match[1]);
                }
                // Reset control point
                if (name_1 !== "S" && name_1 !== "s" && name_1 !== "C" && name_1 !== "c") {
                    cpx = null;
                    cpy = null;
                }
                // Reset control point
                if (name_1 !== "Q" && name_1 !== "q" && name_1 !== "T" && name_1 !== "t") {
                    qcpx = null;
                    qcpy = null;
                }
                switch (name_1) {
                    case "M":
                        checkEvenArgs(name_1, args.length, 2);
                        x = args[0];
                        y = args[1];
                        this.moveTo(x, y);
                        for (var i = 2; i < args.length; i += 2) {
                            x = args[i];
                            y = args[i + 1];
                            this.lineTo(x, y);
                        }
                        break;
                    case "m":
                        checkEvenArgs(name_1, args.length, 2);
                        x += args[0];
                        y += args[1];
                        this.moveTo(x, y);
                        for (var i = 2; i < args.length; i += 2) {
                            x += args[i];
                            y += args[i + 1];
                            this.lineTo(x, y);
                        }
                        break;
                    case "L":
                        checkEvenArgs(name_1, args.length, 2);
                        for (var i = 0; i < args.length; i += 2) {
                            x = args[i];
                            y = args[i + 1];
                            this.lineTo(x, y);
                        }
                        break;
                    case "l":
                        checkEvenArgs(name_1, args.length, 2);
                        for (var i = 0; i < args.length; i += 2) {
                            x += args[i];
                            y += args[i + 1];
                            this.lineTo(x, y);
                        }
                        break;
                    case "H":
                        checkMinArgs(name_1, args.length, 1);
                        for (var i = 0; i < args.length; ++i) {
                            x = args[i];
                            this.lineTo(x, y);
                        }
                        break;
                    case "h":
                        checkMinArgs(name_1, args.length, 1);
                        for (var i = 0; i < args.length; ++i) {
                            x += args[i];
                            this.lineTo(x, y);
                        }
                        break;
                    case "V":
                        checkMinArgs(name_1, args.length, 1);
                        for (var i = 0; i < args.length; ++i) {
                            y = args[i];
                            this.lineTo(x, y);
                        }
                        break;
                    case "v":
                        checkMinArgs(name_1, args.length, 1);
                        for (var i = 0; i < args.length; ++i) {
                            y += args[i];
                            this.lineTo(x, y);
                        }
                        break;
                    case "C":
                        checkEvenArgs(name_1, args.length, 6);
                        for (var i = 0; i < args.length; i += 6) {
                            var x1 = args[i];
                            var y1 = args[i + 1];
                            cpx = args[i + 2];
                            cpy = args[i + 3];
                            x = args[i + 4];
                            y = args[i + 5];
                            this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                        }
                        break;
                    case "c":
                        checkEvenArgs(name_1, args.length, 6);
                        for (var i = 0; i < args.length; i += 6) {
                            var x1 = args[i] + x;
                            var y1 = args[i + 1] + y;
                            cpx = args[i + 2] + x;
                            cpy = args[i + 3] + y;
                            x += args[i + 4];
                            y += args[i + 5];
                            this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                        }
                        break;
                    case "S":
                        checkEvenArgs(name_1, args.length, 4);
                        if (cpx === null || cpy === null) {
                            cpx = x;
                            cpy = y;
                        }
                        for (var i = 0; i < args.length; i += 4) {
                            var x1 = 2 * x - cpx;
                            var y1 = 2 * y - cpy;
                            cpx = args[i];
                            cpy = args[i + 1];
                            x = args[i + 2];
                            y = args[i + 3];
                            this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                        }
                        break;
                    case "s":
                        checkEvenArgs(name_1, args.length, 4);
                        if (cpx === null || cpy === null) {
                            cpx = x;
                            cpy = y;
                        }
                        for (var i = 0; i < args.length; i += 4) {
                            var x1 = 2 * x - cpx;
                            var y1 = 2 * y - cpy;
                            cpx = args[i] + x;
                            cpy = args[i + 1] + y;
                            x += args[i + 2];
                            y += args[i + 3];
                            this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                        }
                        break;
                    case "Q":
                        checkEvenArgs(name_1, args.length, 4);
                        for (var i = 0; i < args.length; i += 4) {
                            qcpx = args[i];
                            qcpy = args[i + 1];
                            x = args[i + 2];
                            y = args[i + 3];
                            this.quadraticCurveTo(qcpx, qcpy, x, y);
                        }
                        break;
                    case "q":
                        checkEvenArgs(name_1, args.length, 4);
                        for (var i = 0; i < args.length; i += 4) {
                            qcpx = args[i] + x;
                            qcpy = args[i + 1] + y;
                            x += args[i + 2];
                            y += args[i + 3];
                            this.quadraticCurveTo(qcpx, qcpy, x, y);
                        }
                        break;
                    case "T":
                        checkEvenArgs(name_1, args.length, 2);
                        if (qcpx === null || qcpy === null) {
                            qcpx = x;
                            qcpy = y;
                        }
                        for (var i = 0; i < args.length; i += 2) {
                            qcpx = 2 * x - qcpx;
                            qcpy = 2 * y - qcpy;
                            x = args[i];
                            y = args[i + 1];
                            this.quadraticCurveTo(qcpx, qcpy, x, y);
                        }
                        break;
                    case "t":
                        checkEvenArgs(name_1, args.length, 2);
                        if (qcpx === null || qcpy === null) {
                            qcpx = x;
                            qcpy = y;
                        }
                        for (var i = 0; i < args.length; i += 2) {
                            qcpx = 2 * x - qcpx;
                            qcpy = 2 * y - qcpy;
                            x += args[i];
                            y += args[i + 1];
                            this.quadraticCurveTo(qcpx, qcpy, x, y);
                        }
                        break;
                    case "A":
                    case "a":
                        var relative = (name_1 === "a");
                        checkEvenArgs(name_1, args.length, 7);
                        for (var i = 0; i < args.length; i += 7) {
                            var cx = args[i + 5];
                            var cy = args[i + 6];
                            if (relative) {
                                cx += x;
                                cy += y;
                            }
                            var bs = (0,svg_arc_to_cubic_bezier__WEBPACK_IMPORTED_MODULE_0__["default"])({
                                px: x,
                                py: y,
                                rx: args[i],
                                ry: args[i + 1],
                                xAxisRotation: args[i + 2],
                                largeArcFlag: assertBinary(args[i + 3]),
                                sweepFlag: assertBinary(args[i + 4]),
                                cx: cx,
                                cy: cy,
                            });
                            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(bs, function (b) {
                                _this.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y);
                                x = b.x;
                                y = b.y;
                            });
                        }
                        break;
                    case "Z":
                    case "z":
                        checkArgs(name_1, args.length, 0);
                        this.closePath();
                        break;
                }
            }
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "_runPath", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            context.beginPath();
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._operations, function (op) {
                op.path(context);
            });
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            _super.prototype._render.call(this, parentLayer);
            var layer = this._layer || parentLayer;
            var layerDirty = layer.dirty;
            var interactive = this._isInteractive();
            // if (this.targetLayer) {
            // 	console.log(this._operations, layer)
            // }
            if (layerDirty || interactive) {
                var context_1 = layer.context;
                var ghostContext_1 = this._renderer._ghostContext;
                if (layerDirty) {
                    context_1.globalCompositeOperation = this.blendMode;
                    context_1.beginPath();
                }
                var color_1;
                if (interactive) {
                    ghostContext_1.beginPath();
                    color_1 = this._getColorId();
                }
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._operations, function (op) {
                    if (layerDirty) {
                        op.path(context_1);
                        op.colorize(context_1, undefined);
                    }
                    if (interactive) {
                        op.path(ghostContext_1);
                        op.colorize(ghostContext_1, color_1);
                    }
                });
            }
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "renderDetached", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            if (this.visible) {
                this._setMatrix();
                context.save();
                // We must apply the mask before we transform the element
                var mask = this.mask;
                if (mask) {
                    mask._setMatrix();
                    mask._transform(context, 1);
                    mask._runPath(context);
                    context.clip();
                }
                // TODO handle compoundAlpha somehow ?
                context.globalAlpha = this.compoundAlpha * this.alpha;
                this._transform(context, 1);
                if (this.filter) {
                    context.filter = this.filter;
                }
                context.globalCompositeOperation = this.blendMode;
                context.beginPath();
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._operations, function (op) {
                    op.path(context);
                    op.colorize(context, undefined);
                });
                context.restore();
            }
        }
    });
    Object.defineProperty(CanvasGraphics.prototype, "_addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            if (this.visible && this.isMeasured) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._operations, function (op) {
                    op.addBounds(bounds);
                });
            }
        }
    });
    return CanvasGraphics;
}(CanvasDisplayObject));

/**
 * @ignore
 */
var CanvasText = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasText, _super);
    function CanvasText(renderer, text, style) {
        var _this = _super.call(this, renderer) || this;
        Object.defineProperty(_this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "style", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_textInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_textVisible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "_originalScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        _this.text = text;
        _this.style = style;
        return _this;
    }
    Object.defineProperty(CanvasText.prototype, "invalidateBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.invalidateBounds.call(this);
            this._textInfo = undefined;
        }
    });
    Object.defineProperty(CanvasText.prototype, "_shared", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context) {
            if (this.style.textAlign) {
                context.textAlign = this.style.textAlign;
            }
            if (this.style.direction) {
                context.direction = this.style.direction;
            }
            if (this.style.textBaseline) {
                context.textBaseline = this.style.textBaseline;
            }
        }
    });
    Object.defineProperty(CanvasText.prototype, "_prerender", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (layer, ignoreGhost, ignoreFontWeight) {
            if (ignoreGhost === void 0) { ignoreGhost = false; }
            if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
            _super.prototype._render.call(this, layer);
            var context = layer.context;
            var ghostContext = this._renderer._ghostContext;
            // Font style
            var style = this.style;
            var fontStyle = this._getFontStyle(undefined, ignoreFontWeight);
            context.font = fontStyle;
            if (this._isInteractive() && !ignoreGhost) {
                ghostContext.font = fontStyle;
            }
            // Other parameters
            if (style.fill) {
                if (style.fill instanceof _util_Color__WEBPACK_IMPORTED_MODULE_8__.Color) {
                    context.fillStyle = style.fill.toCSS();
                }
                else {
                    context.fillStyle = style.fill;
                }
            }
            if (style.shadowColor) {
                layer.context.shadowColor = style.shadowColor.toCSS(style.shadowOpacity || 1);
            }
            if (style.shadowBlur) {
                layer.context.shadowBlur = style.shadowBlur;
            }
            if (style.shadowOffsetX) {
                layer.context.shadowOffsetX = style.shadowOffsetX;
            }
            if (style.shadowOffsetY) {
                layer.context.shadowOffsetY = style.shadowOffsetY;
            }
            this._shared(context);
            if (this._isInteractive() && !ignoreGhost) {
                ghostContext.fillStyle = this._getColorId();
                this._shared(ghostContext);
            }
        }
    });
    Object.defineProperty(CanvasText.prototype, "_getFontStyle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (style2, ignoreFontWeight) {
            if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
            // Process defaults
            var style = this.style;
            var fontStyle = [];
            if (style2 && style2.fontVariant) {
                fontStyle.push(style2.fontVariant);
            }
            else if (style.fontVariant) {
                fontStyle.push(style.fontVariant);
            }
            if (!ignoreFontWeight) {
                if (style2 && style2.fontWeight) {
                    fontStyle.push(style2.fontWeight);
                }
                else if (style.fontWeight) {
                    fontStyle.push(style.fontWeight);
                }
            }
            if (style2 && style2.fontStyle) {
                fontStyle.push(style2.fontStyle);
            }
            else if (style.fontStyle) {
                fontStyle.push(style.fontStyle);
            }
            if (style2 && style2.fontSize) {
                if (_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(style2.fontSize)) {
                    style2.fontSize = style2.fontSize + "px";
                }
                fontStyle.push(style2.fontSize);
            }
            else if (style.fontSize) {
                if (_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(style.fontSize)) {
                    style.fontSize = style.fontSize + "px";
                }
                fontStyle.push(style.fontSize);
            }
            if (style2 && style2.fontFamily) {
                fontStyle.push(style2.fontFamily);
            }
            else if (style.fontFamily) {
                fontStyle.push(style.fontFamily);
            }
            else if (fontStyle.length) {
                fontStyle.push("Arial");
            }
            return fontStyle.join(" ");
        }
    });
    Object.defineProperty(CanvasText.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            var _this = this;
            var layer = this._layer || parentLayer;
            // We need measurements in order to properly position text for alignment
            if (!this._textInfo) {
                this._measure(layer);
            }
            if (this._textVisible) {
                var interactive_1 = this._isInteractive();
                var context_2 = layer.context;
                var layerDirty_1 = layer.dirty;
                var ghostContext_2 = this._renderer._ghostContext;
                //console.log("interactive:",  interactive, "layerDirty:", layerDirty);
                context_2.save();
                ghostContext_2.save();
                this._prerender(layer);
                // const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                // const x = this._localBounds && (this._localBounds.left < 0) ? Math.abs(this._localBounds.left) : 0;
                // Process text info produced by _measure()
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._textInfo, function (line, _index) {
                    _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(line.textChunks, function (chunk, _index) {
                        // Set style
                        if (chunk.style) {
                            context_2.save();
                            ghostContext_2.save();
                            context_2.font = chunk.style;
                            if (_this._isInteractive()) {
                                ghostContext_2.font = chunk.style;
                            }
                        }
                        if (chunk.fill) {
                            context_2.save();
                            context_2.fillStyle = chunk.fill.toCSS();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Draw text
                        if (layerDirty_1) {
                            context_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                        }
                        if (interactive_1 && _this.interactive) {
                            // Draw text in ghost canvas ONLY if it is set as interactive
                            // explicitly. This way we avoid hit test anomalies caused by anti
                            // aliasing of text.
                            ghostContext_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                        }
                        if (chunk.fill) {
                            context_2.restore();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Reset style
                        if (chunk.style) {
                            context_2.restore();
                            ghostContext_2.restore();
                        }
                    });
                });
                context_2.restore();
                ghostContext_2.restore();
            }
        }
    });
    Object.defineProperty(CanvasText.prototype, "_addBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            if (this.visible && this.isMeasured) {
                //if (this._textVisible) {
                var x = this._measure(this.getLayer());
                setPoint(bounds, { x: x.left, y: x.top });
                setPoint(bounds, { x: x.right, y: x.bottom });
                //}
            }
        }
    });
    Object.defineProperty(CanvasText.prototype, "_measure", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (layer) {
            var _this = this;
            var context = layer.context;
            var ghostContext = this._renderer._ghostContext;
            // Reset text info
            this._textInfo = [];
            // Init
            var oversizedBehavior = this.style.oversizedBehavior;
            var maxWidth = this.style.maxWidth;
            var truncate = maxWidth && oversizedBehavior == "truncate";
            var wrap = maxWidth && oversizedBehavior == "wrap";
            // Pre-render
            context.save();
            ghostContext.save();
            this._prerender(layer, true, true);
            // Get default font metrix
            var refText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ";
            // Split up text into lines
            var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
            var styleRestored = true;
            var minX = 0;
            var maxX = 0;
            // Iterate through the lines
            var offsetY = 0;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(lines, function (line, _index) {
                // Split up line into format/value chunks
                var chunks;
                if (line == "") {
                    chunks = [{
                            type: "value",
                            text: ""
                        }];
                }
                else {
                    chunks = _util_TextFormatter__WEBPACK_IMPORTED_MODULE_10__.TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                }
                var _loop_1 = function () {
                    // Init line object
                    var lineInfo = {
                        offsetY: offsetY,
                        ascent: 0,
                        width: 0,
                        height: 0,
                        left: 0,
                        right: 0,
                        textChunks: []
                    };
                    // Measure reference text
                    var metrics = _this._measureText(refText, context);
                    var height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                    lineInfo.height = height;
                    lineInfo.ascent = metrics.actualBoundingBoxAscent;
                    var currentStyle;
                    var currentFormat;
                    var currentFill;
                    var currentChunkWidth;
                    var skipFurtherText = false;
                    var firstTextChunk = true;
                    var leftoverChunks = [];
                    //let offsetX = 0;
                    //let chunk;
                    //while(chunk = chunks.shift()) {
                    _util_Array__WEBPACK_IMPORTED_MODULE_2__.eachContinue(chunks, function (chunk, index) {
                        // Format chunk
                        if (chunk.type == "format") {
                            if (chunk.text == "[/]") {
                                if (!styleRestored) {
                                    context.restore();
                                    ghostContext.restore();
                                    styleRestored = true;
                                }
                                currentFill = undefined;
                                currentStyle = undefined;
                                currentChunkWidth = undefined;
                                currentFormat = chunk.text;
                            }
                            else {
                                if (!styleRestored) {
                                    context.restore();
                                    ghostContext.restore();
                                }
                                var format = _util_TextFormatter__WEBPACK_IMPORTED_MODULE_10__.TextFormatter.getTextStyle(chunk.text);
                                var fontStyle = _this._getFontStyle(format);
                                context.save();
                                ghostContext.save();
                                context.font = fontStyle;
                                currentStyle = fontStyle;
                                currentFormat = chunk.text;
                                if (format.fill) {
                                    currentFill = format.fill;
                                }
                                if (format.width) {
                                    currentChunkWidth = _util_Type__WEBPACK_IMPORTED_MODULE_9__.toNumber(format.width);
                                }
                                styleRestored = false;
                                // Measure reference text after change of format
                                var metrics_1 = _this._measureText(refText, context);
                                var height_1 = metrics_1.actualBoundingBoxAscent + metrics_1.actualBoundingBoxDescent;
                                if (height_1 > lineInfo.height) {
                                    lineInfo.height = height_1;
                                }
                                if (metrics_1.actualBoundingBoxAscent > lineInfo.ascent) {
                                    lineInfo.ascent = metrics_1.actualBoundingBoxAscent;
                                }
                            }
                        }
                        // Text chunk
                        else if (chunk.type == "value" && !skipFurtherText) {
                            // Measure
                            var metrics_2 = _this._measureText(chunk.text.replace(/ /g, "."), context);
                            var chunkWidth = metrics_2.actualBoundingBoxLeft + metrics_2.actualBoundingBoxRight;
                            // Check for fit
                            if (truncate) {
                                // Break words?
                                var breakWords = firstTextChunk || _this.style.breakWords || false;
                                // Measure ellipsis and check if it fits
                                var ellipsis = _this.style.ellipsis || "";
                                var ellipsisMetrics = _this._measureText(ellipsis, context);
                                var ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                                // Check fit
                                if ((lineInfo.width + chunkWidth) > maxWidth) {
                                    var excessWidth = maxWidth - lineInfo.width - ellipsisWidth;
                                    chunk.text = _this._truncateText(context, chunk.text, excessWidth, breakWords);
                                    chunk.text += ellipsis;
                                    skipFurtherText = true;
                                }
                            }
                            else if (wrap) {
                                // Check fit
                                if ((lineInfo.width + chunkWidth) > maxWidth) {
                                    var excessWidth = maxWidth - lineInfo.width;
                                    var tmpText = _this._truncateText(context, chunk.text, excessWidth, false, firstTextChunk);
                                    //skipFurtherText = true;
                                    //Add remaining chunks for the next line
                                    leftoverChunks = chunks.slice(index + 1);
                                    //Add remaining text of current chunk if it was forced-cut
                                    if (_util_Utils__WEBPACK_IMPORTED_MODULE_1__.trim(tmpText) != _util_Utils__WEBPACK_IMPORTED_MODULE_1__.trim(chunk.text)) {
                                        leftoverChunks.unshift({
                                            type: "value",
                                            text: chunk.text.substr(tmpText.length)
                                        });
                                        if (currentFormat) {
                                            leftoverChunks.unshift({
                                                type: "format",
                                                text: currentFormat
                                            });
                                        }
                                    }
                                    // Set current chunk (truncated)
                                    chunk.text = tmpText;
                                    chunks = [];
                                    skipFurtherText = true;
                                }
                            }
                            // Chunk width?
                            var leftBoundMod = 1;
                            var rightBoundMod = 1;
                            if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                // increase horizontal bounding boxes accordingly
                                var boundsMod = chunkWidth / currentChunkWidth;
                                switch (_this.style.textAlign) {
                                    case "right":
                                    case "end":
                                        leftBoundMod = boundsMod;
                                        break;
                                    case "center":
                                        leftBoundMod = boundsMod;
                                        rightBoundMod = boundsMod;
                                        break;
                                    default:
                                        rightBoundMod = boundsMod;
                                }
                                chunkWidth = currentChunkWidth;
                            }
                            var chunkHeight = metrics_2.actualBoundingBoxAscent + metrics_2.actualBoundingBoxDescent;
                            if (chunkHeight > lineInfo.height) {
                                lineInfo.height = chunkHeight;
                            }
                            if (metrics_2.actualBoundingBoxAscent > lineInfo.ascent) {
                                lineInfo.ascent = metrics_2.actualBoundingBoxAscent;
                            }
                            lineInfo.width += chunkWidth;
                            lineInfo.left += metrics_2.actualBoundingBoxLeft / leftBoundMod;
                            lineInfo.right += metrics_2.actualBoundingBoxRight / rightBoundMod;
                            lineInfo.textChunks.push({
                                style: currentStyle,
                                fill: currentFill,
                                text: chunk.text,
                                width: chunkWidth,
                                height: chunkHeight,
                                left: metrics_2.actualBoundingBoxLeft,
                                right: metrics_2.actualBoundingBoxRight,
                                ascent: metrics_2.actualBoundingBoxAscent,
                                offsetX: 0,
                                offsetY: 0
                            });
                            //offsetX += chunkWidth;
                            firstTextChunk = false;
                        }
                        if (leftoverChunks) {
                            //return false;
                        }
                        return true;
                        //}
                    });
                    if (_this.style.lineHeight instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_11__.Percent) {
                        lineInfo.height *= _this.style.lineHeight.value;
                        lineInfo.ascent *= _this.style.lineHeight.value;
                    }
                    else {
                        lineInfo.height *= _this.style.lineHeight || 1.2;
                        lineInfo.ascent *= _this.style.lineHeight || 1.2;
                    }
                    if (minX < lineInfo.left) {
                        minX = lineInfo.left;
                    }
                    if (maxX < lineInfo.right) {
                        maxX = lineInfo.right;
                    }
                    _this._textInfo.push(lineInfo);
                    //lineInfo.offsetY += lineInfo.ascent;
                    offsetY += lineInfo.height;
                    // Reset chunks so that it can proceed to the next line
                    chunks = leftoverChunks || [];
                };
                while (chunks.length > 0) {
                    _loop_1();
                }
            });
            if (!styleRestored) {
                context.restore();
                ghostContext.restore();
            }
            // Adjust chunk internal offsets
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._textInfo, function (lineInfo, _index) {
                var currentChunkOffset = 0;
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(lineInfo.textChunks, function (chunk) {
                    chunk.offsetX = currentChunkOffset + chunk.left - lineInfo.left;
                    //chunk.offsetY += Math.round(lineInfo.ascent);
                    chunk.offsetY += lineInfo.height - lineInfo.height * (_this.style.baselineRatio || 0.19);
                    //chunk.offsetY += Math.round(lineInfo.height / 2) + ((lineInfo.height - chunk.height) / 2);
                    //console.log(chunk.text, chunk.ascent, lineInfo.ascent)
                    //chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
                    //chunk.offsetY -= Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2) - lineInfo.ascent / 2;
                    currentChunkOffset += chunk.width;
                });
            });
            var bounds = {
                left: -minX,
                top: 0,
                right: maxX,
                bottom: offsetY,
            };
            // We need to fit?
            if (oversizedBehavior !== "none") {
                var ratio = this._fitRatio(bounds);
                if (ratio < 1) {
                    if (oversizedBehavior == "fit") {
                        if (_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(this.style.minScale) && (ratio < this.style.minScale)) {
                            this._textVisible = false;
                        }
                        else {
                            if (!this._originalScale || this._originalScale == 1) {
                                this._originalScale = this.scale;
                            }
                            this.scale = ratio;
                            this._textVisible = true;
                        }
                    }
                    else if (oversizedBehavior == "hide") {
                        this._textVisible = false;
                    }
                    else {
                        switch (this.style.textAlign) {
                            case "right":
                            case "end":
                                bounds.left = maxWidth;
                                bounds.right = 0;
                                break;
                            case "center":
                                bounds.left = -maxWidth / 2;
                                bounds.right = maxWidth / 2;
                                break;
                            default:
                                bounds.left = 0;
                                bounds.right = maxWidth;
                        }
                        this.scale = this._originalScale || 1;
                        this._originalScale = undefined;
                        this._textVisible = true;
                    }
                }
                else {
                    this.scale = this._originalScale || 1;
                    this._originalScale = undefined;
                    this._textVisible = true;
                }
            }
            context.restore();
            ghostContext.restore();
            return bounds;
        }
    });
    Object.defineProperty(CanvasText.prototype, "_fitRatio", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (bounds) {
            var maxW = this.style.maxWidth;
            var maxH = this.style.maxHeight;
            if (!_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(maxW) && !_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(maxH)) {
                return 1;
            }
            var w = bounds.right - bounds.left;
            var h = bounds.bottom - bounds.top;
            return Math.min(maxW / w || 1, maxH / h || 1);
        }
    });
    Object.defineProperty(CanvasText.prototype, "_truncateText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (context, text, maxWidth, breakWords, fallbackBreakWords) {
            if (breakWords === void 0) { breakWords = false; }
            if (fallbackBreakWords === void 0) { fallbackBreakWords = true; }
            var width;
            do {
                if (breakWords) {
                    text = text.slice(0, -1);
                }
                else {
                    var tmp = text.replace(/[^,;:!?\\\/\.\s]+[,;:!?\\\/\.\s]*$/g, "");
                    if (tmp == "" && fallbackBreakWords) {
                        breakWords = true;
                    }
                    else {
                        text = tmp;
                    }
                }
                var metrics = this._measureText(text, context);
                width = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
            } while ((width > maxWidth) && text != "");
            return text;
        }
    });
    Object.defineProperty(CanvasText.prototype, "_measureText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text, context) {
            var metrics = context.measureText(text);
            if (metrics.actualBoundingBoxAscent == null) {
                var div = document.createElement("div");
                div.innerText = text;
                div.style.visibility = "hidden";
                div.style.position = "absolute";
                div.style.top = "-1000000px;";
                div.style.fontFamily = this.style.fontFamily || "";
                div.style.fontSize = this.style.fontSize + "";
                document.body.appendChild(div);
                var bbox = div.getBoundingClientRect();
                document.body.removeChild(div);
                var h = bbox.height;
                var w = metrics.width;
                var left = 0;
                var right = w;
                switch (this.style.textAlign) {
                    case "right":
                    case "end":
                        left = -w;
                        right = 0;
                        break;
                    case "center":
                        left = -w / 2;
                        right = w / 2;
                }
                var fake = {
                    actualBoundingBoxAscent: h,
                    actualBoundingBoxDescent: 0,
                    actualBoundingBoxLeft: left,
                    actualBoundingBoxRight: right,
                    width: w
                };
                return fake;
            }
            return metrics;
        }
    });
    return CanvasText;
}(CanvasDisplayObject));

/**
 * @ignore
 */
var CanvasTextStyle = /** @class */ (function () {
    function CanvasTextStyle() {
        //public wordWrapWidth: number = 100;
        Object.defineProperty(this, "fill", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textAlign", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontFamily", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontWeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fontVariant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowColor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowBlur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOffsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shadowOpacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // leading?: number;
        // letterSpacing?: number;
        Object.defineProperty(this, "lineHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0,_util_Percent__WEBPACK_IMPORTED_MODULE_11__.percent)(120)
        });
        Object.defineProperty(this, "baselineRatio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0.19
        });
        // padding?: number;
        // stroke?: number;
        // strokeThickness?: number;
        // trim?: number;
        // wordWrap?: boolean;
        Object.defineProperty(this, "direction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textBaseline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oversizedBehavior", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "none"
        });
        Object.defineProperty(this, "breakWords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "ellipsis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "…"
        });
        Object.defineProperty(this, "maxWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "maxHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "minScale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ignoreFormatting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    return CanvasTextStyle;
}());

/**
 * @ignore
 */
var CanvasRadialText = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasRadialText, _super);
    function CanvasRadialText() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "textType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "circular"
        });
        Object.defineProperty(_this, "radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "startAngle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "inside", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "orientation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "auto"
        });
        Object.defineProperty(_this, "kerning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_textReversed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(CanvasRadialText.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            switch (this.textType) {
                case "circular":
                    this._renderCircular(parentLayer);
                    break;
                default:
                    _super.prototype._render.call(this, parentLayer);
                    break;
            }
        }
    });
    Object.defineProperty(CanvasRadialText.prototype, "_renderCircular", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            var layer = this._layer || parentLayer;
            this._prerender(layer);
            var interactive = this._isInteractive();
            var context = layer.context;
            var layerDirty = layer.dirty;
            var ghostContext = this._renderer._ghostContext;
            // Savepoint
            context.save();
            if (interactive) {
                ghostContext.save();
            }
            // Init
            var radius = (this.radius || 0);
            var startAngle = (this.startAngle || 0);
            var deltaAngle = 0;
            var orientation = this.orientation;
            var inward = orientation == "auto" ? "auto" : orientation == "inward";
            var inside = this.inside;
            var align = this.style.textAlign || "left";
            var kerning = this.kerning || 0;
            var clockwise = align == "left" ? 1 : -1;
            var shouldReverse = !this._textReversed;
            // We need measurements in order to properly position text for alignment
            if (!this._textInfo) {
                this._measure(layer);
            }
            // Check if we need to invert the whole stuff
            if (inward == "auto") {
                // Calc max angle so we know whether we need to flip it
                var maxAngle_1 = 0;
                var midAngle = 0;
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._textInfo, function (line, _index) {
                    var deltaAngle = startAngle + (line.width / (radius - line.height)) / 2 * -clockwise;
                    if (deltaAngle > maxAngle_1) {
                        maxAngle_1 = deltaAngle;
                    }
                });
                if (align == "left") {
                    midAngle = (maxAngle_1 + deltaAngle / 2) * _util_Math__WEBPACK_IMPORTED_MODULE_6__.DEGREES;
                }
                else if (align == "right") {
                    midAngle = (maxAngle_1 - deltaAngle / 2) * _util_Math__WEBPACK_IMPORTED_MODULE_6__.DEGREES;
                }
                else {
                    midAngle = startAngle * _util_Math__WEBPACK_IMPORTED_MODULE_6__.DEGREES;
                }
                midAngle = _util_Math__WEBPACK_IMPORTED_MODULE_6__.normalizeAngle(midAngle);
                inward = (midAngle >= 270) || (midAngle <= 90);
            }
            if (inward == true && shouldReverse) {
                this._textInfo.reverse();
                this._textReversed = true;
            }
            // if ((inward == false && align == "left") || (inward == true && align == "right")) {
            // 	clockwise *= -1;
            // }
            // Process text info produced by _measure()
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._textInfo, function (line, _index) {
                var textHeight = line.height;
                // Adjust radius (for `inside = false`)
                // Radius adjustment for `inside = false` is below the line calculation
                if (!inside) {
                    radius += textHeight;
                }
                // Reverse letters if we're painting them counter-clockwise
                if (((clockwise == -1 && inward) || (clockwise == 1 && !inward)) && shouldReverse) {
                    line.textChunks.reverse();
                }
                // Init angles
                var lineStartAngle = startAngle;
                deltaAngle = 0;
                // Adjust for center-align
                if (align == "center") {
                    lineStartAngle += (line.width / (radius - textHeight)) / 2 * -clockwise;
                    deltaAngle = lineStartAngle - startAngle;
                }
                // if (inward == "auto") {
                // 	let midAngle;
                // 	if (align == "left") {
                // 		midAngle = (lineStartAngle + deltaAngle / 2) * $math.DEGREES;
                // 	}
                // 	else if () {
                // 		midAngle = (lineStartAngle - deltaAngle / 2) * $math.DEGREES;
                // 	}
                // 	inward = (midAngle >= 270) || (midAngle <= 90);
                // }
                // Rotate letters if they are facing outward
                lineStartAngle += (Math.PI * (inward ? 0 : 1)); // Rotate 180 if outward
                // Savepoint
                context.save();
                if (interactive) {
                    ghostContext.save();
                }
                // Assume starting angle
                context.rotate(lineStartAngle);
                if (interactive) {
                    ghostContext.rotate(lineStartAngle);
                }
                var angleShift = 0;
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(line.textChunks, function (chunk, _index) {
                    // Draw the letter
                    var char = chunk.text;
                    var charWidth = chunk.width;
                    // Rotate half a letter
                    angleShift = (charWidth / 2) / (radius - textHeight) * clockwise;
                    context.rotate(angleShift);
                    if (interactive) {
                        ghostContext.rotate(angleShift);
                    }
                    // Set style
                    if (chunk.style) {
                        context.save();
                        ghostContext.save();
                        context.font = chunk.style;
                        if (interactive) {
                            ghostContext.font = chunk.style;
                        }
                    }
                    if (chunk.fill) {
                        context.save();
                        context.fillStyle = chunk.fill.toCSS();
                        // Color does not affect ghostContext so we not set it
                    }
                    // Center letters
                    context.textBaseline = "middle";
                    context.textAlign = "center";
                    if (interactive) {
                        ghostContext.textBaseline = "middle";
                        ghostContext.textAlign = "center";
                    }
                    // Plop the letter
                    if (layerDirty) {
                        context.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                    }
                    if (interactive) {
                        ghostContext.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                    }
                    if (chunk.fill) {
                        context.restore();
                        // Color does not affect ghostContext so we not set it
                    }
                    // Reset style
                    if (chunk.style) {
                        context.restore();
                        ghostContext.restore();
                    }
                    // Rotate half a letter and add spacing
                    angleShift = (charWidth / 2 + kerning) / (radius - textHeight) * clockwise;
                    context.rotate(angleShift);
                    if (interactive) {
                        ghostContext.rotate(angleShift);
                    }
                });
                // Restore angle
                context.restore();
                if (interactive) {
                    ghostContext.restore();
                }
                // Adjust radius (for `inside = true`)
                if (inside) {
                    radius -= textHeight;
                }
            });
            // Restore
            context.restore();
            if (interactive) {
                ghostContext.restore();
            }
        }
    });
    Object.defineProperty(CanvasRadialText.prototype, "_measure", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (layer) {
            switch (this.textType) {
                case "circular":
                    return this._measureCircular(layer);
                default:
                    return _super.prototype._measure.call(this, layer);
            }
        }
    });
    Object.defineProperty(CanvasRadialText.prototype, "_measureCircular", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (layer) {
            var _this = this;
            var context = layer.context;
            var ghostContext = this._renderer._ghostContext;
            // Reset text info
            this._textInfo = [];
            this._textReversed = false;
            // Pre-render
            context.save();
            ghostContext.save();
            this._prerender(layer, true);
            // Split up text into lines
            var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
            var styleRestored = true;
            // Iterate through the lines
            var offsetY = 0;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(lines, function (line, _index) {
                // Split up line into format/value chunks
                var chunks = _util_TextFormatter__WEBPACK_IMPORTED_MODULE_10__.TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                // Init line object
                var lineInfo = {
                    offsetY: offsetY,
                    ascent: 0,
                    width: 0,
                    height: 0,
                    left: 0,
                    right: 0,
                    textChunks: []
                };
                var currentStyle;
                var currentFill;
                var currentChunkWidth;
                //while(chunk = chunks.shift()) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(chunks, function (chunk, _index) {
                    // Format chunk
                    if (chunk.type == "format") {
                        if (chunk.text == "[/]") {
                            if (!styleRestored) {
                                context.restore();
                                ghostContext.restore();
                                styleRestored = true;
                            }
                            currentFill = undefined;
                            currentStyle = undefined;
                            currentChunkWidth = undefined;
                        }
                        else {
                            var format = _util_TextFormatter__WEBPACK_IMPORTED_MODULE_10__.TextFormatter.getTextStyle(chunk.text);
                            var fontStyle = _this._getFontStyle(format);
                            context.save();
                            ghostContext.save();
                            context.font = fontStyle;
                            currentStyle = fontStyle;
                            if (format.fill) {
                                currentFill = format.fill;
                            }
                            if (format.width) {
                                currentChunkWidth = _util_Type__WEBPACK_IMPORTED_MODULE_9__.toNumber(format.width);
                            }
                            styleRestored = false;
                        }
                    }
                    // Text format
                    else if (chunk.type == "value") {
                        // Measure each letter
                        for (var i = 0; i < chunk.text.length; i++) {
                            var char = chunk.text[i];
                            // Measure
                            var metrics = _this._measureText(char.replace(" ", "."), context);
                            var chunkWidth = metrics.width;
                            // Chunk width?
                            if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                chunkWidth = currentChunkWidth;
                            }
                            var chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                            if (chunkHeight > lineInfo.height) {
                                lineInfo.height = chunkHeight;
                            }
                            if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                                lineInfo.ascent = metrics.actualBoundingBoxAscent;
                            }
                            lineInfo.width += chunkWidth;
                            lineInfo.left += metrics.actualBoundingBoxLeft;
                            lineInfo.right += metrics.actualBoundingBoxRight;
                            lineInfo.textChunks.push({
                                style: currentStyle,
                                fill: currentFill,
                                text: char,
                                width: chunkWidth,
                                height: chunkHeight + metrics.actualBoundingBoxDescent,
                                left: metrics.actualBoundingBoxLeft,
                                right: metrics.actualBoundingBoxRight,
                                ascent: metrics.actualBoundingBoxAscent,
                                offsetX: 0,
                                offsetY: chunkHeight
                            });
                        }
                    }
                });
                if (_this.style.lineHeight instanceof _util_Percent__WEBPACK_IMPORTED_MODULE_11__.Percent) {
                    lineInfo.height *= _this.style.lineHeight.value;
                }
                else {
                    lineInfo.height *= _this.style.lineHeight || 1.2;
                }
                _this._textInfo.push(lineInfo);
                //lineInfo.offsetY += lineInfo.ascent;
                offsetY += lineInfo.height;
            });
            if (!styleRestored) {
                context.restore();
                ghostContext.restore();
            }
            // Adjust chunk internal offsets
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._textInfo, function (lineInfo) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(lineInfo.textChunks, function (chunk) {
                    chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
                });
            });
            context.restore();
            ghostContext.restore();
            return {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0,
            };
        }
    });
    return CanvasRadialText;
}(CanvasText));

/**
 * @ignore
 */
var CanvasImage = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasImage, _super);
    function CanvasImage(renderer, image) {
        var _this = _super.call(this, renderer) || this;
        Object.defineProperty(_this, "width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "tainted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "shadowColor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "shadowBlur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "shadowOffsetX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "shadowOffsetY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "shadowOpacity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_imageMask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this.image = image;
        return _this;
    }
    Object.defineProperty(CanvasImage.prototype, "getLocalBounds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._localBounds) {
                var w = 0;
                var h = 0;
                if (this.width) {
                    w = this.width;
                }
                if (this.height) {
                    h = this.height;
                }
                this._localBounds = {
                    left: 0,
                    top: 0,
                    right: w,
                    bottom: h
                };
                this._addBounds(this._localBounds);
            }
            return this._localBounds;
        }
    });
    Object.defineProperty(CanvasImage.prototype, "_render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (parentLayer) {
            _super.prototype._render.call(this, parentLayer);
            if (this.image) {
                var layer = this._layer || parentLayer;
                if (this.tainted === undefined) {
                    this.tainted = isTainted(this.image);
                    layer.tainted = true;
                }
                if (this.tainted && this._renderer._omitTainted) {
                    return;
                }
                if (layer.dirty) {
                    if (this.shadowColor) {
                        layer.context.shadowColor = this.shadowColor.toCSS(this.shadowOpacity || 1);
                    }
                    if (this.shadowBlur) {
                        layer.context.shadowBlur = this.shadowBlur;
                    }
                    if (this.shadowOffsetX) {
                        layer.context.shadowOffsetX = this.shadowOffsetX;
                    }
                    if (this.shadowOffsetY) {
                        layer.context.shadowOffsetY = this.shadowOffsetY;
                    }
                    var width = this.width || this.image.naturalWidth;
                    var height = this.height || this.image.naturalHeight;
                    layer.context.drawImage(this.image, 0, 0, width, height);
                }
                if (this.interactive && this._isInteractive()) {
                    var mask = this._getMask(this.image);
                    this._renderer._ghostContext.drawImage(mask, 0, 0);
                }
            }
        }
    });
    Object.defineProperty(CanvasImage.prototype, "clear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.clear.call(this);
            this.image = undefined;
            this._imageMask = undefined;
        }
    });
    Object.defineProperty(CanvasImage.prototype, "_getMask", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (image) {
            if (this._imageMask === undefined) {
                var width = this.width || image.naturalWidth;
                var height = this.height || image.naturalHeight;
                // We need to create a second canvas because destination-in clears out the entire canvas
                var canvas = document.createElement("canvas");
                canvas.width = width;
                canvas.height = height;
                var context = canvas.getContext("2d");
                context.imageSmoothingEnabled = false;
                context.fillStyle = this._getColorId();
                context.fillRect(0, 0, width, height);
                if (!isTainted(image)) {
                    context.globalCompositeOperation = "destination-in";
                    context.drawImage(image, 0, 0, width, height);
                }
                this._imageMask = canvas;
            }
            return this._imageMask;
        }
    });
    return CanvasImage;
}(CanvasDisplayObject));

/**
 * @ignore
 */
var CanvasRendererEvent = /** @class */ (function () {
    function CanvasRendererEvent(event, point) {
        Object.defineProperty(this, "event", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: event
        });
        Object.defineProperty(this, "point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: point
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "simulated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "native", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        if (_util_Utils__WEBPACK_IMPORTED_MODULE_1__.supports("touchevents") && event instanceof Touch) {
            this.id = event.identifier;
        }
        else {
            this.id = null;
        }
    }
    return CanvasRendererEvent;
}());

/**
 * @ignore
 */
var CanvasRenderer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(CanvasRenderer, _super);
    function CanvasRenderer() {
        var _this = _super.call(this, function () {
        }) || this;
        Object.defineProperty(_this, "view", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("div")
        });
        Object.defineProperty(_this, "_layerDom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("div")
        });
        Object.defineProperty(_this, "layers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_dirtyLayers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "defaultLayer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.getLayer(0)
        });
        Object.defineProperty(_this, "_ghostView", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_ghostContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_patternCanvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document.createElement("canvas")
        });
        Object.defineProperty(_this, "_patternContext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._patternCanvas.getContext("2d")
        });
        Object.defineProperty(_this, "_width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_clientWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_clientHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "resolution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: window.devicePixelRatio
        });
        Object.defineProperty(_this, "interactionsEnabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "_listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_colorId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_colorMap", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_forceInteractive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_omitTainted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // TODO this should store the Id as well
        Object.defineProperty(_this, "_hovering", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        Object.defineProperty(_this, "_dragging", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_mousedown", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_lastPointerMoveEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_mouseMoveThrottler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _util_Throttler__WEBPACK_IMPORTED_MODULE_12__.Throttler(function () {
                _this._dispatchGlobalMousemove(_this._lastPointerMoveEvent);
            })
        });
        _this.view.appendChild(_this._layerDom);
        // @todo : do the same for ghost
        _this._ghostView = document.createElement("canvas");
        _this._ghostContext = _this._ghostView.getContext("2d", { alpha: false });
        _this._ghostContext.imageSmoothingEnabled = false;
        // Monitor for possible pixel ratio changes (when page is zoomed)
        window.addEventListener("resize", function (_ev) {
            _this.resolution = window.devicePixelRatio;
        });
        // We need this in order top prevent default touch gestures when dragging
        // draggable elements
        if (_util_Utils__WEBPACK_IMPORTED_MODULE_1__.supports("touchevents")) {
            document.addEventListener("touchstart", function (ev) {
                if (_this._dragging.length !== 0) {
                    ev.preventDefault();
                }
            }, { passive: false });
        }
        // Prevent scrolling of the window when hovering on "wheelable" object
        if (_util_Utils__WEBPACK_IMPORTED_MODULE_1__.supports("wheelevents")) {
            _this.view.addEventListener("wheel", function (ev) {
                var prevent = false;
                _this._hovering.forEach(function (obj) {
                    if (obj.wheelable) {
                        prevent = true;
                        return false;
                    }
                });
                if (prevent) {
                    ev.preventDefault();
                }
            }, { passive: false });
        }
        return _this;
    }
    ;
    Object.defineProperty(CanvasRenderer.prototype, "createLinearGradient", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x1, y1, x2, y2) {
            return this.defaultLayer.context.createLinearGradient(x1, y1, x2, y2);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "createRadialGradient", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x1, y1, radius1, x2, y2, radius2) {
            return this.defaultLayer.context.createRadialGradient(x1, y1, radius1, x2, y2, radius2);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "createPattern", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (graphics, background, repetition, width, height) {
            // const patternCanvas = document.createElement("canvas");
            // const patternContext = patternCanvas.getContext("2d")!;
            // patternCanvas.width = width;
            // patternCanvas.height = height;
            // if (fill) {
            // 	patternContext.fillStyle = fill.toCSS();
            // 	patternContext.fillRect(0, 0, patternCanvas.width, patternCanvas.height);
            // }
            // const layer = {
            // 	view: patternCanvas,
            // 	context: patternContext,
            // 	visible: true,
            // 	order: 0,
            // 	width: width,
            // 	height: height,
            // 	dirty: true
            // };
            // // patternContext.arc(0, 0, 50, 0, .5 * Math.PI);
            // // patternContext.stroke();
            // image.targetLayer = layer;
            // image.render(layer);
            //this._layerDom.appendChild(patternCanvas);
            this._patternCanvas.width = width;
            this._patternCanvas.height = height;
            this._patternContext.clearRect(0, 0, width, height);
            // patternCanvas.style.width = width * this.resolution + "px";
            // patternCanvas.style.height = height * this.resolution + "px";
            background.renderDetached(this._patternContext);
            graphics.renderDetached(this._patternContext);
            return this._patternContext.createPattern(this._patternCanvas, repetition);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makeContainer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return new CanvasContainer(this);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makeGraphics", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return new CanvasGraphics(this);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makeText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text, style) {
            return new CanvasText(this, text, style);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makeTextStyle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return new CanvasTextStyle();
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makeRadialText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text, style) {
            return new CanvasRadialText(this, text, style);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "makePicture", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (image) {
            return new CanvasImage(this, image);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "resize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (width, height) {
            var _this = this;
            this._clientWidth = width;
            this._clientHeight = height;
            this._width = Math.floor(width * this.resolution);
            this._height = Math.floor(height * this.resolution);
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.layers, function (layer) {
                if (layer) {
                    layer.dirty = true;
                    if (layer.width != null) {
                        layer.view.width = layer.width;
                        layer.view.style.width = layer.width + "px";
                    }
                    else {
                        layer.view.width = _this._width;
                        layer.view.style.width = width + "px";
                    }
                    if (layer.height != null) {
                        layer.view.height = layer.height;
                        layer.view.style.height = layer.height + "px";
                    }
                    else {
                        layer.view.height = _this._height;
                        layer.view.style.height = height + "px";
                    }
                }
            });
            // @todo: do the same for ghost canvases
            this._ghostView.width = this._width;
            this._ghostView.height = this._height;
            this._ghostView.style.width = width + "px";
            this._ghostView.style.height = height + "px";
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "createDetachedLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var view = document.createElement("canvas");
            var context = view.getContext("2d");
            var layer = {
                view: view,
                context: context,
                order: 0,
                visible: true,
                width: undefined,
                height: undefined,
                dirty: true,
                tainted: false
            };
            view.style.position = "absolute";
            view.style.top = "0px";
            view.style.left = "0px";
            return layer;
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "getLayerByOrder", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (order) {
            var layers = this.layers;
            var length = layers.length;
            for (var i = 0; i < length; i++) {
                var layer = layers[i];
                if (layer.order == order) {
                    return layer;
                }
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "getLayer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (order, visible) {
            if (visible === void 0) { visible = true; }
            var layers = this.layers;
            var existingLayer = this.getLayerByOrder(order);
            if (existingLayer) {
                return existingLayer;
            }
            var layer = this.createDetachedLayer();
            layer.order = order;
            layer.visible = visible;
            if (layer.visible && this._width) {
                layer.view.width = this._width;
                layer.view.style.width = this._clientWidth + "px";
                layer.view.height = this._height;
                layer.view.style.height = this._clientHeight + "px";
            }
            layers.push(layer);
            layers.sort(function (a, b) {
                if (a.order > b.order) {
                    return 1;
                }
                else if (a.order < b.order) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
            var length = layers.length;
            var layerIndex = _util_Array__WEBPACK_IMPORTED_MODULE_2__.indexOf(layers, layer);
            var next;
            for (var i = layerIndex + 1; i < length; i++) {
                if (layers[i].visible) {
                    next = layers[i];
                    break;
                }
            }
            if (visible) {
                if (next === undefined) {
                    this._layerDom.appendChild(layer.view);
                }
                else {
                    this._layerDom.insertBefore(layer.view, next.view);
                }
            }
            return layer;
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "render", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root) {
            var _this = this;
            this._dirtyLayers.length = 0;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.layers, function (layer) {
                if (layer) {
                    if (layer.dirty && layer.visible) {
                        _this._dirtyLayers.push(layer);
                        layer.context.save();
                        layer.context.clearRect(0, 0, _this._width, _this._height);
                    }
                }
            });
            this._ghostContext.save();
            //this._ghostContext.clearRect(0, 0, this._width, this._height);
            //this._ghostContext.beginPath();
            this._ghostContext.fillStyle = '#000';
            this._ghostContext.fillRect(0, 0, this._width, this._height);
            root.render(this.defaultLayer);
            this._ghostContext.restore();
            //setTimeout(() => {
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._dirtyLayers, function (layer) {
                layer.context.restore();
                layer.dirty = false;
            });
            //}, 100)
            if (this._hovering.size && this._lastPointerMoveEvent) {
                this._mouseMoveThrottler.run();
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "paintId", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (obj) {
            var id = distributeId(++this._colorId);
            var color = _util_Color__WEBPACK_IMPORTED_MODULE_8__.Color.fromHex(id).toCSS();
            this._colorMap[color] = obj;
            return color;
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_removeObject", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (obj) {
            if (obj._colorId !== undefined) {
                delete this._colorMap[obj._colorId];
            }
        }
    });
    // protected _identifyObjectByColor(colorId: number): CanvasDisplayObject | undefined {
    // 	return this._colorMap[colorId];
    // }
    Object.defineProperty(CanvasRenderer.prototype, "getEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent, adjustPoint) {
            if (adjustPoint === void 0) { adjustPoint = true; }
            var bbox = adjustPoint ? this.view.getBoundingClientRect() : { left: 0, top: 0 };
            return new CanvasRendererEvent(originalEvent, originalEvent.clientX || originalEvent.clientY ? {
                x: originalEvent.clientX - (originalEvent.clientX ? bbox.left : 0),
                y: originalEvent.clientY - (originalEvent.clientY ? bbox.top : 0),
            } : {
                x: 0,
                y: 0
            });
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_getHitTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (point) {
            if (point.x < 0 || point.x > this._width / this.resolution || point.y < 0 || point.y > this._height / this.resolution) {
                return;
            }
            else {
                var pixel = this._ghostContext.getImageData(
                // TODO should this round ?
                Math.round(point.x * this.resolution), Math.round(point.y * this.resolution), 1, 1);
                if (pixel.data[0] === 0 && pixel.data[1] === 0 && pixel.data[2] === 0) {
                    return false;
                }
                var colorId = _util_Color__WEBPACK_IMPORTED_MODULE_8__.Color.fromRGB(pixel.data[0], pixel.data[1], pixel.data[2]).toCSS();
                var hit = this._colorMap[colorId];
                return hit;
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_withEvents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, f) {
            var events = this._events[key];
            if (events !== undefined) {
                events.dispatching = true;
                try {
                    f(events);
                }
                finally {
                    events.dispatching = false;
                    if (events.cleanup) {
                        events.cleanup = false;
                        _util_Array__WEBPACK_IMPORTED_MODULE_2__.keepIf(events.callbacks, function (callback) {
                            return !callback.disposed;
                        });
                        if (events.callbacks.length === 0) {
                            events.disposer.dispose();
                            delete this._events[key];
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchEventAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, event) {
            if (!this.interactionsEnabled) {
                return;
            }
            this._withEvents(key, function (events) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(events.callbacks, function (callback) {
                    if (!callback.disposed) {
                        callback.callback.call(callback.context, event);
                    }
                });
            });
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, target, event) {
            if (!this.interactionsEnabled) {
                return false;
            }
            var dispatched = false;
            this._withEvents(key, function (events) {
                _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(events.callbacks, function (callback) {
                    if (!callback.disposed && callback.object === target) {
                        callback.callback.call(callback.context, event);
                        dispatched = true;
                    }
                });
            });
            return dispatched;
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchMousedown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            if (originalEvent.button > 0) {
                // Ignore non-primary mouse buttons
                return;
            }
            var event = this.getEvent(originalEvent);
            var target = this._getHitTarget(event.point);
            if (target) {
                var id_1 = event.id;
                var dragged_1 = false;
                eachTargets(target, function (obj) {
                    var info = { id: id_1, value: obj };
                    _this._mousedown.push(info);
                    if (!dragged_1 && _this._dispatchEvent("pointerdown", obj, event)) {
                        // Only dispatch the first element which matches
                        dragged_1 = true;
                        var has = _this._dragging.some(function (x) {
                            return x.value === obj && x.id === id_1;
                        });
                        if (!has) {
                            _this._dragging.push(info);
                        }
                    }
                    return true;
                });
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMousemove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            var event = this.getEvent(originalEvent);
            var target = this._getHitTarget(event.point);
            event.native = this._isNativeEvent(originalEvent);
            if (target) {
                this._hovering.forEach(function (obj) {
                    if (!obj.contains(target)) {
                        _this._hovering.delete(obj);
                        if (obj.cursorOverStyle) {
                            _util_Utils__WEBPACK_IMPORTED_MODULE_1__.setStyle(document.body, "cursor", obj._replacedCursorStyle);
                        }
                        _this._dispatchEvent("pointerout", obj, event);
                    }
                });
                if (event.native) {
                    eachTargets(target, function (obj) {
                        if (!_this._hovering.has(obj)) {
                            _this._hovering.add(obj);
                            if (obj.cursorOverStyle) {
                                obj._replacedCursorStyle = _util_Utils__WEBPACK_IMPORTED_MODULE_1__.getStyle(document.body, "cursor");
                                _util_Utils__WEBPACK_IMPORTED_MODULE_1__.setStyle(document.body, "cursor", obj.cursorOverStyle);
                            }
                            _this._dispatchEvent("pointerover", obj, event);
                        }
                        return true;
                    });
                }
                //} else if (target === false) {
            }
            else {
                this._hovering.forEach(function (obj) {
                    if (obj.cursorOverStyle) {
                        _util_Utils__WEBPACK_IMPORTED_MODULE_1__.setStyle(document.body, "cursor", obj._replacedCursorStyle);
                    }
                    _this._dispatchEvent("pointerout", obj, event);
                });
                this._hovering.clear();
            }
            this._dispatchEventAll("globalpointermove", event);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_isNativeEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (event.target) {
                return event.target.parentNode === this._layerDom;
            }
            return true;
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMouseup", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var event = this.getEvent(originalEvent);
            //const target = this._getHitTarget(event.point);
            this._dispatchEventAll("globalpointerup", event);
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            if (this._dragging.length !== 0) {
                var event_1 = this.getEvent(originalEvent);
                var id_2 = event_1.id;
                this._dragging.forEach(function (obj) {
                    if (obj.id === id_2) {
                        _this._dispatchEvent("pointermove", obj.value, event_1);
                    }
                });
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragEnd", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            if (originalEvent.button > 0) {
                // Ignore non-primary mouse buttons
                return;
            }
            var event = this.getEvent(originalEvent);
            var id = event.id;
            if (this._mousedown.length !== 0) {
                var target_1 = this._getHitTarget(event.point);
                if (target_1) {
                    this._mousedown.forEach(function (obj) {
                        if (obj.id === id && obj.value.contains(target_1)) {
                            _this._dispatchEvent("click", obj.value, event);
                        }
                    });
                }
                this._mousedown.length = 0;
            }
            if (this._dragging.length !== 0) {
                this._dragging.forEach(function (obj) {
                    if (obj.id === id) {
                        _this._dispatchEvent("pointerup", obj.value, event);
                    }
                });
                this._dragging.length = 0;
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchDoubleClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            var event = this.getEvent(originalEvent);
            var target = this._getHitTarget(event.point);
            if (target) {
                eachTargets(target, function (obj) {
                    if (_this._dispatchEvent("dblclick", obj, event)) {
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_dispatchWheel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (originalEvent) {
            var _this = this;
            var event = this.getEvent(originalEvent);
            this._hovering.forEach(function (obj) {
                if (obj.wheelable) {
                    _this._dispatchEvent("wheel", obj, event);
                }
            });
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_makeSharedEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, f) {
            var _this = this;
            if (this._listeners[key] === undefined) {
                var listener_1 = f();
                this._listeners[key] = new _util_Disposer__WEBPACK_IMPORTED_MODULE_5__.CounterDisposer(function () {
                    delete _this._listeners[key];
                    listener_1.dispose();
                });
            }
            return this._listeners[key].increment();
        }
    });
    // This ensures that only a single DOM event is added (e.g. only a single mousemove event listener)
    Object.defineProperty(CanvasRenderer.prototype, "_initEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            var _this = this;
            switch (key) {
                case "globalpointermove":
                case "pointerover":
                case "pointerout":
                    return this._makeSharedEvent("pointermove", function () {
                        //const throttler = new Throttler();
                        // TODO handle throttling properly for multitouch
                        return onPointerEvent(window, "pointermove", function (ev) {
                            _this._lastPointerMoveEvent = ev;
                            _this._mouseMoveThrottler.run();
                            //throttler.throttle(() => {
                            //});
                        });
                    });
                case "globalpointerup":
                    return this._makeSharedEvent("pointerup", function () {
                        //const throttler = new Throttler();
                        // TODO handle throttling properly for multitouch
                        return onPointerEvent(window, "pointerup", function (ev) {
                            //throttler.throttle(() => {
                            _this._dispatchGlobalMouseup(ev);
                            //});
                        });
                    });
                case "click":
                case "pointerdown":
                case "pointermove":
                case "pointerup":
                    return this._makeSharedEvent("pointerdown", function () {
                        //const throttler = new Throttler();
                        var mousedown = onPointerEvent(_this.view, "pointerdown", function (ev) {
                            _this._dispatchMousedown(ev);
                        });
                        // TODO handle throttling properly for multitouch
                        var mousemove = onPointerEvent(window, "pointermove", function (ev) {
                            //throttler.throttle(() => {
                            _this._dispatchDragMove(ev);
                            //});
                        });
                        var mouseup = onPointerEvent(window, "pointerup", function (ev) {
                            _this._dispatchDragEnd(ev);
                        });
                        return new _util_Disposer__WEBPACK_IMPORTED_MODULE_5__.Disposer(function () {
                            mousedown.dispose();
                            mousemove.dispose();
                            mouseup.dispose();
                        });
                    });
                case "dblclick":
                    return this._makeSharedEvent("dblclick", function () {
                        return onPointerEvent(window, "dblclick", function (ev) {
                            _this._dispatchDoubleClick(ev);
                        });
                    });
                case "wheel":
                    return this._makeSharedEvent("wheel", function () {
                        return _util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(window, _util_Utils__WEBPACK_IMPORTED_MODULE_1__.getRendererEvent("wheel"), function (event) {
                            _this._dispatchWheel(event);
                        });
                    });
            }
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "_addEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (object, key, callback, context) {
            var _this = this;
            var events = this._events[key];
            if (events === undefined) {
                events = this._events[key] = {
                    disposer: this._initEvent(key),
                    callbacks: [],
                    dispatching: false,
                    cleanup: false,
                };
            }
            var listener = { object: object, context: context, callback: callback, disposed: false };
            events.callbacks.push(listener);
            return new _util_Disposer__WEBPACK_IMPORTED_MODULE_5__.Disposer(function () {
                listener.disposed = true;
                if (events.dispatching) {
                    events.cleanup = true;
                }
                else {
                    _util_Array__WEBPACK_IMPORTED_MODULE_2__.removeFirst(events.callbacks, listener);
                    if (events.callbacks.length === 0) {
                        events.disposer.dispose();
                        delete _this._events[key];
                    }
                }
            });
        }
    });
    Object.defineProperty(CanvasRenderer.prototype, "getCanvas", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root, options) {
            // Make sure everything is rendered
            this.render(root);
            if (!options) {
                options = {};
            }
            var scale = this.resolution;
            // Check if we need to scale
            if (options.minWidth && (options.minWidth > this._width)) {
                var minScale = options.minWidth / this._width;
                if (minScale > scale) {
                    scale = minScale * this.resolution;
                }
            }
            if (options.minHeight && (options.minHeight > this._height)) {
                var minScale = options.minHeight / this._height;
                if (minScale > scale) {
                    scale = minScale * this.resolution;
                }
            }
            if (options.maxWidth && (options.maxWidth < this._width)) {
                var maxScale = options.maxWidth / this._width;
                if (maxScale < scale) {
                    scale = maxScale * this.resolution;
                }
            }
            if (options.maxHeight && (options.maxHeight > this._height)) {
                var maxScale = options.maxHeight / this._height;
                if (maxScale < scale) {
                    scale = maxScale * this.resolution;
                }
            }
            // Check if we need to compensate for pixel ratio
            if (options.maintainPixelRatio) {
                scale /= this.resolution;
            }
            // Set up new canvas for export
            var forceRender = false;
            var canvasWidth = this._width;
            var canvasHeight = this._height;
            var canvas = document.createElement("canvas");
            if (scale != this.resolution) {
                forceRender = true;
                canvasWidth = this._width * scale / this.resolution;
                canvasHeight = this._height * scale / this.resolution;
            }
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            // Context
            var context = canvas.getContext("2d");
            var width = 0;
            var height = 0;
            var needRerender = false;
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.layers, function (layer) {
                if (layer && layer.visible) {
                    if (layer.tainted || forceRender) {
                        needRerender = true;
                        layer.exportableView = layer.view;
                        layer.exportableContext = layer.context;
                        layer.view = document.createElement("canvas");
                        layer.view.width = canvasWidth;
                        layer.view.height = canvasHeight;
                        layer.context = layer.view.getContext("2d");
                        layer.dirty = true;
                        layer.scale = scale;
                    }
                }
            });
            if (needRerender) {
                this._omitTainted = true;
                this.render(root);
                this._omitTainted = false;
            }
            _util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.layers, function (layer) {
                if (layer && layer.visible) {
                    // Layer is fine. Just plop it into our target canvas
                    context.drawImage(layer.view, 0, 0);
                    // Restore layer original canvas
                    if (layer.exportableView) {
                        layer.view = layer.exportableView;
                        layer.exportableView = undefined;
                    }
                    if (layer.exportableContext) {
                        layer.context = layer.exportableContext;
                        layer.exportableContext = undefined;
                    }
                    if (width < layer.view.clientWidth) {
                        width = layer.view.clientWidth;
                    }
                    if (height < layer.view.clientHeight) {
                        height = layer.view.clientHeight;
                    }
                    layer.scale = undefined;
                }
            });
            canvas.style.width = width + "px";
            canvas.style.height = height + "px";
            return canvas;
        }
    });
    return CanvasRenderer;
}(_util_Disposer__WEBPACK_IMPORTED_MODULE_5__.Disposer));

//# sourceMappingURL=CanvasRenderer.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlendMode": () => (/* binding */ BlendMode)
/* harmony export */ });
;
/**
 * From https://github.com/pixijs/pixi.js/blob/3dd0ff9a935f0bc13a09aefff9eb2872f02c51b9/packages/canvas/canvas-renderer/src/utils/mapCanvasBlendModesToPixi.ts#L13
 */
var BlendMode;
(function (BlendMode) {
    BlendMode["ADD"] = "lighter";
    BlendMode["COLOR"] = "color";
    BlendMode["COLOR_BURN"] = "color-burn";
    BlendMode["COLOR_DODGE"] = "color-dodge";
    BlendMode["DARKEN"] = "darken";
    BlendMode["DIFFERENCE"] = "difference";
    BlendMode["DST_OVER"] = "destination-over";
    BlendMode["EXCLUSION"] = "exclusion";
    BlendMode["HARD_LIGHT"] = "hard-light";
    BlendMode["HUE"] = "hue";
    BlendMode["LIGHTEN"] = "lighten";
    BlendMode["LUMINOSITY"] = "luminosity";
    BlendMode["MULTIPLY"] = "multiply";
    BlendMode["NORMAL"] = "source-over";
    BlendMode["OVERLAY"] = "overlay";
    BlendMode["SATURATION"] = "saturation";
    BlendMode["SCREEN"] = "screen";
    BlendMode["SOFT_LIGHT"] = "soft-light";
    BlendMode["SRC_ATOP"] = "source-atop";
    BlendMode["XOR"] = "xor";
})(BlendMode || (BlendMode = {}));
//# sourceMappingURL=Renderer.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "waitForAnimations": () => (/* binding */ waitForAnimations),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "defaultInterpolate": () => (/* binding */ defaultInterpolate),
/* harmony export */   "percentInterpolate": () => (/* binding */ percentInterpolate),
/* harmony export */   "colorInterpolate": () => (/* binding */ colorInterpolate),
/* harmony export */   "getInterpolate": () => (/* binding */ getInterpolate),
/* harmony export */   "AnimationTime": () => (/* binding */ AnimationTime)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");





/**
 * @ignore
 */
function waitForAnimations(animations) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
        var promises_1;
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(animations !== undefined)) return [3 /*break*/, 2];
                    promises_1 = [];
                    _Object__WEBPACK_IMPORTED_MODULE_1__.each(animations, function (_, animation) {
                        promises_1.push(animation.waitForStop());
                    });
                    return [4 /*yield*/, Promise.all(promises_1)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    });
}
/**
 * @ignore
 */
function normalize(value, min, max) {
    if (min === max) {
        return 0;
    }
    else {
        return Math.min(Math.max((value - min) * (1 / (max - min)), 0), 1);
    }
}
/**
 * @ignore
 */
function range(diff, from, to) {
    return from + (diff * (to - from));
}
/**
 * @ignore
 */
function defaultInterpolate(diff, from, to) {
    if (diff >= 1) {
        return to;
    }
    else {
        return from;
    }
}
/**
 * @ignore
 */
function percentInterpolate(diff, from, to) {
    return new _Percent__WEBPACK_IMPORTED_MODULE_2__.Percent(range(diff, from.percent, to.percent));
}
/**
 * @ignore
 */
function colorInterpolate(diff, from, to) {
    return _Color__WEBPACK_IMPORTED_MODULE_3__.Color.interpolate(diff, from, to);
}
/**
 * @ignore
 */
function getInterpolate(from, to) {
    if (typeof from === "number" && typeof to === "number") {
        return range;
    }
    if (from instanceof _Percent__WEBPACK_IMPORTED_MODULE_2__.Percent && to instanceof _Percent__WEBPACK_IMPORTED_MODULE_2__.Percent) {
        return percentInterpolate;
    }
    if (from instanceof _Color__WEBPACK_IMPORTED_MODULE_3__.Color && to instanceof _Color__WEBPACK_IMPORTED_MODULE_3__.Color) {
        return colorInterpolate;
    }
    return defaultInterpolate;
}
/**
 * @ignore
 */
var AnimationTime = /** @class */ (function () {
    function AnimationTime(entity, duration) {
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_playingDuration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_startingTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _EventDispatcher__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher()
        });
        Object.defineProperty(this, "easing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._entity = entity;
        this._duration = duration;
    }
    Object.defineProperty(AnimationTime.prototype, "_stopEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var type = "stopped";
            if (this.events.isEnabled(type)) {
                this.events.dispatch(type, { type: type, target: this });
            }
        }
    });
    Object.defineProperty(AnimationTime.prototype, "_runAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            if (this._playingDuration !== null) {
                if (this._startingTime === null) {
                    this._startingTime = currentTime;
                    return false;
                }
                else {
                    var diff = (currentTime - this._startingTime) / this._playingDuration;
                    if (diff >= 1) {
                        this._playingDuration = null;
                        this._startingTime = null;
                        this._from = this._to;
                        this._current = this._to;
                        this._entity.markDirty();
                        this._stopEvent();
                        var type = "ended";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                        return true;
                    }
                    else {
                        this._current = range(diff, this._from, this._to);
                        this._entity.markDirty();
                        var type = "progress";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this, progress: diff });
                        }
                        return false;
                    }
                }
            }
            else {
                return true;
            }
        }
    });
    Object.defineProperty(AnimationTime.prototype, "_play", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._from = this._current;
            if (this._playingDuration === null) {
                this._entity._root._addAnimation(this);
                var type = "started";
                if (this.events.isEnabled(type)) {
                    this.events.dispatch(type, { type: type, target: this });
                }
            }
            else {
                this._startingTime = null;
            }
            this._playingDuration = Math.abs(this._to - this._from) * this._duration;
        }
    });
    Object.defineProperty(AnimationTime.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (value) {
            if (this._duration !== value) {
                this._duration = value;
                if (value === 0) {
                    this.jumpTo(this._to);
                }
                else if (this._current !== this._to) {
                    this._play();
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnimationTime.prototype, "current", {
        get: function () {
            if (this.easing) {
                return this.easing(this._current);
            }
            else {
                return this._current;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnimationTime.prototype, "stop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.jumpTo(this._current);
        }
    });
    Object.defineProperty(AnimationTime.prototype, "jumpTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            if (this._current !== value) {
                this._entity.markDirty();
            }
            if (this._playingDuration !== null) {
                this._stopEvent();
            }
            this._playingDuration = null;
            this._startingTime = null;
            this._current = value;
            this._from = value;
            this._to = value;
        }
    });
    Object.defineProperty(AnimationTime.prototype, "tweenTo", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            if (this._current === value || this._duration === 0) {
                this.jumpTo(value);
            }
            else {
                if (this._to !== value) {
                    this._to = value;
                    this._play();
                }
            }
        }
    });
    return AnimationTime;
}());

/*export class AnimationValue extends AnimationTime {
    public _min: number;
    public _max: number;

    constructor(entity: Entity, duration: number, min: number, max: number) {
        super(entity, duration);
        this._min = min;
        this._max = max;
    }

    public get min(): number {
        return this._min;
    }

    public set min(value: number) {
        if (this._min !== value) {
            this._min = value;
            this._entity.markDirty();
        }
    }

    public get max(): number {
        return this._max;
    }

    public set max(value: number) {
        if (this._max !== value) {
            this._max = value;
            this._entity.markDirty();
        }
    }

    public currentValue(): number {
        return range(super.currentTime(), this._min, this._max);
    }

    public jumpToValue(value: number) {
        super.jumpToTime(normalize(value, this._min, this._max));
    }

    public tweenToValue(value: number) {
        super.tweenToTime(normalize(value, this._min, this._max));
    }
}
*/
//# sourceMappingURL=Animation.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "indexOf": () => (/* binding */ indexOf),
/* harmony export */   "any": () => (/* binding */ any),
/* harmony export */   "map": () => (/* binding */ map),
/* harmony export */   "each": () => (/* binding */ each),
/* harmony export */   "eachReverse": () => (/* binding */ eachReverse),
/* harmony export */   "eachContinue": () => (/* binding */ eachContinue),
/* harmony export */   "shiftLeft": () => (/* binding */ shiftLeft),
/* harmony export */   "last": () => (/* binding */ last),
/* harmony export */   "first": () => (/* binding */ first),
/* harmony export */   "insert": () => (/* binding */ insert),
/* harmony export */   "setIndex": () => (/* binding */ setIndex),
/* harmony export */   "pushAll": () => (/* binding */ pushAll),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "removeFirst": () => (/* binding */ removeFirst),
/* harmony export */   "move": () => (/* binding */ move),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "pushOne": () => (/* binding */ pushOne),
/* harmony export */   "replace": () => (/* binding */ replace),
/* harmony export */   "toArray": () => (/* binding */ toArray),
/* harmony export */   "has": () => (/* binding */ has),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "slice": () => (/* binding */ slice),
/* harmony export */   "insertIndex": () => (/* binding */ insertIndex),
/* harmony export */   "removeIndex": () => (/* binding */ removeIndex),
/* harmony export */   "findIndex": () => (/* binding */ findIndex),
/* harmony export */   "find": () => (/* binding */ find),
/* harmony export */   "findMap": () => (/* binding */ findMap),
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "getSortedIndex": () => (/* binding */ getSortedIndex),
/* harmony export */   "getFirstSortedIndex": () => (/* binding */ getFirstSortedIndex),
/* harmony export */   "keepIf": () => (/* binding */ keepIf)
/* harmony export */ });
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");

/**
 * ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Searches `array` for `value`.
 *
 * Returns -1 if not found.
 *
 * @param array  Source array
 * @param value  Value to search
 * @returns Index
 */
function indexOf(array, value) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        // TODO handle NaN
        if (array[i] === value) {
            return i;
        }
    }
    return -1;
}
/**
 * Calls `test` for each element in `array`.
 *
 * If `test` returns `true` then it immediately returns `true`.
 *
 * If `test` returns `false` for all of the elements in `array` then it returns `false`.
 *
 * @param array  Source array
 * @param test   Function which is called on each element
 * @returns Whether `test` returned true or not
 */
function any(array, test) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (test(array[i])) {
            return true;
        }
    }
    return false;
}
/**
 * Calls `fn` function for every member of array and returns a new array out
 * of all outputs.
 *
 * @param array  Source array
 * @param fn     Callback function
 * @returns New array
 */
function map(array, fn) {
    var length = array.length;
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        output[i] = fn(array[i], i);
    }
    return output;
}
/**
 * Iterates through all items in array and calls `fn` function for each of
 * them.
 *
 * @param array  Source array
 * @param fn     Callback function
 */
function each(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        fn(array[i], i);
    }
}
/**
 * Iterates through all items in array in reverse order and calls `fn` function for each of
 * them.
 *
 * @param array  Source array
 * @param fn     Callback function
 */
function eachReverse(array, fn) {
    var i = array.length;
    while (i > 0) {
        --i;
        fn(array[i], i);
    }
}
/**
 * Iterates through all items in array and calls `fn` function for each of
 * them.
 *
 * If `fn` call evaluates to `false`, further iteration is cancelled.
 *
 * @param array  Source array
 * @param fn     Callback function
 */
function eachContinue(array, fn) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (!fn(array[i], i)) {
            break;
        }
    }
}
/**
 * Shifts an item at `index` towards beginning of the array.
 *
 * @param array  Source array
 * @param index  Target element index
 */
function shiftLeft(array, index) {
    var length = array.length;
    for (var i = index; i < length; ++i) {
        array[i - index] = array[i];
    }
    array.length = length - index;
}
/**
 * Returns the last item of the array.
 *
 * @param array  Source array
 * @returns Last item
 */
function last(array) {
    var length = array.length;
    return length ? array[length - 1] : undefined;
}
/**
 * Returns the first item of the array.
 *
 * @param array  Source array
 * @returns Last item
 */
function first(array) {
    return array[0];
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * Caps `index` to be between `0` and `array.length`
 *
 * @param array    Source array
 * @param element  Item to insert
 * @param array    Index to insert item at
 */
function insert(array, element, index) {
    //if (array) {
    index = Math.max(0, Math.min(index, array.length));
    array.splice(index, 0, element);
    //}
}
/**
 * Removes all copies of `element` from `array` (if they exist) and then
 * inserts `element` at `index`.
 *
 * @param array    Source array
 * @param element  Item
 * @param array    Index to move item to
 */
function setIndex(array, element, index) {
    remove(array, element);
    insert(array, element, index);
}
/**
 * Pushes all of the elements from `input` into `array`.
 *
 * @param array  Output array
 * @param input  Input array
 */
function pushAll(array, input) {
    var length = input.length;
    for (var i = 0; i < length; ++i) {
        array.push(input[i]);
    }
}
/**
 * Removes `element` from `array`.
 *
 * If there are multiple copies of `element`, they are all removed.
 *
 * @param array    Source array
 * @param element  Item to remove
 */
function remove(array, element) {
    var found = false;
    var index = array.indexOf(element);
    if (index !== -1) {
        found = true;
        array.splice(index, 1);
        var length_1 = array.length;
        while (index < length_1) {
            // TODO handle NaN
            if (array[index] === element) {
                array.splice(index, 1);
                --length_1;
            }
            else {
                ++index;
            }
        }
    }
    return found;
}
function removeFirst(array, element) {
    var index = array.indexOf(element);
    if (index !== -1) {
        array.splice(index, 1);
        return true;
    }
    else {
        return false;
    }
}
/**
 * Adds an `element` to `array`.
 *
 * If array already contains and item like this, it is removed before adding
 * it again.
 *
 * Optionally `toIndex` can be specified to add element at specific index.
 *
 * @param array    Source array
 * @param element  Item to add
 * @param array    Index to move item to
 */
function move(array, element, toIndex) {
    // @todo this implementation must be the same as the List.moveValue method
    // @todo don't do anything if the desired index is the same as the current index
    var index = indexOf(array, element);
    // @todo remove all old values rather than only the first ?
    if (index !== -1) {
        removeIndex(array, index);
    }
    if (toIndex == null) {
        array.push(element);
    }
    else {
        insertIndex(array, toIndex, element);
    }
}
/**
 * Inserts `element` into `array` at `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param array    Source array
 * @param element  Item to add
 * @param array    Index to add item at
 */
function add(array, element, index) {
    // Append to the end if index is not set
    if (!_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber(index)) {
        array.push(element);
    }
    // Add to the beginning of array if index is 0
    else if (index === 0) {
        array.unshift(element);
    }
    // Add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Pushes `element` into `array` if it doesn't already exist.
 *
 * @param array    Source array
 * @param element  Item to add
 */
function pushOne(array, element) {
    if (array.indexOf(element) === -1) {
        array.push(element);
    }
}
/**
 * Removes `element` from `array` (if it exists) and then inserts `element` at
 * `index`.
 *
 * If `index` is not provided, it will insert `element` at the end of `array`.
 *
 * @param array    Source array
 * @param element  Item to remove
 * @param array    Index to move item to
 */
function replace(array, element, index) {
    // check if exists
    var ind = array.indexOf(element);
    // remove if exists
    if (ind !== -1) {
        array.splice(ind, 1);
    }
    // add to end if index is not set
    if (!_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber(index)) {
        array.push(element);
    }
    // add to indicated place if index is set
    else {
        array.splice(index, 0, element);
    }
}
/**
 * Wraps `input` in an array, if it isn't already an array.
 *
 * @param input  Source value
 * @return An array
 */
function toArray(input) {
    if (Array.isArray(input)) {
        return input;
    }
    else {
        return [input];
    }
}
/**
 * Returns `true` if `element` exists in `array`.
 *
 * @param array    Source array
 * @param element  Item to search for
 * @returns Item in array?
 */
function has(array, element) {
    return indexOf(array, element) !== -1;
}
/**
 * Returns a shallow copy of `array`.
 *
 * @param array  Source array
 * @returns Copy of the array
 */
function copy(array) {
    var length = array.length;
    // It's faster to create the array with a pre-defined length
    var output = new Array(length);
    for (var i = 0; i < length; ++i) {
        // Because the array has a pre-defined length, we have to assign rather than push
        // This is also faster than pushing
        output[i] = array[i];
    }
    return output;
}
/**
 * Returns a copy of `array` which contains all the elements between `start`
 * and `end`. (including `start` and excluding `end`)
 *
 * If `end` is not provided, it defaults to `array.length`.
 *
 * @param array  Source array
 * @param start  Start index
 * @param end    End index
 * @returns Part of the array
 */
function slice(array, start, end) {
    if (end === void 0) { end = array.length; }
    var output = new Array(end - start);
    for (var i = start; i < end; ++i) {
        output[i - start] = array[i];
    }
    return output;
}
/**
 * Inserts a value into array at specific index.
 *
 * @param array  Source array
 * @param index  Index
 * @param value  Value to insert
 */
function insertIndex(array, index, value) {
    array.splice(index, 0, value);
}
/**
 * Removes a value from array at specific index.
 *
 * @param array  Source array
 * @param index  Index
 */
function removeIndex(array, index) {
    array.splice(index, 1);
}
/**
 * Searches the array using custom function and returns index of the item if
 * found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns -1.
 *
 * @param array    Source array
 * @param matches  Search function
 * @returns Index of the item if found
 */
function findIndex(array, matches) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        if (matches(array[i], i)) {
            return i;
        }
    }
    return -1;
}
/**
 * Searches the array using custom function and returns item if found.
 *
 * Will call `matches` function on all items of the array. If return value
 * evaluates to `true`, index is returned.
 *
 * Otherwise returns `undefined`.
 *
 * @param array    Source array
 * @param matches  Search function
 * @returns Item if found
 */
function find(array, matches) {
    var index = findIndex(array, matches);
    if (index !== -1) {
        return array[index];
    }
}
/**
 * Searches the array using custom function and returns item if found.
 *
 * Will call `matches` function on all items of the array. If value
 * is not `undefined`, it returns it.
 *
 * Otherwise returns `undefined`.
 *
 * @param array    Source array
 * @param matches  Search function
 * @returns Item if found
 */
function findMap(array, matches) {
    var length = array.length;
    for (var i = 0; i < length; ++i) {
        var value = matches(array[i], i);
        if (value !== undefined) {
            return value;
        }
    }
}
/**
 * Iterates through all items in array and calls `fn` function for each of
 * them.
 *
 * @param array  Source array
 * @param fn     Callback function
 */
function shuffle(array) {
    // https://stackoverflow.com/a/2450976/449477
    var currentIndex = array.length, temporaryValue, randomIndex;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
}
/**
 * Orders an array using specific `ordering` function and returns right-most index of
 * the `value`.
 *
 * @ignore Exclude from docs
 * @param array     Source array
 * @param ordering  An ordering function
 * @returns Result of the search
 */
function getSortedIndex(array, ordering) {
    var start = 0;
    var end = array.length;
    var found = false;
    while (start < end) {
        // TODO is this faster/slower than using Math.floor ?
        var pivot = (start + end) >> 1;
        var order = ordering(array[pivot]);
        // less
        if (order < 0) {
            start = pivot + 1;
            // equal
        }
        else if (order === 0) {
            found = true;
            start = pivot + 1;
            // more
        }
        else {
            end = pivot;
        }
    }
    return {
        found: found,
        index: (found ? start - 1 : start)
    };
}
/**
 * Orders an array using specific `ordering` function and returns left-most index of
 * the `value`.
 *
 * @ignore Exclude from docs
 * @param array     Source array
 * @param ordering  An ordering function
 * @returns Result of the search
 */
function getFirstSortedIndex(array, ordering) {
    var start = 0;
    var end = array.length;
    var found = false;
    while (start < end) {
        // TODO is this faster/slower than using Math.floor ?
        var pivot = (start + end) >> 1;
        var order = ordering(array[pivot]);
        // less
        if (order < 0) {
            start = pivot + 1;
            // equal
        }
        else if (order === 0) {
            found = true;
            end = pivot;
            // more
        }
        else {
            end = pivot;
        }
    }
    return {
        found: found,
        index: start
    };
}
function keepIf(array, keep) {
    var length = array.length;
    var i = 0;
    while (i < length) {
        if (keep(array[i])) {
            ++i;
        }
        else {
            array.splice(i, 1);
            --length;
        }
    }
}
//# sourceMappingURL=Array.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Children.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Children.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Children": () => (/* binding */ Children)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");



/**
 * A version of [[List]] to hold children of the [[Container]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
 */
var Children = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Children, _super);
    function Children(container) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_container", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this._container = container;
        _this._events = _this.events.onAll(function (change) {
            if (change.type === "clear") {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(change.oldValues, function (x) {
                    _this._onRemoved(x);
                });
            }
            else if (change.type === "push") {
                _this._onInserted(change.newValue);
            }
            else if (change.type === "setIndex") {
                _this._onRemoved(change.oldValue);
                _this._onInserted(change.newValue, change.index);
            }
            else if (change.type === "insertIndex") {
                _this._onInserted(change.newValue, change.index);
            }
            else if (change.type === "removeIndex") {
                _this._onRemoved(change.oldValue);
            }
            else {
                throw new Error("Unknown IListEvent type");
            }
        });
        return _this;
    }
    Object.defineProperty(Children.prototype, "_onInserted", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child, index) {
            child._setParent(this._container, true);
            var childrenDisplay = this._container._childrenDisplay;
            if (index === undefined) {
                childrenDisplay.addChild(child._display);
            }
            else {
                childrenDisplay.addChildAt(child._display, index);
            }
        }
    });
    Object.defineProperty(Children.prototype, "_onRemoved", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (child) {
            this._container._childrenDisplay.removeChild(child._display);
            this._container.markDirtyBounds();
            this._container.markDirty();
        }
    });
    /**
     * Returns `true` if obejct is disposed.
     */
    Object.defineProperty(Children.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    /**
     * Permanently dispose this object.
     */
    Object.defineProperty(Children.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                this._events.dispose();
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(this.values, function (child) {
                    child.dispose();
                });
            }
        }
    });
    return Children;
}(_List__WEBPACK_IMPORTED_MODULE_2__.List));

//# sourceMappingURL=Children.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rgba2hex": () => (/* binding */ rgba2hex),
/* harmony export */   "color": () => (/* binding */ color),
/* harmony export */   "Color": () => (/* binding */ Color)
/* harmony export */ });
/* harmony import */ var _Animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Animation */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");



/**
 * @ignore
 */
function string2hex(string) {
    //string = cssColorNames[string.toLowerCase()] || string;
    if (string[0] === "#") {
        string = string.substr(1);
    }
    if (string.length == 3) {
        string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);
    }
    return parseInt(string, 16);
}
/**
 * @ignore
 */
function rgba2hex(color) {
    color = color.replace(/[ ]/g, "");
    // Init
    var matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i);
    // Try rgb() format
    if (matches) {
        matches.push("1");
    }
    else {
        matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);
        if (!matches) {
            return 0x000000;
        }
    }
    var hex = "";
    for (var i = 1; i <= 3; i++) {
        var val = parseInt(matches[i]).toString(16);
        if (val.length == 1) {
            val = "0" + val;
        }
        hex += val;
    }
    return string2hex(hex);
}
/**
 * Returns a new [[Color]] object base on input.
 *
 * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.
 *
 * * `"#f00"`
 * * `"#ff0000"`
 * * `"rgb(255, 0, 0)"`
 * * `"rgba(255, 0, 0, 1)"`
 * * `0xff0000`
 *
 * @param   input  Input color
 * @return         Color
 */
function color(input) {
    return Color.fromAny(input);
}
/**
 * Wherever color needs to be specified in amCharts 5, `Color` object needs to
 * be used.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info
 * @important
 */
var Color = /** @class */ (function () {
    function Color(hex) {
        Object.defineProperty(this, "_hex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._hex = hex | 0;
    }
    Object.defineProperty(Color.prototype, "hex", {
        /**
         * Color numeric value.
         */
        get: function () {
            return this._hex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "r", {
        /**
         * Value of color's R channel.
         * @return R value
         */
        get: function () {
            return this._hex >>> 16;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "g", {
        /**
         * Value of color's G channel.
         * @return G value
         */
        get: function () {
            return (this._hex >> 8) & 0xFF;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "b", {
        /**
         * Value of color's B channel.
         * @return B value
         */
        get: function () {
            return this._hex & 0xFF;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns color CSS representation in form of `rgba(r, g, b, a)` string.
     *
     * @param   alpha  Opacity
     * @return         CSS string
     */
    Object.defineProperty(Color.prototype, "toCSS", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (alpha) {
            if (alpha === void 0) { alpha = 1; }
            return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + alpha + ")";
        }
    });
    /**
     * Returns color CSS representation in form of `#rgb` string.
     *
     * @return         CSS string
     */
    Object.defineProperty(Color.prototype, "toCSSHex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return "#" + _Utils__WEBPACK_IMPORTED_MODULE_0__.padString(this.r.toString(16), 2) + _Utils__WEBPACK_IMPORTED_MODULE_0__.padString(this.g.toString(16), 2) + _Utils__WEBPACK_IMPORTED_MODULE_0__.padString(this.b.toString(16), 2);
        }
    });
    /**
     * Returns color's HSL info.
     * @param   alpha Opacity
     * @return        HSL info
     */
    Object.defineProperty(Color.prototype, "toHSL", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (alpha) {
            if (alpha === void 0) { alpha = 1; }
            return _Utils__WEBPACK_IMPORTED_MODULE_0__.rgbToHsl({
                r: this.r,
                g: this.g,
                b: this.b,
                a: alpha
            });
        }
    });
    /**
     * Converts HSL values into a new [[Color]] object.
     *
     * @param   h H value
     * @param   s S value
     * @param   l L value
     * @return    Color object
     */
    Object.defineProperty(Color, "fromHSL", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (h, s, l) {
            var rgb = _Utils__WEBPACK_IMPORTED_MODULE_0__.hslToRgb({
                h: h,
                s: s,
                l: l
            });
            return this.fromRGB(rgb.r, rgb.g, rgb.b);
        }
    });
    Object.defineProperty(Color.prototype, "toString", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.toCSSHex();
        }
    });
    /**
     * Converts hex number into a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromHex(0xff0000) // red
     * ```
     * ```JavaScript
     * Color.fromHex(0xff0000) // red
     * ```
     *
     * @param   hex  Hex color
     * @return       Color
     */
    Object.defineProperty(Color, "fromHex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (hex) {
            return new Color(hex);
        }
    });
    /**
     * Converts RGB values to a new [[Color]] object.
     *
     * @param   r  R value
     * @param   g  G value
     * @param   b  B value
     * @return     Color
     */
    Object.defineProperty(Color, "fromRGB", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (r, g, b) {
            return new Color((b | 0) + (g << 8) + (r << 16));
        }
    });
    /**
     * Converts RGB string to a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromString("#ff0000") // red
     * ```
     * ```JavaScript
     * Color.fromString("#ff0000") // red
     * ```
     *
     * @param   s  RGB string
     * @return     Color
     */
    Object.defineProperty(Color, "fromString", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (s) {
            return new Color(string2hex(s));
        }
    });
    /**
     * Converts CSS rgba() syntax to a new [[Color]] object.
     *
     * ```TypeScript
     * Color.fromCSS("rgba(255, 0, 0, 1)") // red
     * ```
     * ```JavaScript
     * Color.fromCSS("rgba(255, 0, 0, 1)") // red
     * ```
     *
     * @param  {string} s [description]
     * @return {Color}    [description]
     */
    Object.defineProperty(Color, "fromCSS", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (s) {
            return new Color(rgba2hex(s));
        }
    });
    /**
     * Convert to color from virtually anything.
     *
     * Will throw an exception if unable to resolve the color.
     *
     * @param   s  Source
     * @return     Color
     */
    Object.defineProperty(Color, "fromAny", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (s) {
            if (_Type__WEBPACK_IMPORTED_MODULE_1__.isString(s)) {
                if (s[0] == "#") {
                    return Color.fromString(s);
                }
                else if (s.substr(0, 3) == "rgb") {
                    return Color.fromCSS(s);
                }
            }
            else if (_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(s)) {
                return Color.fromHex(s);
            }
            else if (s instanceof Color) {
                return Color.fromHex(s.hex);
            }
            throw new Error("Unknown color syntax: " + s);
        }
    });
    /**
     * Returns a new [[Color]] object based on either `lightAlternative` or
     * `darkAlternative` depending on which one is more contrasting with
     * the `color`.
     *
     * @param   color             Reference color
     * @param   lightAlternative  Light color
     * @param   darkAlternative   Dark color
     * @return                    Alternative color
     */
    Object.defineProperty(Color, "alternative", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, lightAlternative, darkAlternative) {
            var rgb = _Utils__WEBPACK_IMPORTED_MODULE_0__.alternativeColor({ r: color.r, g: color.g, b: color.b }, lightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : undefined, darkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : undefined);
            return this.fromRGB(rgb.r, rgb.g, rgb.b);
        }
    });
    /**
     * Returns an intermediate Color between two reference colors depending on
     * the progress (`diff`) between the two.
     *
     * @param   diff  Progress
     * @param   from  Source color
     * @param   to    Target color
     * @param   mode  Interpolation mode
     * @return        Color
     */
    Object.defineProperty(Color, "interpolate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (diff, from, to, mode) {
            if (mode === void 0) { mode = "rgb"; }
            if (mode == "hsl") {
                var fromHSL = from.toHSL();
                var toHSL = to.toHSL();
                return Color.fromHSL((0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, fromHSL.h, toHSL.h), (0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, fromHSL.s, toHSL.s), (0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, fromHSL.l, toHSL.l));
            }
            else {
                return Color.fromRGB((0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, from.r, to.r), (0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, from.g, to.g), (0,_Animation__WEBPACK_IMPORTED_MODULE_2__.range)(diff, from.b, to.b));
            }
        }
    });
    /**
     * Returns a new [[Color]] lightened by `percent` value.
     *
     * Use negative value to darken the color.
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */
    Object.defineProperty(Color, "lighten", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, percent) {
            var rgb = _Utils__WEBPACK_IMPORTED_MODULE_0__.lighten({ r: color.r, g: color.g, b: color.b }, percent);
            return Color.fromRGB(rgb.r, rgb.g, rgb.b);
        }
    });
    /**
     * Returns a new [[Color]] brightened by `percent` value.
     *
     * Use negative value to dim the color.
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */
    Object.defineProperty(Color, "brighten", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, percent) {
            var rgb = _Utils__WEBPACK_IMPORTED_MODULE_0__.brighten({ r: color.r, g: color.g, b: color.b }, percent);
            return Color.fromRGB(rgb.r, rgb.g, rgb.b);
        }
    });
    /**
     * Returns a new [[Color]] saturated by `percent` value.
     *
     * Use negative value to desaturate the color.
     *
     * @param   color    Source color
     * @param   percent  Percent
     * @return           New color
     */
    Object.defineProperty(Color, "saturate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color, percent) {
            var rgb = _Utils__WEBPACK_IMPORTED_MODULE_0__.saturate({ r: color.r, g: color.g, b: color.b }, percent);
            return Color.fromRGB(rgb.r, rgb.g, rgb.b);
        }
    });
    return Color;
}());

//# sourceMappingURL=Color.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorSet": () => (/* binding */ ColorSet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");



/**
 * An object which holds list of colors and can generate new ones.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Color_sets} for more info
 */
var ColorSet = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ColorSet, _super);
    function ColorSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //protected _currentPass: number = 0;
    Object.defineProperty(ColorSet.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // Applying themes because color set will not have parent
            _super.prototype._afterNewApplyThemes.call(this);
        }
    });
    Object.defineProperty(ColorSet.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("startIndex")) {
                this.setPrivate("currentStep", this.get("startIndex", 0));
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ColorSet.prototype, "generateColors", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setPrivate("currentPass", this.getPrivate("currentPass", 0) + 1);
            var pass = this.getPrivate("currentPass");
            var colors = this.get("colors", [this.get("baseColor", _Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xff0000))]);
            if (!this.getPrivate("numColors")) {
                this.setPrivate("numColors", colors.length);
            }
            //const len = colors.length;
            var len = this.getPrivate("numColors");
            //const start = len - this.getPrivate("numColors")!;
            var start = 0;
            var passOptions = this.get("passOptions");
            var reuse = this.get("reuse");
            for (var i = start; i < len; i++) {
                if (reuse) {
                    colors.push(colors[i]);
                }
                else {
                    var hsl = colors[i].toHSL();
                    var h = hsl.h + (passOptions.hue || 0) * pass;
                    while (h > 1)
                        h -= 1;
                    var s = hsl.s + (passOptions.saturation || 0) * pass;
                    //if (s > 1) s -= Math.floor(s);
                    if (s > 1)
                        s = 1;
                    if (s < 0)
                        s = 0;
                    var l = hsl.l + (passOptions.lightness || 0) * pass;
                    //if (l > 1) l -= Math.floor(l);
                    while (l > 1)
                        l -= 1;
                    colors.push(_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHSL(h, s, l));
                }
            }
        }
    });
    /**
     * Returns a [[Color]] at specific index.
     *
     * If there's no color at this index, a new color is generated.
     *
     * @param   index  Index
     * @return         Color
     */
    Object.defineProperty(ColorSet.prototype, "getIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var colors = this.get("colors", []);
            var saturation = this.get("saturation");
            if (index >= colors.length) {
                this.generateColors();
                return this.getIndex(index);
            }
            return saturation != null ? _Color__WEBPACK_IMPORTED_MODULE_1__.Color.saturate(colors[index], saturation) : colors[index];
        }
    });
    /**
     * Returns next [[Color]] in the list.
     *
     * If the list is out of colors, new ones are generated dynamically.
     */
    Object.defineProperty(ColorSet.prototype, "next", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var currentStep = this.getPrivate("currentStep", 0);
            this.setPrivate("currentStep", currentStep + this.get("step", 1));
            return this.getIndex(currentStep);
        }
    });
    /**
     * Resets counter to the start of the list, so the next call for `next()` will
     * return the first color.
     */
    Object.defineProperty(ColorSet.prototype, "reset", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setPrivate("currentStep", this.get("startIndex", 0));
        }
    });
    Object.defineProperty(ColorSet, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ColorSet"
    });
    Object.defineProperty(ColorSet, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Entity__WEBPACK_IMPORTED_MODULE_2__.Entity.classNames.concat([ColorSet.className])
    });
    return ColorSet;
}(_Entity__WEBPACK_IMPORTED_MODULE_2__.Entity));

//# sourceMappingURL=ColorSet.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Data.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Data.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ListData": () => (/* binding */ ListData),
/* harmony export */   "JsonData": () => (/* binding */ JsonData)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./List */ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js");


/**
 * A [[List]] that holds components data.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
 */
var ListData = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(ListData, _super);
    function ListData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * An optional processor for data.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
         */
        Object.defineProperty(_this, "processor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(ListData.prototype, "incrementRef", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    /**
     * @ignore
     */
    Object.defineProperty(ListData.prototype, "decrementRef", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    Object.defineProperty(ListData.prototype, "_onPush", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (newValue) {
            if (this.processor) {
                this.processor.processRow(newValue);
                //console.log(newValue)
            }
            _super.prototype._onPush.call(this, newValue);
        }
    });
    Object.defineProperty(ListData.prototype, "_onInsertIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, newValue) {
            if (this.processor) {
                this.processor.processRow(newValue);
            }
            _super.prototype._onInsertIndex.call(this, index, newValue);
        }
    });
    Object.defineProperty(ListData.prototype, "_onSetIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, oldValue, newValue) {
            if (this.processor) {
                this.processor.processRow(newValue);
            }
            _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
        }
    });
    return ListData;
}(_List__WEBPACK_IMPORTED_MODULE_1__.List));

/**
 * @deprecated
 * @todo remove
 */
var JsonData = /** @class */ (function () {
    function JsonData(value) {
        Object.defineProperty(this, "processor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._value = value;
    }
    Object.defineProperty(JsonData.prototype, "incrementRef", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    Object.defineProperty(JsonData.prototype, "decrementRef", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    return JsonData;
}());

//# sourceMappingURL=Data.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/DataProcessor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/DataProcessor.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataProcessor": () => (/* binding */ DataProcessor)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");






/**
 * A tool that can process the data before it is being used in charts.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
 * @important
 */
var DataProcessor = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DataProcessor, _super);
    function DataProcessor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_checkDates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_checkNumbers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_checkColors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_checkEmpty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_checkDeep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(DataProcessor.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this._checkFeatures();
            this.on("dateFields", function () { return _this._checkFeatures(); });
            this.on("dateFormat", function () { return _this._checkFeatures(); });
            this.on("numericFields", function () { return _this._checkFeatures(); });
            this.on("colorFields", function () { return _this._checkFeatures(); });
            this.on("emptyAs", function () { return _this._checkFeatures(); });
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_checkFeatures", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("dateFields") || this.isDirty("dateFormat")) {
                this._checkDates = this.get("dateFields") && (this.get("dateFields").length > 0);
            }
            if (this.isDirty("numericFields")) {
                this._checkNumbers = this.get("numericFields") && (this.get("numericFields").length > 0);
            }
            if (this.isDirty("colorFields")) {
                this._checkColors = this.get("colorFields") && (this.get("colorFields").length > 0);
            }
            if (this.isDirty("emptyAs")) {
                this._checkEmpty = this.get("emptyAs") != null;
            }
            this._checkDeepFeatures();
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_checkDeepFeatures", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var deepFields = [];
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(["dateFields", "numericFields", "colorFields"], function (where) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(_this.get(where, []), function (field) {
                    var steps = field.split(".");
                    steps.pop();
                    while (steps.length > 0) {
                        deepFields.push(steps.join("."));
                        steps.pop();
                    }
                });
            });
            this._checkDeep = deepFields.length > 0;
            this.setPrivate("deepFields", deepFields);
        }
    });
    /**
     * Processess entire array of data.
     *
     * NOTE: calling this will modify original array!
     */
    Object.defineProperty(DataProcessor.prototype, "processMany", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data) {
            var _this = this;
            if (_Type__WEBPACK_IMPORTED_MODULE_2__.isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(data, function (row) {
                    _this.processRow(row);
                });
            }
        }
    });
    /**
     * Processes a row (object) of data.
     *
     * NOTE: calling this will modify values of the original object!
     */
    Object.defineProperty(DataProcessor.prototype, "processRow", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (row, prefix) {
            var _this = this;
            if (prefix === void 0) { prefix = ""; }
            _Object__WEBPACK_IMPORTED_MODULE_3__.each(row, function (key, _value) {
                var lookupKey = prefix + key;
                if (_this._checkEmpty) {
                    row[key] = _this._maybeToEmpty(row[key]);
                }
                if (_this._checkNumbers) {
                    row[key] = _this._maybeToNumber(lookupKey, row[key]);
                }
                if (_this._checkDates) {
                    row[key] = _this._maybeToDate(lookupKey, row[key]);
                }
                if (_this._checkColors) {
                    row[key] = _this._maybeToColor(lookupKey, row[key]);
                }
                if (_this._checkDeep && _this.getPrivate("deepFields", []).indexOf(lookupKey) !== -1 && _Type__WEBPACK_IMPORTED_MODULE_2__.isObject(row[key])) {
                    _this.processRow(row[key], lookupKey + ".");
                }
            });
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_maybeToNumber", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (field, value) {
            if (this.get("numericFields").indexOf(field) !== -1) {
                return _Type__WEBPACK_IMPORTED_MODULE_2__.toNumber(value);
            }
            return value;
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_maybeToDate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (field, value) {
            if (this.get("dateFields").indexOf(field) !== -1) {
                return this._root.dateFormatter.parse(value, this.get("dateFormat", "")).getTime();
            }
            return value;
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_maybeToEmpty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            if ((value == null || value == "") && this.get("emptyAs") != null) {
                return this.get("emptyAs");
            }
            return value;
        }
    });
    Object.defineProperty(DataProcessor.prototype, "_maybeToColor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (field, value) {
            if (this.get("colorFields").indexOf(field) !== -1) {
                return _Color__WEBPACK_IMPORTED_MODULE_4__.Color.fromAny(value);
            }
            return value;
        }
    });
    return DataProcessor;
}(_Entity__WEBPACK_IMPORTED_MODULE_5__.Entity));

//# sourceMappingURL=DataProcessor.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/DateFormatter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/DateFormatter.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateFormatter": () => (/* binding */ DateFormatter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _TextFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");





var DateFormatter = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DateFormatter, _super);
    function DateFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DateFormatter.prototype, "_setDefaults", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // Defaults
            this._setDefault("capitalize", true);
            this._setDefault("dateFormat", "yyyy-MM-dd");
            _super.prototype._setDefaults.call(this);
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
        }
    });
    Object.defineProperty(DateFormatter.prototype, "format", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (source, format) {
            // Locale?
            // TODO
            // No format passed in or it's empty
            if (typeof format === "undefined" || format === "") {
                format = this.get("dateFormat", "yyyy-MM-dd");
            }
            // Init return value
            var formatted;
            // Cast?
            // TODO: decide if we need to cast
            var date = source;
            // Is it a built-in format or Intl.DateTimeFormat
            if (_Type__WEBPACK_IMPORTED_MODULE_1__.isObject(format)) {
                try {
                    var locales = this.get("intlLocales");
                    if (locales) {
                        return new Intl.DateTimeFormat(locales, format).format(date);
                    }
                    else {
                        return new Intl.DateTimeFormat(undefined, format).format(date);
                    }
                }
                catch (e) {
                    return "Invalid";
                }
            }
            // get format info (it will also deal with parser caching)
            var info = this.parseFormat(format);
            // Should we apply custom time zone?
            // TODO
            // if (this.timezoneOffset != null) {
            // 	date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);
            // }
            // else if (this.timezone != null) {
            // 	date = $time.setTimezone(date, this.timezone);
            // }
            // Check if it's a valid date
            if (!_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(date.getTime())) {
                // TODO translation
                //return this._t("Invalid date");
                return "Invalid date";
            }
            // Apply format
            formatted = this.applyFormat(date, info);
            // Capitalize
            if (this.get("capitalize")) {
                formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
            }
            // We're done
            return formatted;
        }
    });
    /**
     * Applies format to Date.
     *
     * @param date      Date object
     * @param info      Parsed format information
     * @return Formatted date string
     */
    Object.defineProperty(DateFormatter.prototype, "applyFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (date, info) {
            // Init return value
            var res = info.template;
            // Get values
            var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
            if (this._root.utc) {
                fullYear = date.getUTCFullYear();
                month = date.getUTCMonth();
                weekday = date.getUTCDay();
                day = date.getUTCDate();
                hours = date.getUTCHours();
                minutes = date.getUTCMinutes();
                seconds = date.getUTCSeconds();
                milliseconds = date.getUTCMilliseconds();
            }
            else {
                fullYear = date.getFullYear();
                month = date.getMonth();
                weekday = date.getDay();
                day = date.getDate();
                hours = date.getHours();
                minutes = date.getMinutes();
                seconds = date.getSeconds();
                milliseconds = date.getMilliseconds();
            }
            // Go through each part and format/replace it in template
            for (var i = 0, len = info.parts.length; i < len; i++) {
                var value = "";
                switch (info.parts[i]) {
                    case "G":
                        value = this._t(fullYear < 0
                            ? "_era_bc"
                            : "_era_ad");
                        break;
                    case "yyyy":
                        value = Math.abs(fullYear).toString();
                        if (fullYear < 0) {
                            value += this._t("_era_bc");
                        }
                        break;
                    case "yyy":
                    case "yy":
                    case "y":
                        value = Math.abs(fullYear).toString().substr(-info.parts[i].length);
                        if (fullYear < 0) {
                            value += this._t("_era_bc");
                        }
                        break;
                    case "YYYY":
                    case "YYY":
                    case "YY":
                    case "Y":
                        var week = _Utils__WEBPACK_IMPORTED_MODULE_2__.getWeek(date);
                        var year = fullYear;
                        if (week == 1 && (weekday > 4)) {
                            year--;
                        }
                        if (info.parts[i] == "YYYY") {
                            value = Math.abs(year).toString();
                        }
                        else {
                            value = Math.abs(year).toString().substr(-info.parts[i].length);
                        }
                        if (year < 0) {
                            value += this._t("_era_bc");
                        }
                        break;
                    case "u":
                        // @todo
                        break;
                    case "q":
                        value = "" + Math.ceil((date.getMonth() + 1) / 3);
                        break;
                    case "MMMMM":
                        value = this._t(this._getMonth(month)).substr(0, 1);
                        break;
                    case "MMMM":
                        value = this._t(this._getMonth(month));
                        break;
                    case "MMM":
                        value = this._t(this._getShortMonth(month));
                        break;
                    case "MM":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(month + 1, 2, "0");
                        break;
                    case "M":
                        value = (month + 1).toString();
                        break;
                    case "ww":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(_Utils__WEBPACK_IMPORTED_MODULE_2__.getWeek(date, this._root.utc), 2, "0");
                        break;
                    case "w":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getWeek(date, this._root.utc).toString();
                        break;
                    case "W":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getMonthWeek(date, this._root.utc).toString();
                        break;
                    case "dd":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(day, 2, "0");
                        break;
                    case "d":
                        value = day.toString();
                        break;
                    case "DD":
                    case "DDD":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(_Utils__WEBPACK_IMPORTED_MODULE_2__.getYearDay(date, this._root.utc).toString(), info.parts[i].length, "0");
                        break;
                    case "D":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getYearDay(date, this._root.utc).toString();
                        break;
                    case "F":
                        // @todo
                        break;
                    case "g":
                        // @todo
                        break;
                    case "t":
                        value = this._root.language.translateFunc("_dateOrd").call(this, day);
                        break;
                    case "E":
                        value = (weekday || 7).toString();
                        break;
                    case "EE":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString((weekday || 7).toString(), 2, "0");
                        break;
                    case "EEE":
                    case "eee":
                        value = this._t(this._getShortWeekday(weekday));
                        break;
                    case "EEEE":
                    case "eeee":
                        value = this._t(this._getShortWeekday(weekday));
                        break;
                    case "EEEEE":
                    case "eeeee":
                        value = this._t(this._getShortWeekday(weekday)).substr(0, 1);
                        break;
                    case "e":
                    case "ee":
                        value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();
                        if (info.parts[i] == "ee") {
                            value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(value, 2, "0");
                        }
                        break;
                    case "a":
                        if (hours >= 12) {
                            value = this._t("PM");
                        }
                        else {
                            value = this._t("AM");
                        }
                        break;
                    case "aa":
                        if (hours >= 12) {
                            value = this._t("P.M.");
                        }
                        else {
                            value = this._t("A.M.");
                        }
                        break;
                    case "aaa":
                        if (hours >= 12) {
                            value = this._t("P");
                        }
                        else {
                            value = this._t("A");
                        }
                        break;
                    case "h":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.get12Hours(hours).toString();
                        break;
                    case "hh":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(_Utils__WEBPACK_IMPORTED_MODULE_2__.get12Hours(hours), 2, "0");
                        break;
                    case "H":
                        value = hours.toString();
                        break;
                    case "HH":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(hours, 2, "0");
                        break;
                    case "K":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.get12Hours(hours, 0).toString();
                        break;
                    case "KK":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(_Utils__WEBPACK_IMPORTED_MODULE_2__.get12Hours(hours, 0), 2, "0");
                        break;
                    case "k":
                        value = (hours + 1).toString();
                        break;
                    case "kk":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(hours + 1, 2, "0");
                        break;
                    case "m":
                        value = minutes.toString();
                        break;
                    case "mm":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(minutes, 2, "0");
                        break;
                    case "s":
                        value = seconds.toString();
                        break;
                    case "ss":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(seconds, 2, "0");
                        break;
                    case "S":
                    case "SS":
                    case "SSS":
                        value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();
                        break;
                    case "x":
                        value = timestamp.toString();
                        break;
                    case "n":
                    case "nn":
                    case "nnn":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(milliseconds, info.parts[i].length, "0");
                        break;
                    case "z":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getTimeZone(date, false, false, this._root.utc);
                        break;
                    case "zz":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getTimeZone(date, true, false, this._root.utc);
                        break;
                    case "zzz":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getTimeZone(date, false, true, this._root.utc);
                        break;
                    case "zzzz":
                        value = _Utils__WEBPACK_IMPORTED_MODULE_2__.getTimeZone(date, true, true, this._root.utc);
                        break;
                    case "Z":
                    case "ZZ":
                        var tz = Math.abs(offset) / 60;
                        var tzh = Math.floor(tz);
                        var tzm = tz * 60 - tzh * 60;
                        if (this._root.utc) {
                            tzh = 0;
                            tzm = 0;
                        }
                        if (info.parts[i] == "Z") {
                            value = "GMT";
                            value += offset > 0 ? "-" : "+";
                            value += _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(tzh, 2) + ":" + _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(tzm, 2);
                        }
                        else {
                            value = offset > 0 ? "-" : "+";
                            value += _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(tzh, 2) + _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(tzm, 2);
                        }
                        break;
                    case "i":
                        value = date.toISOString();
                        break;
                    case "I":
                        value = date.toUTCString();
                        break;
                }
                res = res.replace(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER, value);
            }
            return res;
        }
    });
    /**
     * Parses format into structured infromation.
     *
     * @param format Format template
     */
    Object.defineProperty(DateFormatter.prototype, "parseFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (format) {
            // Check cache
            // TODO: implement caching of the parsed format
            // Init format parse info holder
            var info = {
                "template": "",
                "parts": []
            };
            // Let TextFormatter split into chunks
            var chunks = _TextFormatter__WEBPACK_IMPORTED_MODULE_3__.TextFormatter.chunk(format, true);
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                if (chunk.type === "value") {
                    // Just "Date"?
                    if (chunk.text.match(/^date$/i)) {
                        var dateFormat = this.get("dateFormat", "yyyy-MM-dd");
                        if (!_Type__WEBPACK_IMPORTED_MODULE_1__.isString(dateFormat)) {
                            dateFormat = "yyyy-MM-dd";
                        }
                        chunk.text = dateFormat;
                    }
                    // Find all possible parts
                    var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                    // Found?
                    if (matches) {
                        // Populate template
                        for (var x = 0; x < matches.length; x++) {
                            info.parts.push(matches[x]);
                            chunk.text = chunk.text.replace(matches[x], _Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER);
                        }
                    }
                }
                // Apply to template
                info.template += chunk.text;
            }
            // Save cache
            // TODO
            return info;
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_months", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_getMonth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return this._months()[index];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_shortMonths", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_getShortMonth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return this._shortMonths()[index];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_weekdays", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_getWeekday", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return this._weekdays()[index];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_shortWeekdays", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "_getShortWeekday", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return this._shortWeekdays()[index];
        }
    });
    Object.defineProperty(DateFormatter.prototype, "parse", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (source, format) {
            // Is it already a Date
            if (source instanceof Date) {
                return source;
            }
            // Is it a numeric timestamp
            if (_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(source)) {
                return new Date(source);
            }
            // No? Let's check if it's string, and try converting to it if nec
            if (!_Type__WEBPACK_IMPORTED_MODULE_1__.isString(source)) {
                source = source.toString();
            }
            // Init return value
            var res;
            // Init RegEx for parsing
            var reg = "";
            // Clean format
            format = _Utils__WEBPACK_IMPORTED_MODULE_2__.cleanFormat(format);
            // Clip format to length of the source string
            format = format.substr(0, source.length);
            // Parse format
            var info = this.parseFormat(format);
            // Init parsed items holder
            var parsedIndexes = {
                "year": -1,
                "year3": -1,
                "year2": -1,
                "year1": -1,
                "month": -1,
                "monthShort": -1,
                "monthLong": -1,
                "weekdayShort": -1,
                "weekdayLong": -1,
                "day": -1,
                "yearDay": -1,
                "week": -1,
                "hourBase0": -1,
                "hour12Base0": -1,
                "hourBase1": -1,
                "hour12Base1": -1,
                "minute": -1,
                "second": -1,
                "millisecond": -1,
                "millisecondDigits": -1,
                "am": -1,
                "zone": -1,
                "timestamp": -1,
                "iso": -1
            };
            // Init values
            var resValues = {
                "year": 1970,
                "month": 0,
                "day": 1,
                "hour": 0,
                "minute": 0,
                "second": 0,
                "millisecond": 0,
                "timestamp": null,
                "offset": 0,
                "utc": this._root.utc
            };
            // Index adjuster
            var indexAdjust = 0;
            var index = 0;
            // Iterate through all of the parts
            for (var i = 0; i < info.parts.length; i++) {
                // Set current match index
                index = i + indexAdjust + 1;
                switch (info.parts[i]) {
                    case "yyyy":
                    case "YYYY":
                        reg += "([0-9]{4})";
                        parsedIndexes.year = index;
                        break;
                    case "yyy":
                    case "YYY":
                        reg += "([0-9]{3})";
                        parsedIndexes.year3 = index;
                        break;
                    case "yy":
                    case "YY":
                        reg += "([0-9]{2})";
                        parsedIndexes.year2 = index;
                        break;
                    case "y":
                    case "Y":
                        reg += "([0-9]{1})";
                        parsedIndexes.year1 = index;
                        break;
                    case "MMMM":
                        reg += "(" + this.getStringList(this._months()).join("|") + ")";
                        parsedIndexes.monthLong = index;
                        break;
                    case "MMM":
                        reg += "(" + this.getStringList(this._shortMonths()).join("|") + ")";
                        parsedIndexes.monthShort = index;
                        break;
                    case "MM":
                    case "M":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.month = index;
                        break;
                    case "ww":
                    case "w":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.week = index;
                        break;
                    case "dd":
                    case "d":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.day = index;
                        break;
                    case "DDD":
                    case "DD":
                    case "D":
                        reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                        parsedIndexes.yearDay = index;
                        break;
                    case "dddd":
                        reg += "(" + this.getStringList(this._weekdays()).join("|") + ")";
                        parsedIndexes.weekdayLong = index;
                        break;
                    case "ddd":
                        reg += "(" + this.getStringList(this._shortWeekdays()).join("|") + ")";
                        parsedIndexes.weekdayShort = index;
                        break;
                    case "aaa":
                    case "aa":
                    case "a":
                        // TODO: fix (escape regex)
                        reg += "(" + this.getStringList(["AM", "PM", "A\.M\.", "P\.M\.", "A", "P"]).join("|") + ")";
                        parsedIndexes.am = index;
                        break;
                    case "hh":
                    case "h":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.hour12Base1 = index;
                        break;
                    case "HH":
                    case "H":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.hourBase0 = index;
                        break;
                    case "KK":
                    case "K":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.hour12Base0 = index;
                        break;
                    case "kk":
                    case "k":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.hourBase1 = index;
                        break;
                    case "mm":
                    case "m":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.minute = index;
                        break;
                    case "ss":
                    case "s":
                        reg += "([0-9]{2}|[0-9]{1})";
                        parsedIndexes.second = index;
                        break;
                    case "SSS":
                    case "SS":
                    case "S":
                        reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                        parsedIndexes.millisecond = index;
                        parsedIndexes.millisecondDigits = info.parts[i].length;
                        break;
                    case "nnn":
                    case "nn":
                    case "n":
                        reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                        parsedIndexes.millisecond = index;
                        break;
                    case "x":
                        reg += "([0-9]{1,})";
                        parsedIndexes.timestamp = index;
                        break;
                    case "Z":
                        reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                        parsedIndexes.zone = index;
                        break;
                    case "ZZ":
                        reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                        parsedIndexes.zone = index;
                        break;
                    case "i":
                        reg += "([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\.?([0-9]{0,3})([zZ]|[+\-][0-9]{2}:?[0-9]{2}|$)";
                        parsedIndexes.iso = index;
                        indexAdjust += 7;
                        break;
                    case "G":
                    case "YYYY":
                    case "YYY":
                    case "YY":
                    case "Y":
                    case "MMMMM":
                    case "W":
                    case "EEEEE":
                    case "EEEE":
                    case "EEE":
                    case "EE":
                    case "E":
                    case "eeeee":
                    case "eeee":
                    case "eee":
                    case "ee":
                    case "e":
                    case "zzzz":
                    case "zzz":
                    case "zz":
                    case "z":
                    case "t":
                        // Ignore
                        indexAdjust--;
                        break;
                }
                reg += "[^0-9]*";
            }
            // Try matching
            var regex = new RegExp(reg);
            var matches = source.match(regex);
            if (matches) {
                // Populate the date object
                // Full year
                if (parsedIndexes.year > -1) {
                    resValues.year = parseInt(matches[parsedIndexes.year]);
                }
                // 3-digit year
                if (parsedIndexes.year3 > -1) {
                    var val = parseInt(matches[parsedIndexes.year3]);
                    val += 1000;
                    resValues.year = val;
                }
                // 2-digit year
                if (parsedIndexes.year2 > -1) {
                    var val = parseInt(matches[parsedIndexes.year2]);
                    if (val > 50) {
                        val += 1000;
                    }
                    else {
                        val += 2000;
                    }
                    resValues.year = val;
                }
                // 1-digit year
                if (parsedIndexes.year1 > -1) {
                    var val = parseInt(matches[parsedIndexes.year1]);
                    val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;
                    resValues.year = val;
                }
                // Full month
                if (parsedIndexes.monthLong > -1) {
                    resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
                }
                // Short month
                if (parsedIndexes.monthShort > -1) {
                    resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
                }
                // Numeric month
                if (parsedIndexes.month > -1) {
                    resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
                }
                // Weekday
                // @todo
                // Week
                if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {
                    // We parse weeks ONLY if day is not explicitly set
                    // TODO: this needs work
                    // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                    resValues.month = 0;
                    resValues.day = _Utils__WEBPACK_IMPORTED_MODULE_2__.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);
                }
                // Day
                if (parsedIndexes.day > -1) {
                    resValues.day = parseInt(matches[parsedIndexes.day]);
                }
                // Year day
                if (parsedIndexes.yearDay > -1) {
                    resValues.month = 0;
                    resValues.day = parseInt(matches[parsedIndexes.yearDay]);
                }
                // 24 Hour (0-23)
                if (parsedIndexes.hourBase0 > -1) {
                    resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
                }
                // 24 Hour (1-24)
                if (parsedIndexes.hourBase1 > -1) {
                    resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
                }
                // 12 Hour (0-11)
                if (parsedIndexes.hour12Base0 > -1) {
                    var val = parseInt(matches[parsedIndexes.hour12Base0]);
                    if (val == 11) {
                        val = 0;
                    }
                    if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                        val += 12;
                    }
                    resValues.hour = val;
                }
                // 12 Hour (1-12)
                if (parsedIndexes.hour12Base1 > -1) {
                    var val = parseInt(matches[parsedIndexes.hour12Base1]);
                    if (val == 12) {
                        val = 0;
                    }
                    if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                        val += 12;
                    }
                    resValues.hour = val;
                }
                // Minute
                if (parsedIndexes.minute > -1) {
                    resValues.minute = parseInt(matches[parsedIndexes.minute]);
                }
                // Second
                if (parsedIndexes.second > -1) {
                    resValues.second = parseInt(matches[parsedIndexes.second]);
                }
                // Millisecond
                if (parsedIndexes.millisecond > -1) {
                    var val = parseInt(matches[parsedIndexes.millisecond]);
                    if (parsedIndexes.millisecondDigits == 2) {
                        val *= 10;
                    }
                    else if (parsedIndexes.millisecondDigits == 1) {
                        val *= 100;
                    }
                    resValues.millisecond = val;
                }
                // Timestamp
                if (parsedIndexes.timestamp > -1) {
                    resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
                    var ts = new Date(resValues.timestamp);
                    resValues.year = ts.getUTCFullYear();
                    resValues.month = ts.getUTCMonth();
                    resValues.day = ts.getUTCDate();
                    resValues.hour = ts.getUTCHours();
                    resValues.minute = ts.getUTCMinutes();
                    resValues.second = ts.getUTCSeconds();
                    resValues.millisecond = ts.getUTCMilliseconds();
                }
                // Adjust time zone
                if (parsedIndexes.zone > -1) {
                    resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);
                }
                // ISO
                if (parsedIndexes.iso > -1) {
                    resValues.year = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 0]);
                    resValues.month = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 1]) - 1;
                    resValues.day = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 2]);
                    resValues.hour = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 3]);
                    resValues.minute = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 4]);
                    resValues.second = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 5]);
                    resValues.millisecond = _Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(matches[parsedIndexes.iso + 6]);
                    if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
                        resValues.utc = true;
                    }
                    else if (matches[parsedIndexes.iso + 7] != "") {
                        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);
                    }
                }
                // Create Date object
                if (resValues.utc) {
                    res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
                }
                else {
                    res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);
                }
            }
            else {
                // Didn't match anything
                // Let's try dropping it into Date constructor and hope for the best
                res = new Date(source);
            }
            return res;
        }
    });
    Object.defineProperty(DateFormatter.prototype, "resolveTimezoneOffset", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (date, zone) {
            var value = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
            if (value) {
                var match = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
                var dir = match[1];
                var hour = match[2];
                var minute = match[3];
                var offset = parseInt(hour) * 60 + parseInt(minute);
                // Adjust offset
                // Making it negative does not seem to make sense, but it's right
                // because of how JavaScript calculates GMT offsets
                if (dir == "+") {
                    offset *= -1;
                }
                // Check the difference in offset
                var originalOffset = (date || new Date()).getTimezoneOffset();
                var diff = offset - originalOffset;
                return diff;
            }
            return 0;
        }
    });
    /**
     * Resolves month name (i.e. "December") into a month number (11).
     *
     * @param value  Month name
     * @return Month number
     */
    Object.defineProperty(DateFormatter.prototype, "resolveMonth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            // Let's try English first
            var month = this._months().indexOf(value);
            if (month > -1) {
                return month;
            }
            // Try the translation
            if (!this._root.language.isDefault()) {
                month = this._root.language.translateAll(this._months()).indexOf(value);
                if (month > -1) {
                    return month;
                }
            }
            return 0;
        }
    });
    /**
     * Resolves short month name (i.e. "Dec") into a month number.
     *
     * @param value  Short month name
     * @return Month number
     */
    Object.defineProperty(DateFormatter.prototype, "resolveShortMonth", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            // Let's try English first
            var month = this._shortMonths().indexOf(value);
            if (month > -1) {
                return month;
            }
            // Maybe long month (workaround for May)
            month = this._months().indexOf(value);
            if (month > -1) {
                return month;
            }
            // Try the translation
            if (this._root.language && !this._root.language.isDefault()) {
                month = this._root.language.translateAll(this._shortMonths()).indexOf(value);
                if (month > -1) {
                    return month;
                }
            }
            return 0;
        }
    });
    /**
     * Checks if passed in string represents AM/PM notation in many of its
     * versions.
     *
     * @param value  Source string
     * @return Is it AM/PM?
     */
    Object.defineProperty(DateFormatter.prototype, "isAm", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var list = this.getStringList(["AM", "A.M.", "A"]);
            return list.indexOf(value.toUpperCase()) > -1;
        }
    });
    /**
     * Translates list of strings.
     *
     * @param list  Source strings
     * @return Translated strings
     */
    Object.defineProperty(DateFormatter.prototype, "getStringList", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (list) {
            var res = [];
            for (var i = 0; i < list.length; i++) {
                // translate?
                if (this._root.language) {
                    res.push(_Utils__WEBPACK_IMPORTED_MODULE_2__.escapeForRgex(this._t(list[i])));
                }
                else {
                    res.push(_Utils__WEBPACK_IMPORTED_MODULE_2__.escapeForRgex(list[i]));
                }
            }
            return res;
        }
    });
    return DateFormatter;
}(_Entity__WEBPACK_IMPORTED_MODULE_4__.Entity));

//# sourceMappingURL=DateFormatter.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Disposer": () => (/* binding */ Disposer),
/* harmony export */   "MultiDisposer": () => (/* binding */ MultiDisposer),
/* harmony export */   "MutableValueDisposer": () => (/* binding */ MutableValueDisposer),
/* harmony export */   "CounterDisposer": () => (/* binding */ CounterDisposer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");

/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * A base class for disposable objects.
 *
 * @ignore Exclude from docs
 */
var Disposer = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param dispose  Function that disposes object
     */
    function Disposer(dispose) {
        /**
         * Is object disposed?
         */
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Method that disposes the object.
         */
        Object.defineProperty(this, "_dispose", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._disposed = false;
        this._dispose = dispose;
    }
    /**
     * Checks if object is disposed.
     *
     * @return Disposed?
     */
    Object.defineProperty(Disposer.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    /**
     * Disposes the object.
     */
    Object.defineProperty(Disposer.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                this._dispose();
            }
        }
    });
    return Disposer;
}());

/**
 * A collection of related disposers that can be disposed in one go.
 *
 * @ignore Exclude from docs
 */
var MultiDisposer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MultiDisposer, _super);
    function MultiDisposer(disposers) {
        return _super.call(this, function () {
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(disposers, function (x) {
                x.dispose();
            });
        }) || this;
    }
    return MultiDisposer;
}(Disposer));

/**
 * A special kind of Disposer that has attached value set.
 *
 * If a new value is set using `set()` method, the old disposer value is
 * disposed.
 *
 * @ignore Exclude from docs
 * @todo Description
 */
var MutableValueDisposer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MutableValueDisposer, _super);
    /**
     * Constructor.
     */
    function MutableValueDisposer() {
        var _this = _super.call(this, function () {
            if (_this._disposer != null) {
                _this._disposer.dispose();
                _this._disposer = undefined;
            }
        }) || this;
        /**
         * Current disposer.
         */
        Object.defineProperty(_this, "_disposer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Current value.
         */
        Object.defineProperty(_this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    /**
     * Returns current value.
     *
     * @return Value
     */
    Object.defineProperty(MutableValueDisposer.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._value;
        }
    });
    /**
     * Sets value and disposes previous disposer if it was set.
     *
     * @param value     New value
     * @param disposer  Disposer
     */
    Object.defineProperty(MutableValueDisposer.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, disposer) {
            if (this._disposer != null) {
                this._disposer.dispose();
            }
            this._disposer = disposer;
            this._value = value;
        }
    });
    /**
     * Resets the disposer value.
     */
    Object.defineProperty(MutableValueDisposer.prototype, "reset", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.set(undefined, undefined);
        }
    });
    return MutableValueDisposer;
}(Disposer));

/**
 * @ignore Exclude from docs
 * @todo Description
 */
var CounterDisposer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(CounterDisposer, _super);
    function CounterDisposer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * [_counter description]
         *
         * @todo Description
         */
        Object.defineProperty(_this, "_counter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        return _this;
    }
    /**
     * [increment description]
     *
     * @todo Description
     */
    Object.defineProperty(CounterDisposer.prototype, "increment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // TODO throw an error if it is disposed
            ++this._counter;
            // TODO make this more efficient
            return new Disposer(function () {
                --_this._counter;
                if (_this._counter === 0) {
                    _this.dispose();
                }
            });
        }
    });
    return CounterDisposer;
}(Disposer));

//# sourceMappingURL=Disposer.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "segmentedLine": () => (/* binding */ segmentedLine),
/* harmony export */   "line": () => (/* binding */ line),
/* harmony export */   "moveTo": () => (/* binding */ moveTo),
/* harmony export */   "clear": () => (/* binding */ clear),
/* harmony export */   "smoothedSegmentedline": () => (/* binding */ smoothedSegmentedline),
/* harmony export */   "smoothedLine": () => (/* binding */ smoothedLine)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/** @ignore */ /** */

/**
 * @ignore
 */
function segmentedLine(display, segments) {
    for (var s = 0, len = segments.length; s < len; s++) {
        var groups = segments[s];
        if (groups.length > 0) {
            var firstGroup = groups[0];
            if (firstGroup.length > 0) {
                var firstPoint = firstGroup[0];
                display.moveTo(firstPoint.x, firstPoint.y);
                for (var g = 0, len_1 = groups.length; g < len_1; g++) {
                    line(display, groups[g]);
                }
            }
        }
    }
}
/**
 * @ignore
 */
function line(display, points) {
    for (var p = 0, len = points.length; p < len; p++) {
        var point = points[p];
        display.lineTo(point.x, point.y);
    }
}
/**
 * @ignore
 */
function moveTo(display, point) {
    display.moveTo(point.x, point.y);
}
/**
 * @ignore
 */
function clear(display) {
    display.clear();
}
/**
 * @ignore
 */
function smoothedSegmentedline(display, segments, tensionX, tensionY) {
    for (var s = 0, len = segments.length; s < len; s++) {
        var groups = segments[s];
        if (groups.length > 0) {
            var firstGroup = groups[0];
            if (firstGroup.length > 0) {
                var firstPoint = firstGroup[0];
                display.moveTo(firstPoint.x, firstPoint.y);
                for (var g = 0, len_2 = groups.length; g < len_2; g++) {
                    var points = groups[g];
                    if (points.length > 0) {
                        display.lineTo(points[0].x, points[0].y);
                    }
                    smoothedLine(display, points, tensionX, tensionY);
                }
            }
        }
    }
}
/**
 * @ignore
 */
function smoothedLine(display, points, tensionX, tensionY) {
    for (var i = points.length - 1; i > 0; i--) {
        var p0 = points[i];
        var p1 = points[i - 1];
        if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {
            points.splice(i - 1, 1);
        }
    }
    if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {
        line(display, points);
        return;
    }
    tensionX = 1 - tensionX + 0.00001;
    tensionY = 1 - tensionY + 0.00001;
    var first = points[0];
    var last = points[points.length - 1];
    var closed = false;
    if (_Math__WEBPACK_IMPORTED_MODULE_0__.round(first.x, 3) == _Math__WEBPACK_IMPORTED_MODULE_0__.round(last.x) && _Math__WEBPACK_IMPORTED_MODULE_0__.round(first.y) == _Math__WEBPACK_IMPORTED_MODULE_0__.round(last.y)) {
        closed = true;
    }
    // Can't moveTo here, as it wont be possible to have fill then.
    var path = "";
    for (var i = 0, len = points.length - 1; i < len; i++) {
        var p0 = points[i - 1];
        var p1 = points[i];
        var p2 = points[i + 1];
        var p3 = points[i + 2];
        if (i === 0) {
            if (closed) {
                p0 = points[len - 2];
            }
            else {
                p0 = points[0];
            }
        }
        else if (i == len - 1) {
            if (closed) {
                p3 = points[1];
            }
            else {
                p3 = p2;
            }
        }
        var controlPointA = _Math__WEBPACK_IMPORTED_MODULE_0__.getCubicControlPointA(p0, p1, p2, tensionX, tensionY);
        var controlPointB = _Math__WEBPACK_IMPORTED_MODULE_0__.getCubicControlPointB(p1, p2, p3, tensionX, tensionY);
        display.bezierCurveTo(controlPointA.x, controlPointA.y, controlPointB.x, controlPointB.y, p2.x, p2.y);
    }
    return path;
}
//# sourceMappingURL=Draw.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/DurationFormatter.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/DurationFormatter.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DurationFormatter": () => (/* binding */ DurationFormatter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _TextFormatter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TextFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");






/**
 * A class used to format numberic values as time duration.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info
 */
var DurationFormatter = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DurationFormatter, _super);
    function DurationFormatter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Collection of aliases for units.
         */
        Object.defineProperty(_this, "_unitAliases", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                "Y": "y",
                "D": "d",
                "H": "h",
                "K": "h",
                "k": "h",
                "n": "S"
            }
        });
        return _this;
    }
    Object.defineProperty(DurationFormatter.prototype, "_setDefaults", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var dmillisecond = "_duration_millisecond";
            var dsecond = "_duration_second";
            var dminute = "_duration_minute";
            var dhour = "_duration_hour";
            var dday = "_duration_day";
            var dweek = "_duration_week";
            var dmonth = "_duration_month";
            var dyear = "_duration_year";
            var asecond = "_second";
            var aminute = "_minute";
            var ahour = "_hour";
            var aday = "_day";
            var aweek = "_week";
            var amonth = "_week";
            var ayear = "_year";
            // Defaults
            this._setDefault("negativeBase", 0);
            this._setDefault("baseUnit", "second");
            this._setDefault("durationFormats", {
                "millisecond": {
                    "millisecond": this._t(dmillisecond),
                    "second": this._t((dmillisecond + asecond)),
                    "minute": this._t((dmillisecond + aminute)),
                    "hour": this._t((dmillisecond + ahour)),
                    "day": this._t((dmillisecond + aday)),
                    "week": this._t((dmillisecond + aweek)),
                    "month": this._t((dmillisecond + amonth)),
                    "year": this._t((dmillisecond + ayear))
                },
                "second": {
                    "second": this._t((dsecond)),
                    "minute": this._t((dsecond + aminute)),
                    "hour": this._t((dsecond + ahour)),
                    "day": this._t((dsecond + aday)),
                    "week": this._t((dsecond + aweek)),
                    "month": this._t((dsecond + amonth)),
                    "year": this._t((dsecond + ayear))
                },
                "minute": {
                    "minute": this._t((dminute)),
                    "hour": this._t((dminute + ahour)),
                    "day": this._t((dminute + aday)),
                    "week": this._t((dminute + aweek)),
                    "month": this._t((dminute + amonth)),
                    "year": this._t((dminute + ayear))
                },
                "hour": {
                    "hour": this._t((dhour)),
                    "day": this._t((dhour + aday)),
                    "week": this._t((dhour + aweek)),
                    "month": this._t((dhour + amonth)),
                    "year": this._t((dhour + ayear))
                },
                "day": {
                    "day": this._t((dday)),
                    "week": this._t((dday + aweek)),
                    "month": this._t((dday + amonth)),
                    "year": this._t((dday + ayear))
                },
                "week": {
                    "week": this._t((dweek)),
                    "month": this._t((dweek + amonth)),
                    "year": this._t((dweek + ayear))
                },
                "month": {
                    "month": this._t((dmonth)),
                    "year": this._t((dmonth + ayear))
                },
                "year": {
                    "year": this._t(dyear)
                }
            });
            _super.prototype._setDefaults.call(this);
        }
    });
    Object.defineProperty(DurationFormatter.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
        }
    });
    /**
     * Formats the number as duration.
     *
     * For example `1000` (base unit seconds) would be converted to `16:40` as in
     * 16 minutes and 40 seconds.
     *
     * @param value   Value to format
     * @param format  Format to apply
     * @param base    Override base unit
     * @return Formatted number
     */
    Object.defineProperty(DurationFormatter.prototype, "format", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, format, base) {
            // no base unit?
            var baseUnit = base || this.get("baseUnit");
            // no format passed in or empty
            if (typeof format === "undefined" || format === "") {
                if (this.get("durationFormat") != null) {
                    format = this.get("durationFormat");
                }
                else {
                    format = this.getFormat(_Type__WEBPACK_IMPORTED_MODULE_1__.toNumber(value), undefined, baseUnit);
                }
            }
            // Clean format
            format = _Utils__WEBPACK_IMPORTED_MODULE_2__.cleanFormat(format);
            // get format info (it will also deal with parser caching)
            var info = this.parseFormat(format, baseUnit);
            // cast to number just in case
            // TODO: maybe use better casting
            var source = Number(value);
            // format and replace the number
            var details;
            if (source > this.get("negativeBase")) {
                details = info.positive;
            }
            else if (source < this.get("negativeBase")) {
                details = info.negative;
            }
            else {
                details = info.zero;
            }
            // Format
            var formatted = this.applyFormat(source, details);
            // Apply color?
            if (details.color !== "") {
                formatted = "[" + details.color + "]" + formatted + "[/]";
            }
            return formatted;
        }
    });
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param format  Format string, i.e. "#,###.00"
     * @param base    Override base unit
     * @return Parsed information
     */
    Object.defineProperty(DurationFormatter.prototype, "parseFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (format, base) {
            // Check cache
            // TODO
            // let cached = this.getCache(format);
            // if (cached != null) {
            // 	return cached;
            // }
            var _this = this;
            // no base unit?
            var baseUnit = base || this.get("baseUnit");
            // Initialize duration parsing info
            var info = {
                "positive": {
                    "color": "",
                    "template": "",
                    "parts": [],
                    "source": "",
                    "baseUnit": baseUnit,
                    "parsed": false,
                    "absolute": false
                },
                "negative": {
                    "color": "",
                    "template": "",
                    "parts": [],
                    "source": "",
                    "baseUnit": baseUnit,
                    "parsed": false,
                    "absolute": false
                },
                "zero": {
                    "color": "",
                    "template": "",
                    "parts": [],
                    "source": "",
                    "baseUnit": baseUnit,
                    "parsed": false,
                    "absolute": false
                }
            };
            // Escape double vertical bars (that mean display one vertical bar)
            format = format.replace("||", _Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2);
            // Split it up and deal with different formats
            var parts = format.split("|");
            info.positive.source = parts[0];
            if (typeof parts[2] === "undefined") {
                info.zero = info.positive;
            }
            else {
                info.zero.source = parts[2];
            }
            if (typeof parts[1] === "undefined") {
                info.negative = info.positive;
            }
            else {
                info.negative.source = parts[1];
            }
            // Parse each
            _Object__WEBPACK_IMPORTED_MODULE_3__.each(info, function (_part, item) {
                // Already parsed
                if (item.parsed) {
                    return;
                }
                // Check cached
                // TODO
                // if (typeof this.getCache(item.source) !== "undefined") {
                // 	info[part] = this.getCache(item.source);
                // 	return;
                // }
                // Begin parsing
                var partFormat = item.source;
                // Check for [] directives
                var dirs = [];
                dirs = item.source.match(/^\[([^\]]*)\]/);
                if (dirs && dirs.length && dirs[0] !== "") {
                    partFormat = item.source.substr(dirs[0].length);
                    item.color = dirs[1];
                }
                // Let TextFormatter split into chunks
                var chunks = _TextFormatter__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.chunk(partFormat, true);
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    // replace back double vertical bar
                    chunk.text = chunk.text.replace(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2, "|");
                    if (chunk.type === "value") {
                        // Just "Duration"?
                        // if (chunk.text.toLowerCase() === "duration") {
                        // 	chunk.text = durationFormat;
                        // }
                        // Check for "a" (absolute) modifier
                        if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                            item.absolute = true;
                            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                        }
                        // Find all possible parts
                        var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                        if (matches) {
                            // Populate template
                            for (var x = 0; x < matches.length; x++) {
                                // Is it an alias?
                                if (matches[x] == null) {
                                    matches[x] = _this._unitAliases[matches[x]];
                                }
                                item.parts.push(matches[x]);
                                chunk.text = chunk.text.replace(matches[x], _Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER);
                            }
                        }
                    }
                    // Apply to template
                    item.template += chunk.text;
                }
                // Apply style formatting
                //item.template = TextFormatter.format(item.template, this.outputFormat);
                // Save cache
                // TODO
                //this.setCache(item.source, item);
                // Mark this as parsed
                item.parsed = true;
            });
            // Save cache (the whole thing)
            // TODO
            //this.setCache(format, info);
            return info;
        }
    });
    /**
     * Applies parsed format to a numeric value.
     *
     * @param value    Value
     * @param details  Parsed format as returned by {parseFormat}
     * @return Formatted duration
     */
    Object.defineProperty(DurationFormatter.prototype, "applyFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, details) {
            // Use absolute values
            var negative = !details.absolute && (value < this.get("negativeBase"));
            value = Math.abs(value);
            // Recalculate to milliseconds
            var tstamp = this.toTimeStamp(value, details.baseUnit);
            // Init return value
            var res = details.template;
            // Iterate through duration parts
            for (var i = 0, len = details.parts.length; i < len; i++) {
                // Gather the part
                var part = details.parts[i];
                var unit = this._toTimeUnit(part.substr(0, 1));
                var digits = part.length;
                // Calculate current unit value
                var ints = Math.floor(tstamp / this._getUnitValue(unit));
                res = res.replace(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER, _Utils__WEBPACK_IMPORTED_MODULE_2__.padString(ints, digits, "0"));
                // Reduce timestamp
                tstamp -= ints * this._getUnitValue(unit);
            }
            // Reapply negative sign
            if (negative) {
                res = "-" + res;
            }
            return res;
        }
    });
    /**
     * Converts numeric value to timestamp in milliseconds.
     *
     * @param value     A source value
     * @param baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
     * @return Value representation as a timestamp in milliseconds
     */
    Object.defineProperty(DurationFormatter.prototype, "toTimeStamp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, baseUnit) {
            return value * this._getUnitValue(baseUnit);
        }
    });
    Object.defineProperty(DurationFormatter.prototype, "_toTimeUnit", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (code) {
            switch (code) {
                case "S":
                    return "millisecond";
                case "s":
                    return "second";
                case "m":
                    return "minute";
                case "h":
                    return "hour";
                case "d":
                    return "day";
                case "w":
                    return "week";
                case "M":
                    return "month";
                case "y":
                    return "year";
            }
            ;
        }
    });
    /**
     * Returns appropriate default format for the value.
     *
     * If `maxValue` is sepcified, it will use that value to determine the time
     * unit for the format.
     *
     * For example if your `baseUnit` is `"second"` and you pass in `10`, you
     * will get `"10"`.
     *
     * However, you might want it to be formatted in the context of bigger scale,
     * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all
     * values, including small ones will use format with minutes, e.g.:
     * `00:10`, `00:50`, `12: 30`, etc.
     *
     * @param value     Value to format
     * @param maxValue  Maximum value to be used to determine format
     * @param baseUnit  Base unit of the value
     * @return Format
     */
    Object.defineProperty(DurationFormatter.prototype, "getFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, maxValue, baseUnit) {
            // Is format override set?
            if (this.get("durationFormat") != null) {
                return this.get("durationFormat");
            }
            // Get base unit
            if (!baseUnit) {
                baseUnit = this.get("baseUnit");
            }
            if (maxValue != null && value != maxValue) {
                value = Math.abs(value);
                maxValue = Math.abs(maxValue);
                var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);
                //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);
                //console.log(maxUnit, diffUnit);
                return this.get("durationFormats")[baseUnit][maxUnit];
            }
            else {
                var unit = this.getValueUnit(value, baseUnit);
                return this.get("durationFormats")[baseUnit][unit];
            }
        }
    });
    /**
     * Returns value's closest denominator time unit, e.g 100 seconds is
     * `"minute"`, while 59 seconds would still be `second`.
     *
     * @param value     Source duration value
     * @param baseUnit  Base unit
     * @return Denominator
     */
    Object.defineProperty(DurationFormatter.prototype, "getValueUnit", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, baseUnit) {
            // Get base unit
            if (!baseUnit) {
                baseUnit = this.get("baseUnit");
            }
            // Convert to milliseconds
            var currentUnit;
            var ms = this.getMilliseconds(value, baseUnit);
            _Object__WEBPACK_IMPORTED_MODULE_3__.eachContinue(this._getUnitValues(), function (key, val) {
                if (key == baseUnit || currentUnit) {
                    var num = ms / val;
                    if (num <= 1) {
                        if (!currentUnit) {
                            currentUnit = key;
                        }
                        return false;
                    }
                    currentUnit = key;
                }
                return true;
            });
            return currentUnit;
        }
    });
    /**
     * Converts value to milliseconds according to `baseUnit`.
     *
     * @param value     Source duration value
     * @param baseUnit  Base unit
     * @return Value in milliseconds
     */
    Object.defineProperty(DurationFormatter.prototype, "getMilliseconds", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, baseUnit) {
            // Get base unit
            if (!baseUnit) {
                baseUnit = this.get("baseUnit");
            }
            return value * this._getUnitValue(baseUnit);
        }
    });
    Object.defineProperty(DurationFormatter.prototype, "_getUnitValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (timeUnit) {
            return this._getUnitValues()[timeUnit];
        }
    });
    Object.defineProperty(DurationFormatter.prototype, "_getUnitValues", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return {
                "millisecond": 1,
                "second": 1000,
                "minute": 60000,
                "hour": 3600000,
                "day": 86400000,
                "week": 604800000,
                "month": 2592000000,
                "year": 31536000000,
            };
        }
    });
    return DurationFormatter;
}(_Entity__WEBPACK_IMPORTED_MODULE_5__.Entity));

//# sourceMappingURL=DurationFormatter.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => (/* binding */ linear),
/* harmony export */   "quad": () => (/* binding */ quad),
/* harmony export */   "cubic": () => (/* binding */ cubic),
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "exp": () => (/* binding */ exp),
/* harmony export */   "sine": () => (/* binding */ sine),
/* harmony export */   "circle": () => (/* binding */ circle),
/* harmony export */   "yoyo": () => (/* binding */ yoyo),
/* harmony export */   "out": () => (/* binding */ out),
/* harmony export */   "inOut": () => (/* binding */ inOut),
/* harmony export */   "bounce": () => (/* binding */ bounce),
/* harmony export */   "elastic": () => (/* binding */ elastic)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js");
/**
 * A collection of easing functions
 *
 * Parts of this collection are taken from D3.js library (https://d3js.org/)
 */
/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */

/**
 * The functions below are from D3.js library (https://d3js.org/)
 *
 * ----------------------------------------------------------------------------
 * Copyright 2017 Mike Bostock
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *	this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *	this list of conditions and the following disclaimer in the documentation
 *	and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *	contributors may be used to endorse or promote products derived from this
 *	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 * @hidden
 */
/**
 */
function linear(t) {
    return t;
}
function quad(t) {
    return t * t;
}
function cubic(t) {
    return t * t * t;
}
function pow(t, e) {
    return Math.pow(t, e);
}
function exp(t) {
    return Math.pow(2, 10 * t - 10);
}
function sine(t) {
    return 1 - Math.cos(t * _Math__WEBPACK_IMPORTED_MODULE_0__.HALFPI);
}
function circle(t) {
    return 1 - Math.sqrt(1 - t * t);
}
/**
 * ============================================================================
 * TRANSFORMERS
 * ============================================================================
 * @hidden
 */
/**
 */
function yoyo(ease) {
    return function (t) {
        if (t < 0.5) {
            return ease(t * 2.0);
        }
        else {
            return ease((1.0 - t) * 2.0);
        }
    };
}
function out(ease) {
    return function (t) {
        return 1.0 - ease(1.0 - t);
    };
}
function inOut(ease) {
    return function (t) {
        if (t <= 0.5) {
            return ease(t * 2.0) / 2.0;
        }
        else {
            return 1.0 - (ease((1.0 - t) * 2.0) / 2.0);
        }
    };
}
/**
 * ============================================================================
 * BOUNCE
 * ============================================================================
 * @hidden
 */
var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
function bounce(t) {
    return 1 - bounceOut(1 - t);
}
/**
 * @ignore
 */
function bounceOut(t) {
    t = t;
    if (t < b1) {
        return b0 * t * t;
    }
    else if (t < b3) {
        return b0 * (t -= b2) * t + b4;
    }
    else if (t < b6) {
        return b0 * (t -= b5) * t + b7;
    }
    else {
        return b0 * (t -= b8) * t + b9;
    }
}
/**
 * ============================================================================
 * ELASTIC
 * ============================================================================
 * @hidden
 */
/**
 * @ignore
 */
var tau = 2 * Math.PI;
/**
 * @ignore
 */
var amplitude = 1;
/**
 * @ignore
 */
var period = 0.3 / tau;
/**
 * @ignore
 */
var s = Math.asin(1 / amplitude) * period;
function elastic(t) {
    var v = t;
    return amplitude * Math.pow(2, 10 * --v) * Math.sin((s - v) / period);
}
//# sourceMappingURL=Ease.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Adapters": () => (/* binding */ Adapters),
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Settings": () => (/* binding */ Settings),
/* harmony export */   "Entity": () => (/* binding */ Entity)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Disposer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _Animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Animation */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js");
/* harmony import */ var _States__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./States */ "./node_modules/@amcharts/amcharts5/.internal/core/util/States.js");
/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Registry */ "./node_modules/@amcharts/amcharts5/.internal/core/Registry.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Ease */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _Order__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Order */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js");










/**
 * Allows to dynamically modify setting value of its target element.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
 */
var Adapters = /** @class */ (function () {
    function Adapters(entity) {
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_callbacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._entity = entity;
    }
    /**
     * Add a function (`callback`) that will modify value for setting `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
     */
    Object.defineProperty(Adapters.prototype, "add", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var callbacks = this._callbacks[key];
            if (callbacks === undefined) {
                callbacks = this._callbacks[key] = [];
            }
            callbacks.push(callback);
            this._entity._markDirtyKey(key);
            return new _Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer(function () {
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeFirst(callbacks, callback);
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Adapters.prototype, "fold", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var callbacks = this._callbacks[key];
            if (callbacks !== undefined) {
                for (var i = 0, len = callbacks.length; i < len; ++i) {
                    value = callbacks[i](value, this._entity, key);
                }
            }
            return value;
        }
    });
    return Adapters;
}());

/**
 * Animation object.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info
 */
var Animation = /** @class */ (function () {
    function Animation(from, to, duration, easing, loops, startingTime) {
        Object.defineProperty(this, "_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_easing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_loops", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_interpolate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_oldTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_stopped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_playing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher()
        });
        this._from = from;
        this._to = to;
        this._duration = duration;
        this._easing = easing;
        this._loops = loops;
        this._interpolate = (0,_Animation__WEBPACK_IMPORTED_MODULE_3__.getInterpolate)(from, to);
        this._oldTime = startingTime;
    }
    Object.defineProperty(Animation.prototype, "to", {
        get: function () {
            return this._to;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "from", {
        get: function () {
            return this._from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "playing", {
        get: function () {
            return this._playing;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "stopped", {
        get: function () {
            return this._stopped;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "stop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._stopped) {
                this._stopped = true;
                this._playing = false;
                if (this.events.isEnabled("stopped")) {
                    this.events.dispatch("stopped", {
                        type: "stopped",
                        target: this,
                    });
                }
            }
        }
    });
    Object.defineProperty(Animation.prototype, "pause", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._playing = false;
            this._oldTime = null;
        }
    });
    Object.defineProperty(Animation.prototype, "play", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._stopped) {
                this._playing = true;
            }
        }
    });
    Object.defineProperty(Animation.prototype, "percentage", {
        get: function () {
            return this._time / this._duration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "waitForStop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            return new Promise(function (resolve, _reject) {
                if (_this._stopped) {
                    resolve();
                }
                else {
                    var listener = function () {
                        stopped_1.dispose();
                        resolve();
                    };
                    var stopped_1 = _this.events.on("stopped", listener);
                }
            });
        }
    });
    Object.defineProperty(Animation.prototype, "_checkEnded", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this._loops > 1) {
                --this._loops;
                return false;
            }
            else {
                return true;
            }
        }
    });
    Object.defineProperty(Animation.prototype, "_run", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            if (this._oldTime !== null) {
                this._time += currentTime - this._oldTime;
                if (this._time > this._duration) {
                    this._time = this._duration;
                }
            }
            this._oldTime = currentTime;
        }
    });
    Object.defineProperty(Animation.prototype, "_reset", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            this._oldTime = currentTime;
            this._time = 0;
        }
    });
    Object.defineProperty(Animation.prototype, "_value", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (diff) {
            return this._interpolate(this._easing(diff), this._from, this._to);
        }
    });
    return Animation;
}());

/**
 * @ignore
 */
var counter = 0;
/**
 * Base class for [[Entity]] objects that support Settings.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
 */
var Settings = /** @class */ (function () {
    function Settings(settings) {
        /**
         * Unique ID.
         */
        Object.defineProperty(this, "uid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ++counter
        });
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_privateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_settingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_privateSettingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_prevSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_prevPrivateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_animatingSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_animatingPrivateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_animatingCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // TODO move this into Entity
        Object.defineProperty(this, "_userProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._settings = settings;
    }
    Object.defineProperty(Settings.prototype, "_checkDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_4__.keys(this._settings).forEach(function (key) {
                _this._userProperties[key] = true;
                _this._markDirtyKey(key);
            });
        }
    });
    Object.defineProperty(Settings.prototype, "_runAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (currentTime) {
            var _this = this;
            if (!this.isDisposed()) {
                _Object__WEBPACK_IMPORTED_MODULE_4__.each(this._animatingSettings, function (key, animation) {
                    if (animation._stopped) {
                        _this._stopAnimation(key);
                    }
                    else if (animation._playing) {
                        animation._run(currentTime);
                        var diff = animation.percentage;
                        if (diff >= 1) {
                            if (animation._checkEnded()) {
                                _this.set(key, animation._value(1));
                            }
                            else {
                                animation._reset(currentTime);
                                _this._set(key, animation._value(1));
                            }
                        }
                        else {
                            _this._set(key, animation._value(diff));
                        }
                    }
                });
                _Object__WEBPACK_IMPORTED_MODULE_4__.each(this._animatingPrivateSettings, function (key, animation) {
                    if (animation._stopped) {
                        _this._stopAnimationPrivate(key);
                    }
                    else if (animation._playing) {
                        animation._run(currentTime);
                        var diff = animation.percentage;
                        if (diff >= 1) {
                            if (animation._checkEnded()) {
                                _this.setPrivate(key, animation._value(1));
                            }
                            else {
                                animation._reset(currentTime);
                                _this._setPrivate(key, animation._value(1));
                            }
                        }
                        else {
                            _this._setPrivate(key, animation._value(diff));
                        }
                    }
                });
                if (this._animatingCount < 0) {
                    throw new Error("Invalid animation count");
                }
                return this._animatingCount === 0;
            }
            else {
                return true;
            }
        }
    });
    Object.defineProperty(Settings.prototype, "_markDirtyKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_key) {
            this.markDirty();
        }
    });
    Object.defineProperty(Settings.prototype, "_markDirtyPrivateKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_key) {
            this.markDirty();
        }
    });
    /**
     * Sets a callback function to invoke when specific key of settings changes
     * or is set.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @param   key       Settings key
     * @param   callback  Callback
     * @return            Disposer for event
     */
    Object.defineProperty(Settings.prototype, "on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var _this = this;
            var events = this._settingEvents[key];
            if (events === undefined) {
                events = this._settingEvents[key] = [];
            }
            events.push(callback);
            return new _Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer(function () {
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeFirst(events, callback);
                if (events.length === 0) {
                    delete _this._settingEvents[key];
                }
            });
        }
    });
    /**
     * Sets a callback function to invoke when specific key of private settings
     * changes or is set.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
     * @ignore
     * @param   key       Private settings key
     * @param   callback  Callback
     * @return            Disposer for event
     */
    Object.defineProperty(Settings.prototype, "onPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var _this = this;
            var events = this._privateSettingEvents[key];
            if (events === undefined) {
                events = this._privateSettingEvents[key] = [];
            }
            events.push(callback);
            return new _Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer(function () {
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeFirst(events, callback);
                if (events.length === 0) {
                    delete _this._privateSettingEvents[key];
                }
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "getRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._settings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    Object.defineProperty(Settings.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            return this.getRaw(key, fallback);
        }
    });
    Object.defineProperty(Settings.prototype, "_sendKeyEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var _this = this;
            var events = this._settingEvents[key];
            if (events !== undefined) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(events, function (callback) {
                    callback(value, _this, key);
                });
            }
        }
    });
    Object.defineProperty(Settings.prototype, "_sendPrivateKeyEvent", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var _this = this;
            var events = this._privateSettingEvents[key];
            if (events !== undefined) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(events, function (callback) {
                    callback(value, _this, key);
                });
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "_setRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, old, value) {
            this._prevSettings[key] = old;
            this._sendKeyEvent(key, value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "setRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var old = this._settings[key];
            this._settings[key] = value;
            if (old !== value) {
                this._setRaw(key, old, value);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "_set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var old = this._settings[key];
            this._settings[key] = value;
            if (old !== value) {
                this._setRaw(key, old, value);
                this._markDirtyKey(key);
            }
        }
    });
    Object.defineProperty(Settings.prototype, "_stopAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            var animation = this._animatingSettings[key];
            if (animation) {
                delete this._animatingSettings[key];
                --this._animatingCount;
                animation.stop();
            }
        }
    });
    /**
     * Sets a setting `value` for the specified `key`, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */
    Object.defineProperty(Settings.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._set(key, value);
            this._stopAnimation(key);
            return value;
        }
    });
    /**
     * Removes a setting value for the specified `key`;
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */
    Object.defineProperty(Settings.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (key in this._settings) {
                this._prevSettings[key] = this._settings[key];
                delete this._settings[key];
                this._sendKeyEvent(key, undefined);
                this._markDirtyKey(key);
            }
            this._stopAnimation(key);
        }
    });
    /**
     * Removes all keys;
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     */
    Object.defineProperty(Settings.prototype, "removeAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(_Object__WEBPACK_IMPORTED_MODULE_4__.keys(this._settings), function (key) {
                _this.remove(key);
            });
        }
    });
    /**
     * Returns a value of a private setting.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info
     */
    Object.defineProperty(Settings.prototype, "getPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._privateSettings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "_setPrivateRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, old, value) {
            this._prevPrivateSettings[key] = old;
            this._sendPrivateKeyEvent(key, value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "setPrivateRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var old = this._privateSettings[key];
            this._privateSettings[key] = value;
            if (old !== value) {
                this._setPrivateRaw(key, old, value);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "_setPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var old = this._privateSettings[key];
            this._privateSettings[key] = value;
            if (old !== value) {
                this._setPrivateRaw(key, old, value);
                this._markDirtyPrivateKey(key);
            }
        }
    });
    Object.defineProperty(Settings.prototype, "_stopAnimationPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            var animation = this._animatingPrivateSettings[key];
            if (animation) {
                animation.stop();
                delete this._animatingPrivateSettings[key];
                --this._animatingCount;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "setPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._setPrivate(key, value);
            this._stopAnimationPrivate(key);
            return value;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "removePrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (key in this._privateSettings) {
                this._prevPrivateSettings[key] = this._privateSettings[key];
                delete this._privateSettings[key];
                this._markDirtyPrivateKey(key);
            }
            this._stopAnimationPrivate(key);
        }
    });
    /**
     * Sets multiple settings at once.
     *
     * `settings` must be an object with key: value pairs.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param settings Settings
     */
    Object.defineProperty(Settings.prototype, "setAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (settings) {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_4__.each(settings, function (key, value) {
                _this.set(key, value);
            });
        }
    });
    /**
     * Animates setting values from current/start values to new ones.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info
     * @param   options  Animation options
     * @return           Animation object
     */
    Object.defineProperty(Settings.prototype, "animate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options) {
            var key = options.key;
            var to = options.to;
            var duration = options.duration;
            var loops = options.loops || 1;
            var from = (options.from === undefined ? this.get(key) : options.from);
            var easing = (options.easing === undefined ? _Ease__WEBPACK_IMPORTED_MODULE_5__.linear : options.easing);
            if (duration === 0) {
                this.set(key, to);
            }
            else {
                if (from === undefined || from === to) {
                    this.set(key, to);
                }
                else {
                    ++this._animatingCount;
                    this.set(key, from);
                    var animation_1 = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                    this._startAnimation();
                    return animation_1;
                }
            }
            var animation = new Animation(from, to, duration, easing, loops, null);
            animation.stop();
            return animation;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Settings.prototype, "animatePrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (options) {
            var key = options.key;
            var to = options.to;
            var duration = options.duration;
            var loops = options.loops || 1;
            var from = (options.from === undefined ? this.getPrivate(key) : options.from);
            var easing = (options.easing === undefined ? _Ease__WEBPACK_IMPORTED_MODULE_5__.linear : options.easing);
            if (duration === 0) {
                this.setPrivate(key, to);
            }
            else {
                if (from === undefined || from === to) {
                    this.setPrivate(key, to);
                }
                else {
                    ++this._animatingCount;
                    this.setPrivate(key, from);
                    var animation_2 = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                    this._startAnimation();
                    return animation_2;
                }
            }
            var animation = new Animation(from, to, duration, easing, loops, null);
            animation.stop();
            return animation;
        }
    });
    Object.defineProperty(Settings.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    /**
     * Returns `true` if this element is disposed.
     *
     * @return Disposed
     */
    Object.defineProperty(Settings.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    /**
     * Disposes this object.
     */
    Object.defineProperty(Settings.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                this._dispose();
            }
        }
    });
    return Settings;
}());

/**
 * Base class.
 *
 * @important
 */
var Entity = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Entity, _super);
    /**
     * IMPORTANT! Do not instantiate this class via `new Class()` syntax.
     *
     * Use static method `Class.new()` instead.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @ignore
     */
    function Entity(root, settings, isReal, templates) {
        if (templates === void 0) { templates = []; }
        var _this = _super.call(this, settings) || this;
        Object.defineProperty(_this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // for testing purposes
        Object.defineProperty(_this, "states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _States__WEBPACK_IMPORTED_MODULE_7__.States(_this)
        });
        Object.defineProperty(_this, "adapters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Adapters(_this)
        });
        Object.defineProperty(_this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._createEvents()
        });
        Object.defineProperty(_this, "_userPrivateProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_dirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_dirtyPrivate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Templates for the themes
        Object.defineProperty(_this, "_templates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Internal templates which can be overridden by the user's templates
        Object.defineProperty(_this, "_internalTemplates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Default themes which can be overridden by the user's themes
        Object.defineProperty(_this, "_defaultThemes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Disposers for all of the templates
        Object.defineProperty(_this, "_templateDisposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_disposers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // Whether the template setup function should be run
        Object.defineProperty(_this, "_runSetup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "_disposerProperties", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        _this._root = root;
        _this._internalTemplates = templates;
        return _this;
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   root      Root element
     * @param   settings  Settings
     * @param   template  Template
     * @return            Instantiated object
     */
    Object.defineProperty(Entity, "new", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root, settings, template) {
            var x = (new this(root, settings, true));
            x._template = template;
            x._afterNew();
            return x;
        }
    });
    Object.defineProperty(Entity, "_new", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (root, settings, templates) {
            if (templates === void 0) { templates = []; }
            var x = (new this(root, settings, true, templates));
            x._afterNew();
            return x;
        }
    });
    Object.defineProperty(Entity.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._checkDirty();
            var shouldApply = false;
            var template = this._template;
            if (template) {
                shouldApply = true;
                template._setObjectTemplate(this);
            }
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._internalTemplates, function (template) {
                shouldApply = true;
                template._setObjectTemplate(_this);
            });
            if (shouldApply) {
                this._applyTemplates(false);
            }
            this.states.create("default", {});
            this._setDefaults();
        }
    });
    // This is the same as _afterNew, except it also applies the themes.
    // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).
    Object.defineProperty(Entity.prototype, "_afterNewApplyThemes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            this._checkDirty();
            var template = this._template;
            if (template) {
                template._setObjectTemplate(this);
            }
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._internalTemplates, function (template) {
                template._setObjectTemplate(_this);
            });
            this.states.create("default", {});
            this._setDefaults();
            this._applyThemes();
        }
    });
    Object.defineProperty(Entity.prototype, "_createEvents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return new _EventDispatcher__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher();
        }
    });
    Object.defineProperty(Entity.prototype, "classNames", {
        /**
         * @ignore
         */
        get: function () {
            return this.constructor.classNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "className", {
        /**
         * @ignore
         */
        get: function () {
            return this.constructor.className;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "_setDefaults", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Entity.prototype, "_setDefault", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            if (!(key in this._settings)) {
                _super.prototype.set.call(this, key, value);
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_setRawDefault", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            if (!(key in this._settings)) {
                _super.prototype.setRaw.call(this, key, value);
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_clearDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_4__.keys(this._dirty).forEach(function (key) {
                _this._dirty[key] = false;
            });
            _Object__WEBPACK_IMPORTED_MODULE_4__.keys(this._dirtyPrivate).forEach(function (key) {
                _this._dirtyPrivate[key] = false;
            });
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "isDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            return !!this._dirty[key];
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "isPrivateDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            return !!this._dirtyPrivate[key];
        }
    });
    Object.defineProperty(Entity.prototype, "_markDirtyKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            this._dirty[key] = true;
            _super.prototype._markDirtyKey.call(this, key);
        }
    });
    Object.defineProperty(Entity.prototype, "_markDirtyPrivateKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            this._dirtyPrivate[key] = true;
            _super.prototype._markDirtyKey.call(this, key);
        }
    });
    /**
     * Checks if element is of certain class (or inherits one).
     *
     * @param   type  Class name to check
     * @return {boolean} Is of class?
     */
    Object.defineProperty(Entity.prototype, "isType", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type) {
            return this.classNames.indexOf(type) !== -1;
        }
    });
    Object.defineProperty(Entity.prototype, "_pushPropertyDisposer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, disposer) {
            var disposers = this._disposerProperties[key];
            if (disposers === undefined) {
                disposers = this._disposerProperties[key] = [];
            }
            disposers.push(disposer);
            return disposer;
        }
    });
    Object.defineProperty(Entity.prototype, "_disposeProperty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            var disposers = this._disposerProperties[key];
            if (disposers !== undefined) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(disposers, function (disposer) {
                    disposer.dispose();
                });
                delete this._disposerProperties[key];
            }
        }
    });
    Object.defineProperty(Entity.prototype, "template", {
        get: function () {
            return this._template;
        },
        /**
         * @todo needs description
         * @param  value  Template
         */
        set: function (value) {
            var template = this._template;
            if (template !== value) {
                this._template = value;
                if (template) {
                    template._removeObjectTemplate(this);
                }
                if (value) {
                    value._setObjectTemplate(this);
                }
                this._applyTemplates();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "markDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._root._addDirtyEntity(this);
        }
    });
    Object.defineProperty(Entity.prototype, "_startAnimation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._root._addAnimation(this);
        }
    });
    Object.defineProperty(Entity.prototype, "_animationTime", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._root.animationTime;
        }
    });
    Object.defineProperty(Entity.prototype, "_applyState", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_name) { }
    });
    Object.defineProperty(Entity.prototype, "_applyStateAnimated", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_name, _duration) { }
    });
    Object.defineProperty(Entity.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this.adapters.fold(key, this._settings[key]);
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    /**
     * Sets a setting `value` for the specified `key`, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */
    Object.defineProperty(Entity.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._userProperties[key] = true;
            return _super.prototype.set.call(this, key, value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "setRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._userProperties[key] = true;
            _super.prototype.setRaw.call(this, key, value);
        }
    });
    /**
     * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */
    Object.defineProperty(Entity.prototype, "_setSoft", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            if (!this._userProperties[key]) {
                return _super.prototype.set.call(this, key, value);
            }
            return value;
        }
    });
    /**
     * Removes a setting value for the specified `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */
    Object.defineProperty(Entity.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            delete this._userProperties[key];
            this._removeTemplateProperty(key);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "setPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._userPrivateProperties[key] = true;
            return _super.prototype.setPrivate.call(this, key, value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "setPrivateRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._userPrivateProperties[key] = true;
            _super.prototype.setPrivateRaw.call(this, key, value);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "removePrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            delete this._userPrivateProperties[key];
            this._removeTemplatePrivateProperty(key);
        }
    });
    Object.defineProperty(Entity.prototype, "_setTemplateProperty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (template, key, value) {
            if (!this._userProperties[key]) {
                var match = this._findTemplateByKey(key);
                if (template === match) {
                    _super.prototype.set.call(this, key, value);
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_setTemplatePrivateProperty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (template, key, value) {
            if (!this._userPrivateProperties[key]) {
                var match = this._findTemplateByPrivateKey(key);
                if (template === match) {
                    _super.prototype.setPrivate.call(this, key, value);
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_removeTemplateProperty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (!this._userProperties[key]) {
                var match = this._findTemplateByKey(key);
                if (match) {
                    // TODO don't stop the animation if the property didn't change
                    _super.prototype.set.call(this, key, match._settings[key]);
                }
                else {
                    _super.prototype.remove.call(this, key);
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_removeTemplatePrivateProperty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (!this._userPrivateProperties[key]) {
                var match = this._findTemplateByPrivateKey(key);
                if (match) {
                    // TODO don't stop the animation if the property didn't change
                    _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);
                }
                else {
                    _super.prototype.removePrivate.call(this, key);
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_walkParents", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            f(this._root._rootContainer);
            f(this);
        }
    });
    // TODO faster version of this method which is specialized to just 1 key
    Object.defineProperty(Entity.prototype, "_applyStateByKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            var other = this.states.create(name, {});
            var seen = {};
            this._eachTemplate(function (template) {
                var state = template.states.lookup(name);
                if (state) {
                    state._apply(other, seen);
                }
            });
            _Object__WEBPACK_IMPORTED_MODULE_4__.each(other._settings, function (key) {
                if (!seen[key] && !other._userSettings[key]) {
                    other.remove(key);
                }
            });
        }
    });
    Object.defineProperty(Entity.prototype, "_applyTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (template, state) {
            var _this = this;
            this._templateDisposers.push(template._apply(this, state));
            _Object__WEBPACK_IMPORTED_MODULE_4__.each(template._settings, function (key, value) {
                if (!state.settings[key] && !_this._userProperties[key]) {
                    state.settings[key] = true;
                    _super.prototype.set.call(_this, key, value);
                }
            });
            _Object__WEBPACK_IMPORTED_MODULE_4__.each(template._privateSettings, function (key, value) {
                if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {
                    state.privateSettings[key] = true;
                    _super.prototype.setPrivate.call(_this, key, value);
                }
            });
            if (this._runSetup && template.setup) {
                this._runSetup = false;
                template.setup(this);
            }
        }
    });
    /**
     * Calls the closure with each template and returns the first template which is true
     */
    Object.defineProperty(Entity.prototype, "_findStaticTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            if (this._template) {
                if (f(this._template)) {
                    return this._template;
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_eachTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            this._findStaticTemplate(function (template) {
                f(template);
                return false;
            });
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._internalTemplates, f);
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._templates, f);
        }
    });
    Object.defineProperty(Entity.prototype, "_applyTemplates", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (remove) {
            var _this = this;
            if (remove === void 0) { remove = true; }
            if (remove) {
                this._disposeTemplates();
            }
            var state = {
                settings: {},
                privateSettings: {},
                states: {},
            };
            this._eachTemplate(function (template) {
                _this._applyTemplate(template, state);
            });
            if (remove) {
                _Object__WEBPACK_IMPORTED_MODULE_4__.each(this._settings, function (key) {
                    if (!_this._userProperties[key] && !state.settings[key]) {
                        _super.prototype.remove.call(_this, key);
                    }
                });
                _Object__WEBPACK_IMPORTED_MODULE_4__.each(this._privateSettings, function (key) {
                    if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {
                        _super.prototype.removePrivate.call(_this, key);
                    }
                });
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_findTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            var value = this._findStaticTemplate(f);
            if (value === undefined) {
                var value_1 = _Array__WEBPACK_IMPORTED_MODULE_1__.find(this._internalTemplates, f);
                if (value_1 === undefined) {
                    return _Array__WEBPACK_IMPORTED_MODULE_1__.find(this._templates, f);
                }
                else {
                    return value_1;
                }
            }
            else {
                return value;
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_findTemplateByKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            return this._findTemplate(function (template) {
                return key in template._settings;
            });
        }
    });
    Object.defineProperty(Entity.prototype, "_findTemplateByPrivateKey", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            return this._findTemplate(function (template) {
                return key in template._privateSettings;
            });
        }
    });
    Object.defineProperty(Entity.prototype, "_disposeTemplates", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._templateDisposers, function (disposer) {
                disposer.dispose();
            });
            this._templateDisposers.length = 0;
        }
    });
    Object.defineProperty(Entity.prototype, "_removeTemplates", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._templates, function (template) {
                template._removeObjectTemplate(_this);
            });
            this._templates.length = 0;
        }
    });
    Object.defineProperty(Entity.prototype, "_applyThemes", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var isConnected = false;
            var defaults = [];
            var themes = [];
            var themeTags = new Set();
            var tags = this.get("themeTagsSelf");
            if (tags) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(tags, function (tag) {
                    themeTags.add(tag);
                });
            }
            this._walkParents(function (entity) {
                if (entity === _this._root._rootContainer) {
                    isConnected = true;
                }
                if (entity._defaultThemes.length > 0) {
                    defaults.push(entity._defaultThemes);
                }
                var theme = entity.get("themes");
                if (theme) {
                    themes.push(theme);
                }
                var tags = entity.get("themeTags");
                if (tags) {
                    _Array__WEBPACK_IMPORTED_MODULE_1__.each(tags, function (tag) {
                        themeTags.add(tag);
                    });
                }
            });
            themes = defaults.concat(themes);
            this._removeTemplates();
            if (isConnected) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.eachReverse(this.classNames, function (name) {
                    var allRules = [];
                    _Array__WEBPACK_IMPORTED_MODULE_1__.each(themes, function (themes) {
                        _Array__WEBPACK_IMPORTED_MODULE_1__.each(themes, function (theme) {
                            var rules = theme._lookupRules(name);
                            if (rules) {
                                _Array__WEBPACK_IMPORTED_MODULE_1__.eachReverse(rules, function (rule) {
                                    var matches = rule.tags.every(function (tag) {
                                        return themeTags.has(tag);
                                    });
                                    if (matches) {
                                        var result = _Array__WEBPACK_IMPORTED_MODULE_1__.getFirstSortedIndex(allRules, function (x) {
                                            var order = _Order__WEBPACK_IMPORTED_MODULE_8__.compare(rule.tags.length, x.tags.length);
                                            if (order === 0) {
                                                return _Order__WEBPACK_IMPORTED_MODULE_8__.compareArray(rule.tags, x.tags, _Order__WEBPACK_IMPORTED_MODULE_8__.compare);
                                            }
                                            else {
                                                return order;
                                            }
                                        });
                                        allRules.splice(result.index, 0, rule);
                                    }
                                });
                            }
                        });
                    });
                    _Array__WEBPACK_IMPORTED_MODULE_1__.each(allRules, function (rule) {
                        _this._templates.push(rule.template);
                        rule.template._setObjectTemplate(_this);
                    });
                });
            }
            this._applyTemplates();
            if (isConnected) {
                // This causes it to only run the setup function the first time that the themes are applied
                this._runSetup = false;
            }
            return isConnected;
        }
    });
    Object.defineProperty(Entity.prototype, "_changed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    Object.defineProperty(Entity.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("id")) {
                var id = this.get("id");
                if (id) {
                    if (_Registry__WEBPACK_IMPORTED_MODULE_9__.registry.entitiesById[id]) {
                        throw new Error("An entity with id \"" + id + "\" already exists.");
                    }
                    _Registry__WEBPACK_IMPORTED_MODULE_9__.registry.entitiesById[id] = this;
                }
                var prevId = this._prevSettings.id;
                if (prevId) {
                    delete _Registry__WEBPACK_IMPORTED_MODULE_9__.registry.entitiesById[prevId];
                }
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () { }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "addDisposer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (disposer) {
            this._disposers.push(disposer);
            return disposer;
        }
    });
    Object.defineProperty(Entity.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._dispose.call(this);
            var template = this._template;
            if (template) {
                template._removeObjectTemplate(this);
            }
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._internalTemplates, function (template) {
                template._removeObjectTemplate(_this);
            });
            this._removeTemplates();
            this._disposeTemplates();
            this.events.dispose();
            this._disposers.forEach(function (x) {
                x.dispose();
            });
            _Object__WEBPACK_IMPORTED_MODULE_4__.each(this._disposerProperties, function (_, disposers) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(disposers, function (disposer) {
                    disposer.dispose();
                });
            });
            var id = this.get("id");
            if (id) {
                delete _Registry__WEBPACK_IMPORTED_MODULE_9__.registry.entitiesById[id];
            }
        }
    });
    /**
     * Creates and returns a "disposable" timeout.
     *
     * @param   fn     Callback
     * @param   delay  Delay in milliseconds
     * @return         Timeout disposer
     */
    Object.defineProperty(Entity.prototype, "setTimeout", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fn, delay) {
            var _this = this;
            var id = setTimeout(function () {
                _this.removeDispose(disposer);
                fn();
            }, delay);
            var disposer = new _Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer(function () {
                clearTimeout(id);
            });
            this._disposers.push(disposer);
            return disposer;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "removeDispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            if (!this.isDisposed()) {
                var index = _Array__WEBPACK_IMPORTED_MODULE_1__.indexOf(this._disposers, target);
                if (index > -1) {
                    this._disposers.splice(index, 1);
                }
            }
            target.dispose();
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "hasTag", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tag) {
            return _Array__WEBPACK_IMPORTED_MODULE_1__.indexOf(this.get("themeTags", []), tag) !== -1;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "addTag", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tag) {
            if (!this.hasTag(tag)) {
                var tags = this.get("themeTags", []);
                tags.push(tag);
                this.set("themeTags", tags);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Entity.prototype, "removeTag", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tag) {
            if (this.hasTag(tag)) {
                var tags = this.get("themeTags", []);
                _Array__WEBPACK_IMPORTED_MODULE_1__.remove(tags, tag);
                this.set("themeTags", tags);
            }
        }
    });
    Object.defineProperty(Entity.prototype, "_t", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text, locale) {
            var _a;
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                rest[_i - 2] = arguments[_i];
            }
            return (_a = this._root.language).translate.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([text, locale], (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__read)(rest)));
        }
    });
    Object.defineProperty(Entity, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Entity"
    });
    Object.defineProperty(Entity, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ["Entity"]
    });
    return Entity;
}(Settings));

//# sourceMappingURL=Entity.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher),
/* harmony export */   "TargetedEventDispatcher": () => (/* binding */ TargetedEventDispatcher)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/**
 * Event Dispatcher module is used for registering listeners and dispatching
 * events across amCharts system.
 */

/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */



/**
 * Universal Event Dispatcher.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
 */
var EventDispatcher = /** @class */ (function () {
    /**
     * Constructor
     */
    function EventDispatcher() {
        Object.defineProperty(this, "_listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_killed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_iterating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._listeners = [];
        this._killed = [];
        this._disabled = {};
        this._iterating = 0;
        this._enabled = true;
        this._disposed = false;
    }
    /**
     * Returns if this object has been already disposed.
     *
     * @return Disposed?
     */
    Object.defineProperty(EventDispatcher.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    /**
     * Dispose (destroy) this object.
     */
    Object.defineProperty(EventDispatcher.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                var a = this._listeners;
                this._iterating = 1;
                this._listeners = null;
                this._disabled = null;
                try {
                    _Array__WEBPACK_IMPORTED_MODULE_0__.each(a, function (x) {
                        x.disposer.dispose();
                    });
                }
                finally {
                    this._killed = null;
                    this._iterating = null;
                }
            }
        }
    });
    /**
     * Checks if this particular event dispatcher has any listeners set.
     *
     * @return Has listeners?
     */
    Object.defineProperty(EventDispatcher.prototype, "hasListeners", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._listeners.length !== 0;
        }
    });
    /**
     * Checks if this particular event dispatcher has any particular listeners set.
     *
     * @return Has particular event listeners?
     */
    Object.defineProperty(EventDispatcher.prototype, "hasListenersByType", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type) {
            return _Array__WEBPACK_IMPORTED_MODULE_0__.any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });
        }
    });
    /**
     * Enable dispatching of events if they were previously disabled by
     * `disable()`.
     */
    Object.defineProperty(EventDispatcher.prototype, "enable", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._enabled = true;
        }
    });
    /**
     * Disable dispatching of events until re-enabled by `enable()`.
     */
    Object.defineProperty(EventDispatcher.prototype, "disable", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._enabled = false;
        }
    });
    /**
     * Enable dispatching particular event, if it was disabled before by
     * `disableType()`.
     *
     * @param type Event type
     */
    Object.defineProperty(EventDispatcher.prototype, "enableType", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type) {
            delete this._disabled[type];
        }
    });
    /**
     * Disable dispatching of events for a certain event type.
     *
     * Optionally, can set how many dispatches to skip before automatically
     * re-enabling the dispatching.
     *
     * @param type    Event type
     * @param amount  Number of event dispatches to skip
     */
    Object.defineProperty(EventDispatcher.prototype, "disableType", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, amount) {
            if (amount === void 0) { amount = Infinity; }
            this._disabled[type] = amount;
        }
    });
    /**
     * Removes listener from dispatcher.
     *
     * Will throw an exception if such listener does not exists.
     *
     * @param listener Listener to remove
     */
    Object.defineProperty(EventDispatcher.prototype, "_removeListener", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (listener) {
            if (this._iterating === 0) {
                var index = this._listeners.indexOf(listener);
                if (index === -1) {
                    throw new Error("Invalid state: could not remove listener");
                }
                this._listeners.splice(index, 1);
            }
            else {
                this._killed.push(listener);
            }
        }
    });
    /**
     * Removes existing listener by certain parameters.
     *
     * @param once         Listener's once setting
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     */
    Object.defineProperty(EventDispatcher.prototype, "_removeExistingListener", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (once, type, callback, context) {
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            this._eachListener(function (info) {
                if (info.once === once && // TODO is this correct ?
                    info.type === type &&
                    (callback === undefined || info.callback === callback) &&
                    info.context === context) {
                    info.disposer.dispose();
                }
            });
        }
    });
    /**
     * Checks if dispatching for particular event type is enabled.
     *
     * @param type  Event type
     * @return Enabled?
     */
    Object.defineProperty(EventDispatcher.prototype, "isEnabled", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type) {
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            // TODO is this check correct ?
            return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;
        }
    });
    /**
     * Checks if there's already a listener with specific parameters.
     *
     * @param type      Listener's type
     * @param callback  Callback function
     * @param context   Callback context
     * @return Has listener?
     */
    Object.defineProperty(EventDispatcher.prototype, "has", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, callback, context) {
            var index = _Array__WEBPACK_IMPORTED_MODULE_0__.findIndex(this._listeners, function (info) {
                return info.once !== true && // Ignoring "once" listeners
                    info.type === type &&
                    (callback === undefined || info.callback === callback) &&
                    info.context === context;
            });
            return index !== -1;
        }
    });
    /**
     * Checks whether event of the particular type should be dispatched.
     *
     * @param type  Event type
     * @return Dispatch?
     */
    Object.defineProperty(EventDispatcher.prototype, "_shouldDispatch", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type) {
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            var count = this._disabled[type];
            if (!_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(count)) {
                return this._enabled;
            }
            else {
                if (count <= 1) {
                    delete this._disabled[type];
                }
                else {
                    --this._disabled[type];
                }
                return false;
            }
        }
    });
    /**
     * [_eachListener description]
     *
     * All of this extra code is needed when a listener is removed while iterating
     *
     * @todo Description
     * @param fn [description]
     */
    Object.defineProperty(EventDispatcher.prototype, "_eachListener", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (fn) {
            var _this = this;
            ++this._iterating;
            try {
                _Array__WEBPACK_IMPORTED_MODULE_0__.each(this._listeners, fn);
            }
            finally {
                --this._iterating;
                // TODO should this be inside or outside the finally ?
                if (this._iterating === 0 && this._killed.length !== 0) {
                    // Remove killed listeners
                    _Array__WEBPACK_IMPORTED_MODULE_0__.each(this._killed, function (killed) {
                        _this._removeListener(killed);
                    });
                    this._killed.length = 0;
                }
            }
        }
    });
    /**
     * Dispatches an event immediately without waiting for next cycle.
     *
     * @param type   Event type
     * @param event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    Object.defineProperty(EventDispatcher.prototype, "dispatch", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, event) {
            if (this._shouldDispatch(type)) {
                // TODO check if it's faster to use an object of listeners rather than a single big array
                // TODO if the function throws, maybe it should keep going ?
                this._eachListener(function (listener) {
                    if (!listener.killed && (listener.type === null || listener.type === type)) {
                        listener.dispatch(type, event);
                    }
                });
            }
        }
    });
    /**
     * Shelves the event to be dispatched within next update cycle.
     *
     * @param type   Event type
     * @param event  Event object
     * @todo automatically add in type and target properties if they are missing
     */
    /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {
        if (this._shouldDispatch(type)) {
            this._eachListener((listener) => {
                // TODO check if it's faster to use an object of listeners rather than a single big array
                if (!listener.killed && (listener.type === null || listener.type === type)) {
                    // TODO if the function throws, maybe it should keep going ?
                    // TODO dispatch during the update cycle, rather than using whenIdle
                    $async.whenIdle(() => {
                        if (!listener.killed) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            });
        }
    }*/
    /**
     * Creates, catalogs and returns an [[EventListener]].
     *
     * Event listener can be disposed.
     *
     * @param once         Listener's once setting
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @param dispatch
     * @returns An event listener
     */
    Object.defineProperty(EventDispatcher.prototype, "_on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (once, type, callback, context, shouldClone, dispatch) {
            var _this = this;
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            this._removeExistingListener(once, type, callback, context);
            var info = {
                type: type,
                callback: callback,
                context: context,
                shouldClone: shouldClone,
                dispatch: dispatch,
                killed: false,
                once: once,
                disposer: new _Disposer__WEBPACK_IMPORTED_MODULE_2__.Disposer(function () {
                    info.killed = true;
                    _this._removeListener(info);
                })
            };
            this._listeners.push(info);
            return info;
        }
    });
    /**
     * Creates an event listener to be invoked on **any** event.
     *
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */
    Object.defineProperty(EventDispatcher.prototype, "onAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (callback, context, shouldClone) {
            if (shouldClone === void 0) { shouldClone = true; }
            return this._on(false, null, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
        }
    });
    /**
     * Creates an event listener to be invoked on a specific event type.
     *
     * ```TypeScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     * ```JavaScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     *
     * The above will invoke our custom event handler whenever series we put
     * event on is hidden.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */
    Object.defineProperty(EventDispatcher.prototype, "on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, callback, context, shouldClone) {
            if (shouldClone === void 0) { shouldClone = true; }
            return this._on(false, type, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
        }
    });
    /**
     * Creates an event listener to be invoked on a specific event type once.
     *
     * Once the event listener is invoked, it is automatically disposed.
     *
     * ```TypeScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     * ```JavaScript
     * button.events.once("click", (ev) => {
     *   console.log("Button clicked");
     * }, this);
     * ```
     *
     * The above will invoke our custom event handler the first time series we
     * put event on is hidden.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
     * @returns A disposable event listener
     */
    Object.defineProperty(EventDispatcher.prototype, "once", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, callback, context, shouldClone) {
            if (shouldClone === void 0) { shouldClone = true; }
            var x = this._on(true, type, callback, context, shouldClone, function (_type, event) {
                x.disposer.dispose();
                callback.call(context, event);
            });
            // TODO maybe this should return a different Disposer ?
            return x.disposer;
        }
    });
    /**
     * Removes the event listener with specific parameters.
     *
     * @param type         Listener's type
     * @param callback     Callback function
     * @param context      Callback context
     */
    Object.defineProperty(EventDispatcher.prototype, "off", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (type, callback, context) {
            this._removeExistingListener(false, type, callback, context);
        }
    });
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param source Source event dispatcher
     * @ignore
     */
    Object.defineProperty(EventDispatcher.prototype, "copyFrom", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (source) {
            var _this = this;
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            if (source === this) {
                throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
            }
            var disposers = [];
            _Array__WEBPACK_IMPORTED_MODULE_0__.each(source._listeners, function (x) {
                // TODO is this correct ?
                if (!x.killed && x.shouldClone) {
                    if (x.type === null) {
                        disposers.push(_this.onAll(x.callback, x.context));
                    }
                    else if (x.once) {
                        disposers.push(_this.once(x.type, x.callback, x.context));
                    }
                    else {
                        disposers.push(_this.on(x.type, x.callback, x.context));
                    }
                }
            });
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.MultiDisposer(disposers);
        }
    });
    return EventDispatcher;
}());

/**
 * A version of the [[EventDispatcher]] that dispatches events for a specific
 * target object.
 *
 * @ignore
 */
var TargetedEventDispatcher = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(TargetedEventDispatcher, _super);
    /**
     * Constructor
     *
     * @param target Event dispatcher target
     */
    function TargetedEventDispatcher(target) {
        var _this = _super.call(this) || this;
        /**
         * A target object which is originating events using this dispatcher.
         */
        Object.defineProperty(_this, "target", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this.target = target;
        return _this;
    }
    /**
     * Copies all dispatcher parameters, including listeners, from another event
     * dispatcher.
     *
     * @param source Source event dispatcher
     * @ignore
     */
    Object.defineProperty(TargetedEventDispatcher.prototype, "copyFrom", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (source) {
            var _this = this;
            if (this._disposed) {
                throw new Error("EventDispatcher is disposed");
            }
            if (source === this) {
                throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
            }
            var disposers = [];
            _Array__WEBPACK_IMPORTED_MODULE_0__.each(source._listeners, function (x) {
                // TODO very hacky
                if (x.context === source.target) {
                    return;
                }
                // TODO is this correct ?
                if (!x.killed && x.shouldClone) {
                    if (x.type === null) {
                        disposers.push(_this.onAll(x.callback, x.context));
                    }
                    else if (x.once) {
                        disposers.push(_this.once(x.type, x.callback, x.context));
                    }
                    else {
                        disposers.push(_this.on(x.type, x.callback, x.context));
                    }
                }
            });
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.MultiDisposer(disposers);
        }
    });
    return TargetedEventDispatcher;
}(EventDispatcher));

//# sourceMappingURL=EventDispatcher.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/InterfaceColors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/InterfaceColors.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InterfaceColors": () => (/* binding */ InterfaceColors)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");


/**
 * Presets for common UI elements.
 */
var InterfaceColors = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InterfaceColors, _super);
    function InterfaceColors() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InterfaceColors, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "InterfaceColors"
    });
    Object.defineProperty(InterfaceColors, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _Entity__WEBPACK_IMPORTED_MODULE_1__.Entity.classNames.concat([InterfaceColors.className])
    });
    return InterfaceColors;
}(_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity));

//# sourceMappingURL=InterfaceColors.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Language.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Language.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Language": () => (/* binding */ Language)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _locales_en__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../locales/en */ "./node_modules/@amcharts/amcharts5/locales/en.js");




;
var Language = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Language, _super);
    function Language() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Language.prototype, "_setDefaults", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setPrivate("defaultLocale", _locales_en__WEBPACK_IMPORTED_MODULE_1__["default"]);
            _super.prototype._setDefaults.call(this);
        }
    });
    Object.defineProperty(Language.prototype, "translate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (prompt, locale) {
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                rest[_i - 2] = arguments[_i];
            }
            // Get langauge
            if (!locale) {
                locale = this._root.locale || this.getPrivate("defaultLocale");
            }
            // Init translation
            var translation = prompt;
            var value = locale[prompt];
            // Try to look for the translation
            if (value === null) {
                translation = "";
            }
            else if (value != null) {
                // It might be an empty string
                if (value) {
                    translation = value;
                }
            }
            else if (locale !== this.getPrivate("defaultLocale")) {
                // Try to look in default language
                return this.translate.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([prompt, this.getPrivate("defaultLocale")], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(rest)));
            }
            // Replace %1, %2, etc params
            if (rest.length) {
                for (var len = rest.length, i = 0; i < len; ++i) {
                    translation = translation.split("%" + (i + 1)).join(rest[i]);
                }
            }
            // Return the translation
            return translation;
        }
    });
    Object.defineProperty(Language.prototype, "translateAny", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (prompt, locale) {
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                rest[_i - 2] = arguments[_i];
            }
            return this.translate.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([prompt, locale], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(rest)));
        }
    });
    Object.defineProperty(Language.prototype, "setTranslationAny", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (prompt, translation, locale) {
            var localeTarget = locale || this._root.locale;
            localeTarget[prompt] = translation;
        }
    });
    Object.defineProperty(Language.prototype, "translateEmpty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (prompt, locale) {
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                rest[_i - 2] = arguments[_i];
            }
            var translation = this.translate.apply(this, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([prompt, locale], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(rest)));
            return translation == prompt ? "" : translation;
        }
    });
    Object.defineProperty(Language.prototype, "translateFunc", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (prompt, locale) {
            if (this._root.locale[prompt]) {
                return this._root.locale[prompt];
            }
            // Try to look in default language
            if (locale !== this.getPrivate("defaultLocale")) {
                return this.translateFunc(prompt, this.getPrivate("defaultLocale"));
            }
            // Fail - return empty function
            return function () {
                return "";
            };
        }
    });
    Object.defineProperty(Language.prototype, "translateAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (list, locale) {
            var _this = this;
            // Translate all items in the list
            if (!this.isDefault()) {
                return _Array__WEBPACK_IMPORTED_MODULE_2__.map(list, function (x) { return _this.translate(x, locale); });
            }
            else {
                return list;
            }
        }
    });
    /**
     * Returns `true` if the currently selected locale is a default locale.
     *
     * @return `true` if locale is default; `false` if it is not.
     */
    Object.defineProperty(Language.prototype, "isDefault", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.getPrivate("defaultLocale") === this._root.locale;
        }
    });
    return Language;
}(_Entity__WEBPACK_IMPORTED_MODULE_3__.Entity));

//# sourceMappingURL=Language.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/List.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/List.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "List": () => (/* binding */ List),
/* harmony export */   "ListAutoDispose": () => (/* binding */ ListAutoDispose),
/* harmony export */   "ListTemplate": () => (/* binding */ ListTemplate)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");



/**
 * Checks if specific index fits into length.
 *
 * @param index  Index
 * @param len    Length
 * @ignore
 */
function checkBounds(index, len) {
    if (!(index >= 0 && index < len)) {
        throw new Error("Index out of bounds: " + index);
    }
}
/**
 * A List class is used to hold a number of indexed items of the same type.
 */
var List = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param initial  Inital list of values to add to list
     */
    function List(initial) {
        if (initial === void 0) { initial = []; }
        /**
         * List values.
         */
        Object.defineProperty(this, "_values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher()
        });
        this._values = initial;
    }
    Object.defineProperty(List.prototype, "values", {
        /**
         * An array of values in the list.
         *
         * Do not use this property to add values. Rather use dedicated methods, like
         * `push()`, `removeIndex()`, etc.
         *
         * @readonly
         * @return List values
         */
        get: function () {
            return this._values;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Checks if list contains specific item reference.
     *
     * @param item  Item to search for
     * @return `true` if found, `false` if not found
     */
    Object.defineProperty(List.prototype, "contains", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            return this._values.indexOf(value) !== -1;
        }
    });
    /**
     * Removes specific item from the list.
     *
     * @param item An item to remove
     */
    Object.defineProperty(List.prototype, "removeValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var i = 0;
            var length = this._values.length;
            while (i < length) {
                // TODO handle NaN
                if (this._values[i] === value) {
                    this.removeIndex(i);
                    --length;
                }
                else {
                    ++i;
                }
            }
        }
    });
    /**
     * Searches the list for specific item and returns its index.
     *
     * @param item  An item to search for
     * @return Index or -1 if not found
     */
    Object.defineProperty(List.prototype, "indexOf", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            return _Array__WEBPACK_IMPORTED_MODULE_1__.indexOf(this._values, value);
        }
    });
    Object.defineProperty(List.prototype, "length", {
        /**
         * Number of items in list.
         *
         * @readonly
         * @return Number of items
         */
        get: function () {
            return this._values.length;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Checks if there's a value at specific index.
     *
     * @param index  Index
     * @return Value exists?
     */
    Object.defineProperty(List.prototype, "hasIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return index >= 0 && index < this._values.length;
        }
    });
    /**
     * Returns an item at specified index.
     *
     * @param index  Index
     * @return List item
     */
    Object.defineProperty(List.prototype, "getIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            return this._values[index];
        }
    });
    Object.defineProperty(List.prototype, "_onPush", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (newValue) {
            if (this.events.isEnabled("push")) {
                this.events.dispatch("push", {
                    type: "push",
                    target: this,
                    newValue: newValue
                });
            }
        }
    });
    Object.defineProperty(List.prototype, "_onInsertIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, newValue) {
            if (this.events.isEnabled("insertIndex")) {
                this.events.dispatch("insertIndex", {
                    type: "insertIndex",
                    target: this,
                    index: index,
                    newValue: newValue
                });
            }
        }
    });
    Object.defineProperty(List.prototype, "_onSetIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, oldValue, newValue) {
            if (this.events.isEnabled("setIndex")) {
                this.events.dispatch("setIndex", {
                    type: "setIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue,
                    newValue: newValue
                });
            }
        }
    });
    Object.defineProperty(List.prototype, "_onRemoveIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, oldValue) {
            if (this.events.isEnabled("removeIndex")) {
                this.events.dispatch("removeIndex", {
                    type: "removeIndex",
                    target: this,
                    index: index,
                    oldValue: oldValue
                });
            }
        }
    });
    Object.defineProperty(List.prototype, "_onClear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (oldValues) {
            if (this.events.isEnabled("clear")) {
                this.events.dispatch("clear", {
                    type: "clear",
                    target: this,
                    oldValues: oldValues
                });
            }
        }
    });
    /**
     * Sets value at specific index.
     *
     * If there's already a value at the index, it is overwritten.
     *
     * @param index  Index
     * @param value  New value
     * @return New value
     */
    Object.defineProperty(List.prototype, "setIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, value) {
            checkBounds(index, this._values.length);
            var oldValue = this._values[index];
            // Do nothing if the old value and the new value are the same
            if (oldValue !== value) {
                this._values[index] = value;
                this._onSetIndex(index, oldValue, value);
            }
            return oldValue;
        }
    });
    /**
     * Adds an item to the list at a specific index, which pushes all the other
     * items further down the list.
     *
     * @param index Index
     * @param item  An item to add
     */
    Object.defineProperty(List.prototype, "insertIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, value) {
            checkBounds(index, this._values.length + 1);
            _Array__WEBPACK_IMPORTED_MODULE_1__.insertIndex(this._values, index, value);
            this._onInsertIndex(index, value);
            return value;
        }
    });
    /**
     * Swaps indexes of two items in the list.
     *
     * @param a  Item 1
     * @param b  Item 2
     */
    Object.defineProperty(List.prototype, "swap", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (a, b) {
            var len = this._values.length;
            checkBounds(a, len);
            checkBounds(b, len);
            if (a !== b) {
                var value_a = this._values[a];
                var value_b = this._values[b];
                this._values[a] = value_b;
                this._onSetIndex(a, value_a, value_b);
                this._values[b] = value_a;
                this._onSetIndex(b, value_b, value_a);
            }
        }
    });
    /**
     * Removes a value at specific index.
     *
     * @param index  Index of value to remove
     * @return Removed value
     */
    Object.defineProperty(List.prototype, "removeIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            checkBounds(index, this._values.length);
            var oldValue = this._values[index];
            _Array__WEBPACK_IMPORTED_MODULE_1__.removeIndex(this._values, index);
            this._onRemoveIndex(index, oldValue);
            return oldValue;
        }
    });
    /**
     * Moves an item to a specific index within the list.
     *
     * If the index is not specified it will move the item to the end of the
     * list.
     *
     * @param value  Item to move
     * @param index  Index to place item at
     */
    Object.defineProperty(List.prototype, "moveValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, toIndex) {
            // TODO don't do anything if the desired index is the same as the current index
            var index = this.indexOf(value);
            // TODO remove all old values rather than only the first ?
            if (index !== -1) {
                var oldValue = this._values[index];
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeIndex(this._values, index);
                this._onRemoveIndex(index, oldValue);
            }
            if (toIndex == null) {
                this._values.push(value);
                this._onPush(value);
            }
            else {
                _Array__WEBPACK_IMPORTED_MODULE_1__.insertIndex(this._values, toIndex, value);
                this._onInsertIndex(toIndex, value);
            }
            return value;
        }
    });
    /**
     * Adds an item to the end of the list.
     *
     * @param item  An item to add
     */
    Object.defineProperty(List.prototype, "push", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            this._values.push(value);
            this._onPush(value);
            return value;
        }
    });
    /**
     * Adds an item as a first item in the list.
     *
     * @param item  An item to add
     */
    Object.defineProperty(List.prototype, "unshift", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            this.insertIndex(0, value);
            return value;
        }
    });
    /**
     * Adds multiple items to the list.
     *
     * @param items  An Array of items to add
     */
    Object.defineProperty(List.prototype, "pushAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (values) {
            var _this = this;
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(values, function (value) {
                _this.push(value);
            });
        }
    });
    /**
     * Copies and adds items from abother list.
     *
     * @param source  A list top copy items from
     */
    Object.defineProperty(List.prototype, "copyFrom", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (source) {
            this.pushAll(source._values);
        }
    });
    /**
     * Returns the last item from the list, and removes it.
     *
     * @return Item
     */
    Object.defineProperty(List.prototype, "pop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var index = this._values.length - 1;
            return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
        }
    });
    /**
     * Returns the first item from the list, and removes it.
     *
     * @return Item
     */
    Object.defineProperty(List.prototype, "shift", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._values.length ? this.removeIndex(0) : undefined;
        }
    });
    /**
     * Sets multiple items to the list.
     *
     * All current items are removed.
     *
     * @param newArray  New items
     */
    Object.defineProperty(List.prototype, "setAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (newArray) {
            var _this = this;
            var old = this._values;
            this._values = [];
            this._onClear(old);
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(newArray, function (value) {
                _this._values.push(value);
                _this._onPush(value);
            });
        }
    });
    /**
     * Removes all items from the list.
     */
    Object.defineProperty(List.prototype, "clear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.setAll([]);
        }
    });
    /**
     * Returns an ES6 iterator for the list.
     */
    Object.defineProperty(List.prototype, Symbol.iterator, {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var length, i;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        length = this._values.length;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._values[i]];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        ++i;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        }
    });
    /**
     * Calls `f` for each element in the list.
     *
     * `f` should have at least one parameter defined which will get a current
     * item, with optional second argument - index.
     */
    Object.defineProperty(List.prototype, "each", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._values, f);
        }
    });
    return List;
}());

/**
 * A version of a [[List]] where the elements are disposed automatically when
 * removed from the list, unless `autoDispose` is set to `false`.
 */
var ListAutoDispose = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ListAutoDispose, _super);
    function ListAutoDispose() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Automatically disposes elements that are removed from the list.
         *
         * @default true
         */
        Object.defineProperty(_this, "autoDispose", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(_this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(ListAutoDispose.prototype, "_onSetIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, oldValue, newValue) {
            if (this.autoDispose) {
                oldValue.dispose();
            }
            _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
        }
    });
    Object.defineProperty(ListAutoDispose.prototype, "_onRemoveIndex", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index, oldValue) {
            if (this.autoDispose) {
                oldValue.dispose();
            }
            _super.prototype._onRemoveIndex.call(this, index, oldValue);
        }
    });
    Object.defineProperty(ListAutoDispose.prototype, "_onClear", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (oldValues) {
            if (this.autoDispose) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(oldValues, function (x) {
                    x.dispose();
                });
            }
            _super.prototype._onClear.call(this, oldValues);
        }
    });
    Object.defineProperty(ListAutoDispose.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    Object.defineProperty(ListAutoDispose.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                if (this.autoDispose) {
                    _Array__WEBPACK_IMPORTED_MODULE_1__.each(this._values, function (x) {
                        x.dispose();
                    });
                }
            }
        }
    });
    return ListAutoDispose;
}(List));

/**
 * A version of a [[List]] that is able to create new elements as well as
 * apply additional settings to newly created items.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info
 */
var ListTemplate = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ListTemplate, _super);
    function ListTemplate(template, make) {
        var _this = _super.call(this) || this;
        Object.defineProperty(_this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "make", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this.template = template;
        _this.make = make;
        return _this;
    }
    return ListTemplate;
}(ListAutoDispose));

//# sourceMappingURL=List.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PI": () => (/* binding */ PI),
/* harmony export */   "HALFPI": () => (/* binding */ HALFPI),
/* harmony export */   "RADIANS": () => (/* binding */ RADIANS),
/* harmony export */   "DEGREES": () => (/* binding */ DEGREES),
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "ceil": () => (/* binding */ ceil),
/* harmony export */   "getCubicControlPointA": () => (/* binding */ getCubicControlPointA),
/* harmony export */   "getCubicControlPointB": () => (/* binding */ getCubicControlPointB),
/* harmony export */   "fitToRange": () => (/* binding */ fitToRange),
/* harmony export */   "sin": () => (/* binding */ sin),
/* harmony export */   "tan": () => (/* binding */ tan),
/* harmony export */   "cos": () => (/* binding */ cos),
/* harmony export */   "normalizeAngle": () => (/* binding */ normalizeAngle),
/* harmony export */   "getArcBounds": () => (/* binding */ getArcBounds),
/* harmony export */   "getArcPoint": () => (/* binding */ getArcPoint),
/* harmony export */   "mergeBounds": () => (/* binding */ mergeBounds),
/* harmony export */   "fitAngleToRange": () => (/* binding */ fitAngleToRange),
/* harmony export */   "inBounds": () => (/* binding */ inBounds),
/* harmony export */   "getAngle": () => (/* binding */ getAngle),
/* harmony export */   "getPointOnQuadraticCurve": () => (/* binding */ getPointOnQuadraticCurve),
/* harmony export */   "getPointOnLine": () => (/* binding */ getPointOnLine),
/* harmony export */   "closest": () => (/* binding */ closest),
/* harmony export */   "boundsOverlap": () => (/* binding */ boundsOverlap)
/* harmony export */ });
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");

/**
 * ============================================================================
 * CONSTANTS
 * ============================================================================
 * @hidden
 */
var PI = Math.PI;
var HALFPI = PI / 2;
var RADIANS = PI / 180;
var DEGREES = 180 / PI;
/**
 * Rounds the numeric value to whole number or specific precision of set.
 *
 * @param value      Value
 * @param precision  Precision (number of decimal points)
 * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.
 * @return Rounded value
 */
function round(value, precision, floor) {
    if (!(0,_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber)(precision) || precision <= 0) {
        var rounded = Math.round(value);
        if (floor) {
            if (rounded - value == 0.5) {
                rounded--;
            }
        }
        return rounded;
    }
    else {
        var d = Math.pow(10, precision);
        return Math.round(value * d) / d;
    }
}
/**
 * Ceils the numeric value to whole number or specific precision of set.
 *
 * @param value      Value
 * @param precision  Precision (number of decimal points)
 * @return Rounded value
 */
function ceil(value, precision) {
    if (!(0,_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber)(precision) || precision <= 0) {
        return Math.ceil(value);
    }
    else {
        var d = Math.pow(10, precision);
        return Math.ceil(value * d) / d;
    }
}
/**
 * [getCubicControlPointA description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param p0        [description]
 * @param p1        [description]
 * @param p2        [description]
 * @param p3        [description]
 * @param tensionX  [description]
 * @param tensionY  [description]
 * @return [description]
 */
function getCubicControlPointA(p0, p1, p2, tensionX, tensionY) {
    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };
}
/**
 * [getCubicControlPointB description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param p0        [description]
 * @param p1        [description]
 * @param p2        [description]
 * @param p3        [description]
 * @param tensionX  [description]
 * @param tensionY  [description]
 * @return [description]
 */
function getCubicControlPointB(p1, p2, p3, tensionX, tensionY) {
    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };
}
function fitToRange(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
/**
 * Returns sine of an angle specified in degrees.
 *
 * @param value  Value
 * @return Sine
 */
function sin(angle) {
    return Math.sin(RADIANS * angle);
}
/**
 * Returns tan of an angle specified in degrees.
 *
 * @param value  Value
 * @return Sine
 */
function tan(angle) {
    return Math.tan(RADIANS * angle);
}
/**
 * Returns cosine of an angle specified in degrees.
 *
 * @param value  Value
 * @return Cosine
 */
function cos(angle) {
    return Math.cos(RADIANS * angle);
}
// 0 to 360
function normalizeAngle(value) {
    value = value % 360;
    if (value < 0) {
        value += 360;
    }
    return value;
}
// TODO this doesn't work properly for skewing, and it's probably broken for rotation too
function getArcBounds(cx, cy, startAngle, endAngle, radius) {
    var minX = Number.MAX_VALUE;
    var minY = Number.MAX_VALUE;
    var maxX = -Number.MAX_VALUE;
    var maxY = -Number.MAX_VALUE;
    var bpoints = [];
    bpoints.push(getArcPoint(radius, startAngle));
    bpoints.push(getArcPoint(radius, endAngle));
    var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
    var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);
    for (var angle = fromAngle; angle <= toAngle; angle += 90) {
        if (angle >= startAngle && angle <= endAngle) {
            bpoints.push(getArcPoint(radius, angle));
        }
    }
    for (var i = 0; i < bpoints.length; i++) {
        var pt = bpoints[i];
        if (pt.x < minX) {
            minX = pt.x;
        }
        if (pt.y < minY) {
            minY = pt.y;
        }
        if (pt.x > maxX) {
            maxX = pt.x;
        }
        if (pt.y > maxY) {
            maxY = pt.y;
        }
    }
    return ({ left: cx + minX, top: cy + minY, right: cx + maxX, bottom: cy + maxY });
}
/**
 * Returns point on arc
 *
 * @param center point
 * @param radius
 * @param arc
 * @return {boolean}
 */
function getArcPoint(radius, arc) {
    return ({ x: radius * cos(arc), y: radius * sin(arc) });
}
function mergeBounds(bounds) {
    var len = bounds.length;
    if (len > 0) {
        var bound = bounds[0];
        var left = bound.left;
        var top_1 = bound.top;
        var right = bound.right;
        var bottom = bound.bottom;
        if (len > 1) {
            for (var i = 1; i < len; i++) {
                bound = bounds[i];
                left = Math.min(bound.left, left);
                right = Math.max(bound.right, right);
                top_1 = Math.min(bound.top, top_1);
                bottom = Math.max(bound.bottom, bottom);
            }
        }
        return { left: left, right: right, top: top_1, bottom: bottom };
    }
    return { left: 0, right: 0, top: 0, bottom: 0 };
}
function fitAngleToRange(value, startAngle, endAngle) {
    if (startAngle > endAngle) {
        var temp = startAngle;
        startAngle = endAngle;
        endAngle = temp;
    }
    value = normalizeAngle(value);
    var count = (startAngle - normalizeAngle(startAngle)) / 360;
    if (value < startAngle) {
        value += 360 * (count + 1);
    }
    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
    if (value > endAngle) {
        if (value - 360 > startAngle) {
            value -= 360;
        }
        else {
            if (value < maxEnd) {
                value = endAngle;
            }
            else {
                value = startAngle;
            }
        }
    }
    if (value < startAngle) {
        if (value > maxStart) {
            value = startAngle;
        }
        else {
            value = endAngle;
        }
    }
    return value;
}
function inBounds(point, bounds) {
    if (point.x >= bounds.left && point.y >= bounds.top && point.x <= bounds.right && point.y <= bounds.bottom) {
        return true;
    }
    return false;
}
function getAngle(point1, point2) {
    if (!point2) {
        point2 = { x: point1.x * 2, y: point1.y * 2 };
    }
    var diffX = point2.x - point1.x;
    var diffY = point2.y - point1.y;
    var angle = Math.atan2(diffY, diffX) * DEGREES;
    if (angle < 0) {
        angle += 360;
    }
    return normalizeAngle(angle);
}
/**
 * [getPointOnQuadraticCurve description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param pointA        [description]
 * @param pointB        [description]
 * @param controlPoint  [description]
 * @param position      [description]
 * @return [description]
 */
function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
    return { x: x, y: y };
}
function getPointOnLine(pointA, pointB, position) {
    return { x: pointA.x + (pointB.x - pointA.x) * position, y: pointA.y + (pointB.y - pointA.y) * position };
}
/**
 * Returns the closest value from the array of values to the reference value.
 *
 * @param values  Array of values
 * @param value   Reference value
 * @return Closes value from the array
 */
function closest(values, referenceValue) {
    return values.reduce(function (prev, curr) {
        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);
    });
}
function boundsOverlap(bounds1, bounds2) {
    return !(bounds1.bottom < bounds2.top || bounds2.bottom < bounds1.top || bounds1.right < bounds2.left || bounds2.right < bounds1.left);
}
//# sourceMappingURL=Math.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Matrix": () => (/* binding */ Matrix)
/* harmony export */ });
/**
 * Modified from Pixi:
 *
 * The MIT License
 *
 * Copyright (c) 2013-2017 Mathew Groves, Chad Engler
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @ignore
 */
var Matrix = /** @class */ (function () {
    function Matrix(a, b, c, d, tx, ty) {
        if (a === void 0) { a = 1; }
        if (b === void 0) { b = 0; }
        if (c === void 0) { c = 0; }
        if (d === void 0) { d = 1; }
        if (tx === void 0) { tx = 0; }
        if (ty === void 0) { ty = 0; }
        Object.defineProperty(this, "a", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "c", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "d", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    }
    /**
     * Sets the matrix based on all the available properties
     */
    Object.defineProperty(Matrix.prototype, "setTransform", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (x, y, pivotX, pivotY, rotation, scale) {
            if (scale === void 0) { scale = 1; }
            this.a = Math.cos(rotation) * scale;
            this.b = Math.sin(rotation) * scale;
            this.c = -Math.sin(rotation) * scale;
            this.d = Math.cos(rotation) * scale;
            this.tx = x - ((pivotX * this.a) + (pivotY * this.c));
            this.ty = y - ((pivotX * this.b) + (pivotY * this.d));
        }
    });
    /**
     * Get a new position with the current transformation applied.
     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
     */
    Object.defineProperty(Matrix.prototype, "apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (origin) {
            return {
                x: (this.a * origin.x) + (this.c * origin.y) + this.tx,
                y: (this.b * origin.x) + (this.d * origin.y) + this.ty
            };
        }
    });
    /**
     * Get a new position with the inverse of the current transformation applied.
     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
     */
    Object.defineProperty(Matrix.prototype, "applyInverse", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (origin) {
            var id = 1 / ((this.a * this.d) + (this.c * -this.b));
            return {
                x: (this.d * id * origin.x) + (-this.c * id * origin.y) + (((this.ty * this.c) - (this.tx * this.d)) * id),
                y: (this.a * id * origin.y) + (-this.b * id * origin.x) + (((-this.ty * this.a) + (this.tx * this.b)) * id)
            };
        }
    });
    /**
     * Appends the given Matrix to this Matrix.
     */
    Object.defineProperty(Matrix.prototype, "append", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (matrix) {
            var a1 = this.a;
            var b1 = this.b;
            var c1 = this.c;
            var d1 = this.d;
            this.a = (matrix.a * a1) + (matrix.b * c1);
            this.b = (matrix.a * b1) + (matrix.b * d1);
            this.c = (matrix.c * a1) + (matrix.d * c1);
            this.d = (matrix.c * b1) + (matrix.d * d1);
            this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;
            this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;
        }
    });
    /**
     * Prepends the given Matrix to this Matrix.
     */
    Object.defineProperty(Matrix.prototype, "prepend", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (matrix) {
            var tx1 = this.tx;
            if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
                var a1 = this.a;
                var c1 = this.c;
                this.a = (a1 * matrix.a) + (this.b * matrix.c);
                this.b = (a1 * matrix.b) + (this.b * matrix.d);
                this.c = (c1 * matrix.a) + (this.d * matrix.c);
                this.d = (c1 * matrix.b) + (this.d * matrix.d);
            }
            this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;
            this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;
        }
    });
    /**
     * Copies the other matrix's properties into this matrix
     */
    Object.defineProperty(Matrix.prototype, "copyFrom", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (matrix) {
            this.a = matrix.a;
            this.b = matrix.b;
            this.c = matrix.c;
            this.d = matrix.d;
            this.tx = matrix.tx;
            this.ty = matrix.ty;
        }
    });
    return Matrix;
}());

//# sourceMappingURL=Matrix.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/NumberFormatter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/NumberFormatter.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumberFormatter": () => (/* binding */ NumberFormatter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Entity */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js");
/* harmony import */ var _TextFormatter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TextFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");






/**
 * Number formatter
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
 * @important
 */
var NumberFormatter = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(NumberFormatter, _super);
    function NumberFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NumberFormatter.prototype, "_setDefaults", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // Defaults
            this._setDefault("negativeBase", 0);
            this._setDefault("numberFormat", "#,###.#####");
            this._setDefault("smallNumberThreshold", 1.00);
            var bns = "_big_number_suffix_";
            var sns = "_small_number_suffix_";
            var bs = "_byte_suffix_";
            this._setDefault("bigNumberPrefixes", [
                { "number": 1e+3, "suffix": this._t(bns + "3") },
                { "number": 1e+6, "suffix": this._t(bns + "6") },
                { "number": 1e+9, "suffix": this._t(bns + "9") },
                { "number": 1e+12, "suffix": this._t(bns + "12") },
                { "number": 1e+15, "suffix": this._t(bns + "15") },
                { "number": 1e+18, "suffix": this._t(bns + "18") },
                { "number": 1e+21, "suffix": this._t(bns + "21") },
                { "number": 1e+24, "suffix": this._t(bns + "24") }
            ]);
            this._setDefault("smallNumberPrefixes", [
                { "number": 1e-24, "suffix": this._t(sns + "24") },
                { "number": 1e-21, "suffix": this._t(sns + "21") },
                { "number": 1e-18, "suffix": this._t(sns + "18") },
                { "number": 1e-15, "suffix": this._t(sns + "15") },
                { "number": 1e-12, "suffix": this._t(sns + "12") },
                { "number": 1e-9, "suffix": this._t(sns + "9") },
                { "number": 1e-6, "suffix": this._t(sns + "6") },
                { "number": 1e-3, "suffix": this._t(sns + "3") }
            ]);
            this._setDefault("bytePrefixes", [
                { "number": 1, suffix: this._t(bs + "B") },
                { "number": 1024, suffix: this._t(bs + "KB") },
                { "number": 1048576, suffix: this._t(bs + "MB") },
                { "number": 1073741824, suffix: this._t(bs + "GB") },
                { "number": 1099511627776, suffix: this._t(bs + "TB") },
                { "number": 1125899906842624, suffix: this._t(bs + "PB") }
            ]);
            _super.prototype._setDefaults.call(this);
        }
    });
    Object.defineProperty(NumberFormatter.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
        }
    });
    /**
     * Formats the number according to specific format.
     *
     * @param value   Value to format
     * @param format  Format to apply
     * @return Formatted number
     */
    Object.defineProperty(NumberFormatter.prototype, "format", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, format, precision) {
            // no format passed in or "Number"
            if (format == null || (_Type__WEBPACK_IMPORTED_MODULE_1__.isString(format) && format.toLowerCase() === "number")) {
                format = this.get("numberFormat", "");
            }
            // Init return value
            var formatted;
            // Cast to number just in case
            // TODO: maybe use better casting
            var source = Number(value);
            // Is it a built-in format or Intl.NumberFormatOptions
            if (_Type__WEBPACK_IMPORTED_MODULE_1__.isObject(format)) {
                try {
                    if (this.get("intlLocales")) {
                        return new Intl.NumberFormat(this.get("intlLocales"), format).format(source);
                    }
                    else {
                        return new Intl.NumberFormat(undefined, format).format(source);
                    }
                }
                catch (e) {
                    return "Invalid";
                }
            }
            else {
                // Clean format
                format = _Utils__WEBPACK_IMPORTED_MODULE_2__.cleanFormat(format);
                // Get format info (it will also deal with parser caching)
                var info = this.parseFormat(format, this._root.language);
                // format and replace the number
                var details = void 0;
                if (source > this.get("negativeBase")) {
                    details = info.positive;
                }
                else if (source < this.get("negativeBase")) {
                    details = info.negative;
                }
                else {
                    details = info.zero;
                }
                // Adjust precision
                if (precision != null && !details.mod) {
                    details = _Object__WEBPACK_IMPORTED_MODULE_3__.copy(details);
                    details.decimals.active = source == 0 ? 0 : precision;
                }
                // Format
                formatted = details.template.split(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER).join(this.applyFormat(source, details));
            }
            return formatted;
        }
    });
    /**
     * Parses supplied format into structured object which can be used to format
     * the number.
     *
     * @param format Format string, i.e. "#,###.00"
     * @param language Language
     * @ignore
     */
    Object.defineProperty(NumberFormatter.prototype, "parseFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (format, language) {
            // Check cache
            // TODO
            // let cached = this.getCache(format);
            // if (cached != null) {
            // 	return cached;
            // }
            var _this = this;
            var thousandSeparator = language.translateEmpty("_thousandSeparator");
            var decimalSeparator = language.translateEmpty("_decimalSeparator");
            // init format parse info holder
            var info = {
                "positive": {
                    "thousands": {
                        "active": -1,
                        "passive": -1,
                        "interval": -1,
                        "separator": thousandSeparator
                    },
                    "decimals": {
                        "active": -1,
                        "passive": -1,
                        "separator": decimalSeparator
                    },
                    "template": "",
                    "source": "",
                    "parsed": false
                },
                "negative": {
                    "thousands": {
                        "active": -1,
                        "passive": -1,
                        "interval": -1,
                        "separator": thousandSeparator
                    },
                    "decimals": {
                        "active": -1,
                        "passive": -1,
                        "separator": decimalSeparator
                    },
                    "template": "",
                    "source": "",
                    "parsed": false
                },
                "zero": {
                    "thousands": {
                        "active": -1,
                        "passive": -1,
                        "interval": -1,
                        "separator": thousandSeparator
                    },
                    "decimals": {
                        "active": -1,
                        "passive": -1,
                        "separator": decimalSeparator
                    },
                    "template": "",
                    "source": "",
                    "parsed": false
                }
            };
            // Escape double vertical bars (that mean display one vertical bar)
            format = format.replace("||", _Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2);
            // Split it up and deal with different formats
            var parts = format.split("|");
            info.positive.source = parts[0];
            if (typeof parts[2] === "undefined") {
                info.zero = info.positive;
            }
            else {
                info.zero.source = parts[2];
            }
            if (typeof parts[1] === "undefined") {
                info.negative = info.positive;
            }
            else {
                info.negative.source = parts[1];
            }
            // Parse each
            _Object__WEBPACK_IMPORTED_MODULE_3__.each(info, function (_part, item) {
                // Already parsed
                if (item.parsed) {
                    return;
                }
                // Check cached
                // TODO
                // if (typeof this.getCache(item.source) !== "undefined") {
                // 	info[part] = this.getCache(item.source);
                // 	return;
                // }
                // Begin parsing
                var partFormat = item.source;
                // Just "Number"?
                if (partFormat.toLowerCase() === "number") {
                    partFormat = _this.get("numberFormat", "#,###.#####");
                }
                // Let TextFormatter split into chunks
                var chunks = _TextFormatter__WEBPACK_IMPORTED_MODULE_4__.TextFormatter.chunk(partFormat, true);
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    // replace back double vertical bar
                    chunk.text = chunk.text.replace(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2, "|");
                    if (chunk.type === "value") {
                        // Parse format
                        // Look for codes
                        var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);
                        if (matches) {
                            if (matches === null || matches[0] === "") {
                                // no codes here - assume string
                                // nothing to do here
                                item.template += chunk.text;
                            }
                            else {
                                // look for the format modifiers at the end
                                var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);
                                if (mods) {
                                    item.mod = mods[0].toLowerCase();
                                    item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;
                                }
                                // break the format up
                                var a = matches[0].split(".");
                                // Deal with thousands
                                if (a[0] === "") {
                                    // No directives for thousands
                                    // Leave default settings (no formatting)
                                }
                                else {
                                    // Counts
                                    item.thousands.active = (a[0].match(/0/g) || []).length;
                                    item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                    // Separator interval
                                    var b = a[0].split(",");
                                    if (b.length === 1) {
                                        // No thousands separators
                                        // Do nothing
                                    }
                                    else {
                                        // Use length fo the last chunk as thousands length
                                        item.thousands.interval = (b.pop() || "").length;
                                        if (item.thousands.interval === 0) {
                                            item.thousands.interval = -1;
                                        }
                                    }
                                }
                                // Deal with decimals
                                if (typeof (a[1]) === "undefined") {
                                    // No directives for decimals
                                    // Leave at defaults (no formatting)
                                }
                                else {
                                    // Counts
                                    item.decimals.active = (a[1].match(/0/g) || []).length;
                                    item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                                }
                                // Add special code to template
                                item.template += chunk.text.split(matches[0]).join(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER);
                            }
                        }
                    }
                    else {
                        // Quoted string - take it as it is
                        item.template += chunk.text;
                    }
                }
                // Apply style formatting
                //item.template = getTextFormatter().format(item.template, this.outputFormat);
                // Save cache
                // TODO
                //this.setCache(item.source, item);
                // Mark this as parsed
                item.parsed = true;
            });
            // Save cache (the whole thing)
            // TODO
            //this.setCache(format, info);
            return info;
        }
    });
    /**
     * Applies parsed format to a numeric value.
     *
     * @param value    Value
     * @param details  Parsed format as returned by parseFormat()
     * @return Formatted number
     * @ignore
     */
    Object.defineProperty(NumberFormatter.prototype, "applyFormat", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, details) {
            // Use absolute values
            var negative = value < 0;
            value = Math.abs(value);
            // Recalculate according to modifier
            var prefix = "", suffix = "";
            var mods = details.mod ? details.mod.split("") : [];
            if (mods.indexOf("b") !== -1) {
                var a_1 = this.applyPrefix(value, this.get("bytePrefixes"), mods.indexOf("!") !== -1);
                value = a_1[0];
                prefix = a_1[1];
                suffix = a_1[2];
                if (details.modSpacing) {
                    suffix = " " + suffix;
                }
            }
            else if (mods.indexOf("a") !== -1) {
                var a_2 = this.applyPrefix(value, value < this.get("smallNumberThreshold") ? this.get("smallNumberPrefixes") : this.get("bigNumberPrefixes"), mods.indexOf("!") !== -1);
                value = a_2[0];
                prefix = a_2[1];
                suffix = a_2[2];
                if (details.modSpacing) {
                    suffix = " " + suffix;
                }
            }
            else if (mods.indexOf("%") !== -1) {
                var ol = Math.min(value.toString().length + 2, 21);
                value *= 100;
                value = parseFloat(value.toPrecision(ol));
                suffix = "%";
            }
            else if (mods.indexOf("‰") !== -1) {
                var ol = Math.min(value.toString().length + 3, 21);
                value *= 1000;
                value = parseFloat(value.toPrecision(ol));
                suffix = "‰";
            }
            // Round to passive
            if (mods.indexOf("e") !== -1) {
                // convert the value to exponential
                var exp = void 0;
                if (details.decimals.passive >= 0) {
                    exp = value.toExponential(details.decimals.passive).split("e");
                }
                else {
                    exp = value.toExponential().split("e");
                }
                value = Number(exp[0]);
                suffix = "e" + exp[1];
                if (details.modSpacing) {
                    suffix = " " + suffix;
                }
            }
            else if (details.decimals.passive === 0) {
                value = Math.round(value);
            }
            else if (details.decimals.passive > 0) {
                var d = Math.pow(10, details.decimals.passive);
                value = Math.round(value * d) / d;
            }
            // Init return value
            var res = "";
            // Calc integer and decimal parts
            var a = _Type__WEBPACK_IMPORTED_MODULE_1__.numberToString(value).split(".");
            // Format integers
            var ints = a[0];
            // Pad integers to active length
            if (ints.length < details.thousands.active) {
                ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
            }
            // Insert thousands separators
            if (details.thousands.interval > 0) {
                var ip = [];
                var intsr = ints.split("").reverse().join("");
                for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {
                    var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                    if (c !== "") {
                        ip.unshift(c);
                    }
                }
                ints = ip.join(details.thousands.separator);
            }
            // Add integers
            res += ints;
            // Add decimals
            if (a.length === 1) {
                a.push("");
            }
            var decs = a[1];
            // Fill zeros?
            if (decs.length < details.decimals.active) {
                decs += Array(details.decimals.active - decs.length + 1).join("0");
            }
            if (decs !== "") {
                res += details.decimals.separator + decs;
            }
            // Can't have empty return value
            if (res === "") {
                res = "0";
            }
            // Add minus sign back
            if (value !== 0 && negative && (mods.indexOf("s") === -1)) {
                res = "-" + res;
            }
            // Add suffixes/prefixes
            if (prefix) {
                res = prefix + res;
            }
            if (suffix) {
                res += suffix;
            }
            return res;
        }
    });
    Object.defineProperty(NumberFormatter.prototype, "applyPrefix", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value, prefixes, force) {
            if (force === void 0) { force = false; }
            var newvalue = value;
            var prefix = "";
            var suffix = "";
            var applied = false;
            var k = 1;
            for (var i = 0, len = prefixes.length; i < len; i++) {
                if (prefixes[i].number <= value) {
                    if (prefixes[i].number === 0) {
                        newvalue = 0;
                    }
                    else {
                        newvalue = value / prefixes[i].number;
                        k = prefixes[i].number;
                    }
                    prefix = prefixes[i].prefix;
                    suffix = prefixes[i].suffix;
                    applied = true;
                }
            }
            if (!applied && force && prefixes.length && value != 0) {
                // Prefix was not applied. Use the first prefix.
                newvalue = value / prefixes[0].number;
                prefix = prefixes[0].prefix;
                suffix = prefixes[0].suffix;
                applied = true;
            }
            if (applied) {
                newvalue = parseFloat(newvalue.toPrecision(Math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
            }
            return [newvalue, prefix, suffix];
        }
    });
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Escaped text
     */
    Object.defineProperty(NumberFormatter.prototype, "escape", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.replace("||", _Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2);
        }
    });
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param text  Escaped text
     * @return Unescaped text
     */
    Object.defineProperty(NumberFormatter.prototype, "unescape", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.replace(_Type__WEBPACK_IMPORTED_MODULE_1__.PLACEHOLDER2, "|");
        }
    });
    return NumberFormatter;
}(_Entity__WEBPACK_IMPORTED_MODULE_5__.Entity));

//# sourceMappingURL=NumberFormatter.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keys": () => (/* binding */ keys),
/* harmony export */   "keysOrdered": () => (/* binding */ keysOrdered),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "each": () => (/* binding */ each),
/* harmony export */   "eachContinue": () => (/* binding */ eachContinue),
/* harmony export */   "eachOrdered": () => (/* binding */ eachOrdered),
/* harmony export */   "hasKey": () => (/* binding */ hasKey),
/* harmony export */   "softCopyProperties": () => (/* binding */ softCopyProperties)
/* harmony export */ });
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");

function keys(object) {
    return Object.keys(object);
}
/**
 * Returns an array of object's property names ordered using specific ordering
 * function.
 *
 * @param object  Source object
 * @param order   Ordering function
 * @returns Object property names
 */
function keysOrdered(object, order) {
    return keys(object).sort(order);
}
function copy(object) {
    return Object.assign({}, object);
}
function each(object, f) {
    keys(object).forEach(function (key) {
        f(key, object[key]);
    });
}
/**
 * Iterates through all properties of the object calling `fn` for each of them.
 *
 * If return value of the function evaluates to `false` further iteration is
 * cancelled.
 *
 * @param object  Source object
 * @param fn      Callback function
 */
function eachContinue(object, fn) {
    for (var key in object) {
        if (hasKey(object, key)) {
            if (!fn(key, object[key])) {
                break;
            }
        }
    }
}
/**
 * Orders object properties using custom `ord` function and iterates through
 * them calling `fn` for each of them.
 *
 * @param object  Source object
 * @param fn      Callback function
 * @param order   Ordering function
 */
function eachOrdered(object, fn, ord) {
    _Array__WEBPACK_IMPORTED_MODULE_0__.each(keysOrdered(object, ord), function (key) {
        fn(key, object[key]);
    });
}
/**
 * Checks if `object` has a specific `key`.
 *
 * @param object  Source object
 * @param key     Property name
 * @returns Has key?
 */
function hasKey(object, key) {
    return {}.hasOwnProperty.call(object, key);
}
/**
 * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.
 *
 * @param fromObject  Source object
 * @param toObject    Target object
 * @return Updated target object
 * @todo Maybe consolidate with utils.copy?
 */
function softCopyProperties(source, target) {
    each(source, function (key, value) {
        // only if value is set
        //if ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {
        if (value != null && target[key] == null) {
            target[key] = value;
        }
    });
    return target;
}
//# sourceMappingURL=Object.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Order.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compare": () => (/* binding */ compare),
/* harmony export */   "compareArray": () => (/* binding */ compareArray),
/* harmony export */   "reverse": () => (/* binding */ reverse),
/* harmony export */   "compareNumber": () => (/* binding */ compareNumber)
/* harmony export */ });
/**
 * @ignore
 */
function compare(left, right) {
    if (left === right) {
        return 0;
    }
    else if (left < right) {
        return -1;
    }
    else {
        return 1;
    }
}
/**
 * @ignore
 */
function compareArray(left, right, f) {
    var leftLength = left.length;
    var rightLength = right.length;
    var length = Math.min(leftLength, rightLength);
    for (var i = 0; i < length; ++i) {
        var order = f(left[i], right[i]);
        if (order !== 0) {
            return order;
        }
    }
    return compare(leftLength, rightLength);
}
/**
 * @ignore
 */
function reverse(order) {
    if (order < 0) {
        return 1;
    }
    else if (order > 0) {
        return -1;
    }
    else {
        return 0;
    }
}
/**
 * @ignore
 */
function compareNumber(a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
}
//# sourceMappingURL=Order.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Percent": () => (/* binding */ Percent),
/* harmony export */   "percent": () => (/* binding */ percent),
/* harmony export */   "p0": () => (/* binding */ p0),
/* harmony export */   "p100": () => (/* binding */ p100),
/* harmony export */   "p50": () => (/* binding */ p50),
/* harmony export */   "isPercent": () => (/* binding */ isPercent)
/* harmony export */ });
/**
 * ============================================================================
 * MAIN CLASS
 * ============================================================================
 * @hidden
 */
/**
 * Represents a relative value (percent).
 *
 * The Percent object, can be instantiated using two ways:
 *
 * * Via `new Percent(X)`.
 * * Via `am4core.percent(X)`.
 *
 * `Percent` type objects can be used in a number of dual-measuring or
 * positioning properties, like `width`. E.g.:
 *
 * ```TypeScript
 * chart.paddingRight = new Percent(10);
 * // or
 * chart.paddingRight = am4core.percent(10);
 * ```
 * ```JavaScript
 * chart.paddingRight = new Percent(10);
 * // or
 * chart.paddingRight = am4core.percent(10);
 * ```
 * ```JSON
 * {
 *   // ...
 *   "paddingRight": "10%"
 * }
 * ```
 */
var Percent = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param percent  Percent value
     */
    function Percent(percent) {
        /**
         * Value in percent.
         */
        Object.defineProperty(this, "_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._value = percent;
    }
    Object.defineProperty(Percent.prototype, "value", {
        /**
         * Relative value.
         *
         * E.g. 100% is 1, 50% is 0.5, etc.
         *
         * This is useful to apply transformations to other values. E.g.:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = new am4core.p50;
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = new am4core.p50;
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * Alternatively, you can use `am4core.percent()` helper function:
         *
         * ```TypeScript
         * let value = 256;
         * let percent = am4core.p50;
         * console.log(value * percent.value); // outputs 128
         * ```
         * ```JavaScript
         * var value = 256;
         * var percent = am4core.p50;
         * console.log(value * percent.value); // outputs 128
         * ```
         *
         * @readonly
         * @return Relative value
         */
        get: function () {
            return this._value / 100;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Percent.prototype, "percent", {
        /**
         * Value in percent.
         *
         * @return Percent
         */
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Percent.prototype, "toString", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return "" + this._value + "%";
        }
    });
    Object.defineProperty(Percent.prototype, "interpolate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (min, max) {
            return min + (this.value * (max - min));
        }
    });
    Object.defineProperty(Percent, "normalize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (percent, min, max) {
            if (percent instanceof Percent) {
                return percent;
            }
            else {
                if (min === max) {
                    return new Percent(0);
                }
                else {
                    return new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);
                }
            }
        }
    });
    return Percent;
}());

/**
 * Converts numeric percent value to a proper [[Percent]] object.
 *
 * ```TypeScript
 * pieSeries.radius = am4core.percent(80);
 * ```
 * ```JavaScript
 * pieSeries.radius = am4core.percent(80);
 * ```
 *
 * @param value  Percent
 * @return Percent object
 */
function percent(value) {
    return new Percent(value);
}
var p0 = percent(0);
var p100 = percent(100);
var p50 = percent(50);
/**
 * Checks if value is a [[Percent]] object.
 *
 * @ignore Exclude from docs
 * @param value  Input value
 * @return Is percent?
 */
function isPercent(value) {
    return value instanceof Percent;
}
//# sourceMappingURL=Percent.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "populateString": () => (/* binding */ populateString)
/* harmony export */ });
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");
/* harmony import */ var _render_Sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../render/Sprite */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js");
/* harmony import */ var _TextFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TextFormatter */ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js");
/** @ignore */ /** */




/**
 * @ignore
 */
function populateString(target, string) {
    if (string != null) {
        string = "" + string;
        string = _TextFormatter__WEBPACK_IMPORTED_MODULE_0__.TextFormatter.escape(string);
        var tags = string.match(/\{([^}]+)\}/g);
        var i = void 0;
        if (tags) {
            for (i = 0; i < tags.length; i++) {
                var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                var value = getTagValue(target, tag, "");
                if (value == null) {
                    value = "";
                }
                string = string.split(tags[i]).join(value);
            }
        }
        string = _TextFormatter__WEBPACK_IMPORTED_MODULE_0__.TextFormatter.unescape(string);
    }
    else {
        string = "";
    }
    // TODO: apply adapter?
    return string;
}
/**
 * @ignore
 */
function getTagValue(target, tagName, format) {
    var value;
    var dataItem = target.dataItem;
    // Parse parts
    var parts = [];
    var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
    ;
    var matches;
    while (true) {
        matches = reg.exec(tagName);
        if (matches === null) {
            break;
        }
        if (matches[3]) {
            // Simple property
            parts.push({
                prop: matches[3]
            });
            // Check if maybe we should force a formatter on this value
            var dateFields = target.getDateFormatter().get("dateFields", []);
            var numericFields = target.getNumberFormatter().get("numericFields", []);
            var durationFields = target.getDurationFormatter().get("durationFields", []);
            if (dateFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatDate",
                    params: []
                });
            }
            else if (numericFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatNumber",
                    params: []
                });
            }
            else if (durationFields.indexOf(matches[3]) !== -1) {
                parts.push({
                    method: "formatDuration",
                    params: []
                });
            }
        }
        else {
            // Method
            // Parse parameters
            var params = [];
            if (_Utils__WEBPACK_IMPORTED_MODULE_1__.trim(matches[2]) != "") {
                var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                var matches2 = void 0;
                while (true) {
                    matches2 = reg2.exec(matches[2]);
                    if (matches2 === null) {
                        break;
                    }
                    params.push(matches2[1] || matches2[2] || matches2[3]);
                }
            }
            parts.push({
                method: matches[1],
                params: params
            });
        }
    }
    // Check if we can retrieve the value from data item
    if (dataItem) {
        // Check values
        value = getTagValueFromObject(target, parts, dataItem._settings);
        // Check properties
        if (value == null || _Type__WEBPACK_IMPORTED_MODULE_2__.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.
            value = getTagValueFromObject(target, parts, dataItem);
        }
        // Check data context
        var dataContext = dataItem.dataContext;
        if (value == null && dataContext) {
            value = getTagValueFromObject(target, parts, dataContext);
            // Maybe it's a literal dot-separated name of the key in dataContext?
            if (value == null) {
                value = getTagValueFromObject(target, [{
                        prop: tagName
                    }], dataContext);
            }
            // scond data context level sometimes exist (tree map)
            if (value == null && dataContext.dataContext) {
                value = getTagValueFromObject(target, parts, dataContext.dataContext);
            }
        }
        // Check component's data item
        if (value == null && dataItem.component && dataItem.component.dataItem !== dataItem) {
            value = getTagValue(dataItem.component, tagName, format);
        }
    }
    // Check sprite's properties
    if (value == null) {
        value = getTagValueFromObject(target, parts, target);
    }
    // Finally, check the parent
    if (value == null && target.parent) {
        value = getTagValue(target.parent, tagName, format);
    }
    return value;
}
/**
 * @ignore
 */
function getTagValueFromObject(target, parts, object, format) {
    var current = object;
    var formatApplied = false;
    for (var i = 0, len = parts.length; i < len; i++) {
        var part = parts[i];
        if (part.prop) {
            // Regular property
            if (current instanceof _render_Sprite__WEBPACK_IMPORTED_MODULE_3__.Sprite) {
                current = current.get(part.prop) || current.getPrivate(part.prop) || current[part.prop];
            }
            else if (current.get) {
                current = current.get(part.prop) || current[part.prop];
            }
            else {
                current = current[part.prop];
            }
            if (current == null) {
                // Not set, return undefined
                return;
            }
        }
        else {
            // Method
            switch (part.method) {
                case "formatNumber":
                    var numberValue = _Type__WEBPACK_IMPORTED_MODULE_2__.toNumber(current);
                    if (numberValue != null) {
                        current = target.getNumberFormatter().format(numberValue, format || part.params[0] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "formatDate":
                    var dateValue = _Type__WEBPACK_IMPORTED_MODULE_2__.toDate(current);
                    if (!_Type__WEBPACK_IMPORTED_MODULE_2__.isDate(dateValue) || _Type__WEBPACK_IMPORTED_MODULE_2__.isNaN(dateValue.getTime())) {
                        // Was not able to get date out of value, quitting and letting
                        // calling method try another value
                        return;
                    }
                    if (dateValue != null) {
                        current = target.getDateFormatter().format(dateValue, format || part.params[0] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "formatDuration":
                    var durationValue = _Type__WEBPACK_IMPORTED_MODULE_2__.toNumber(current);
                    if (durationValue != null) {
                        current = target.getDurationFormatter().format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);
                        formatApplied = true;
                    }
                    break;
                case "urlEncode":
                case "encodeURIComponent":
                    current = encodeURIComponent(current);
                    break;
                default:
                    if (current[part.method]) {
                        current[part.method].apply(object, part.params);
                    }
                    break;
            }
        }
    }
    // Apply default format if it wasn't applied explicitly
    if (!formatApplied) {
        var formatParts = [{
                method: "",
                params: format
            }];
        if (format == null) {
            // Format is not set
            // Determine from the type of the value
            if (_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(current)) {
                formatParts[0].method = "formatNumber";
                formatParts[0].params = "";
            }
            else if (_Type__WEBPACK_IMPORTED_MODULE_2__.isDate(current)) {
                formatParts[0].method = "formatDate";
                formatParts[0].params = "";
            }
        }
        else {
            // Format set
            // Try to determine formatter based on the format
            var formatterType = _Utils__WEBPACK_IMPORTED_MODULE_1__.getFormat(format);
            // format
            if (formatterType === "number") {
                formatParts[0].method = "formatNumber";
            }
            else if (formatterType === "date") {
                formatParts[0].method = "formatDate";
            }
            else if (formatterType === "duration") {
                formatParts[0].method = "formatDuration";
            }
        }
        // Apply format
        if (formatParts[0].method) {
            current = getTagValueFromObject(target, formatParts, current);
        }
    }
    return current;
}
//# sourceMappingURL=PopulateString.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/ResizeSensor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/ResizeSensor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResizeSensor": () => (/* binding */ ResizeSensor)
/* harmony export */ });
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/** @ignore */ /** */

/**
 * @ignore
 */
var Native = /** @class */ (function () {
    function Native() {
        var _this = this;
        Object.defineProperty(this, "_observer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_targets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        this._observer = new ResizeObserver(function (entries) {
            _Array__WEBPACK_IMPORTED_MODULE_0__.each(entries, function (entry) {
                _Array__WEBPACK_IMPORTED_MODULE_0__.each(_this._targets, function (x) {
                    if (x.target === entry.target) {
                        x.callback();
                    }
                });
            });
        });
    }
    Object.defineProperty(Native.prototype, "addTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target, callback) {
            this._observer.observe(target, { box: "content-box" });
            this._targets.push({ target: target, callback: callback });
        }
    });
    Object.defineProperty(Native.prototype, "removeTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            this._observer.unobserve(target);
            _Array__WEBPACK_IMPORTED_MODULE_0__.keepIf(this._targets, function (x) {
                return x.target !== target;
            });
        }
    });
    return Native;
}());
/**
 * @ignore
 */
var Raf = /** @class */ (function () {
    function Raf() {
        Object.defineProperty(this, "_timer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_targets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    Object.defineProperty(Raf.prototype, "addTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target, callback) {
            var _this = this;
            if (this._timer === null) {
                var lastTime_1 = null;
                var loop_1 = function () {
                    var currentTime = Date.now();
                    if (lastTime_1 === null || currentTime > (lastTime_1 + Raf.delay)) {
                        lastTime_1 = currentTime;
                        _Array__WEBPACK_IMPORTED_MODULE_0__.each(_this._targets, function (x) {
                            var newSize = x.target.getBoundingClientRect();
                            if (newSize.width !== x.size.width || newSize.height !== x.size.height) {
                                x.size = newSize;
                                x.callback();
                            }
                        });
                    }
                    if (_this._targets.length === 0) {
                        _this._timer = null;
                    }
                    else {
                        _this._timer = requestAnimationFrame(loop_1);
                    }
                };
                this._timer = requestAnimationFrame(loop_1);
            }
            // We start off with fake bounds so that sensor always kicks in
            //let size = target.getBoundingClientRect();
            var size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0 };
            this._targets.push({ target: target, callback: callback, size: size });
        }
    });
    Object.defineProperty(Raf.prototype, "removeTarget", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            _Array__WEBPACK_IMPORTED_MODULE_0__.keepIf(this._targets, function (x) {
                return x.target !== target;
            });
            if (this._targets.length === 0) {
                if (this._timer !== null) {
                    cancelAnimationFrame(this._timer);
                    this._timer = null;
                }
            }
        }
    });
    Object.defineProperty(Raf, "delay", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 200
    });
    return Raf;
}());
/**
 * @ignore
 */
var observer = null;
/**
 * @ignore
 */
function makeSensor() {
    if (observer === null) {
        if (typeof ResizeObserver !== "undefined") {
            observer = new Native();
        }
        else {
            observer = new Raf();
        }
    }
    return observer;
}
/**
 * @ignore
 */
var ResizeSensor = /** @class */ (function () {
    function ResizeSensor(element, callback) {
        Object.defineProperty(this, "_sensor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_element", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this._sensor = makeSensor();
        this._element = element;
        this._sensor.addTarget(element, callback);
    }
    Object.defineProperty(ResizeSensor.prototype, "isDisposed", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._disposed;
        }
    });
    Object.defineProperty(ResizeSensor.prototype, "dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (!this._disposed) {
                this._disposed = true;
                this._sensor.removeTarget(this._element);
            }
        }
    });
    Object.defineProperty(ResizeSensor.prototype, "sensor", {
        get: function () {
            return this._sensor;
        },
        enumerable: false,
        configurable: true
    });
    return ResizeSensor;
}());

//# sourceMappingURL=ResizeSensor.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/States.js":
/*!************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/States.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "State": () => (/* binding */ State),
/* harmony export */   "States": () => (/* binding */ States)
/* harmony export */ });
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ease */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js");


/**
 * An object representing a collection of setting values to apply as required.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
 */
var State = /** @class */ (function () {
    function State(entity, settings) {
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_userSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._entity = entity;
        this._settings = settings;
    }
    Object.defineProperty(State.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._settings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(State.prototype, "setRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._settings[key] = value;
        }
    });
    /**
     * Sets a setting `value` for the specified `key` to be set when the state
     * is applied.
     *
     * @param   key       Setting key
     * @param   value     Setting value
     * @return            Setting value
     */
    Object.defineProperty(State.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._userSettings[key] = true;
            this.setRaw(key, value);
        }
    });
    /**
     * Removes a setting value for the specified `key`.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param   key       Setting key
     */
    Object.defineProperty(State.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            delete this._userSettings[key];
            delete this._settings[key];
        }
    });
    /**
     * Sets multiple settings at once.
     *
     * `settings` must be an object with key: value pairs.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     * @param settings Settings
     */
    Object.defineProperty(State.prototype, "setAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (settings) {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_0__.keys(settings).forEach(function (key) {
                _this.set(key, settings[key]);
            });
        }
    });
    Object.defineProperty(State.prototype, "_eachSetting", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (f) {
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._settings, f);
        }
    });
    /**
     * Applies the state to the target element.
     *
     * All setting values are set immediately.
     */
    Object.defineProperty(State.prototype, "apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var seen = {};
            seen["stateAnimationEasing"] = true;
            seen["stateAnimationDuration"] = true;
            var defaultState = this._entity.states.lookup("default");
            this._eachSetting(function (key, value) {
                if (!seen[key]) {
                    seen[key] = true;
                    // save values to default state
                    if (_this !== defaultState) {
                        if (!(key in defaultState._settings)) {
                            defaultState._settings[key] = _this._entity.get(key);
                        }
                    }
                    _this._entity.set(key, value);
                }
            });
        }
    });
    /**
     * Applies the state to the target element.
     *
     * Returns an object representing all [[Animation]] objects created for
     * each setting key transition.
     *
     * @return           Animations
     */
    Object.defineProperty(State.prototype, "applyAnimate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (duration) {
            var _this = this;
            if (duration == null) {
                duration = this._settings.stateAnimationDuration;
            }
            if (duration == null) {
                duration = this.get("stateAnimationDuration", this._entity.get("stateAnimationDuration", 0));
            }
            var easing = this._settings.stateAnimationEasing;
            if (easing == null) {
                easing = this.get("stateAnimationEasing", this._entity.get("stateAnimationEasing", _Ease__WEBPACK_IMPORTED_MODULE_1__.cubic));
            }
            var defaultState = this._entity.states.lookup("default");
            var seen = {};
            seen["stateAnimationEasing"] = true;
            seen["stateAnimationDuration"] = true;
            var animations = {};
            this._eachSetting(function (key, value) {
                if (!seen[key]) {
                    seen[key] = true;
                    // save values to default state
                    if (_this != defaultState) {
                        if (!(key in defaultState._settings)) {
                            defaultState._settings[key] = _this._entity.get(key);
                        }
                    }
                    var animation = _this._entity.animate({
                        key: key,
                        to: value,
                        duration: duration,
                        easing: easing
                    });
                    if (animation) {
                        animations[key] = animation;
                    }
                }
            });
            return animations;
        }
    });
    return State;
}());

/**
 * Collection of [[State]] objects for an element.
 *
 * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
 */
var States = /** @class */ (function () {
    function States(entity) {
        Object.defineProperty(this, "_states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_entity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._entity = entity;
    }
    /**
     * Checks if a state by `name` exists. Returns it there is one.
     *
     * @param  name  State name
     * @return       State
     */
    Object.defineProperty(States.prototype, "lookup", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            return this._states[name];
        }
    });
    /**
     * Sets supplied `settings` on a state by the `name`.
     *
     * If such state does not yet exists, it is created.
     *
     * @param   name      State name
     * @param   settings  Settings
     * @return            New State
     */
    Object.defineProperty(States.prototype, "create", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, settings) {
            var state = this._states[name];
            if (state) {
                state.setAll(settings);
                return state;
            }
            else {
                var state_1 = new State(this._entity, settings);
                this._states[name] = state_1;
                return state_1;
            }
        }
    });
    /**
     * Removes the state called `name`.
     *
     * @param   name      State name
     */
    Object.defineProperty(States.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            delete this._states[name];
        }
    });
    /**
     * Applies a named state to the target element.
     *
     * @param  newState  State name
     */
    Object.defineProperty(States.prototype, "apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (newState) {
            var state = this._states[newState];
            if (state) {
                state.apply();
            }
            this._entity._applyState(newState);
        }
    });
    /**
     * Applies a named state to the element.
     *
     * Returns an object representing all [[Animation]] objects created for
     * each setting key transition.
     *
     * @param   newState  State name
     * @return            Animations
     */
    Object.defineProperty(States.prototype, "applyAnimate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (newState, duration) {
            var animations;
            var state = this._states[newState];
            if (state) {
                animations = state.applyAnimate(duration);
            }
            this._entity._applyStateAnimated(newState, duration);
            return animations;
        }
    });
    return States;
}());

//# sourceMappingURL=States.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplateState": () => (/* binding */ TemplateState),
/* harmony export */   "TemplateStates": () => (/* binding */ TemplateStates),
/* harmony export */   "TemplateAdapters": () => (/* binding */ TemplateAdapters),
/* harmony export */   "Template": () => (/* binding */ Template)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher */ "./node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js");
/* harmony import */ var _Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");




var TemplateState = /** @class */ (function () {
    function TemplateState(name, template, settings) {
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._name = name;
        this._template = template;
        this._settings = settings;
    }
    Object.defineProperty(TemplateState.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._settings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    Object.defineProperty(TemplateState.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._settings[key] = value;
            // TODO maybe only do this if the value changed ?
            this._template._stateChanged(this._name);
        }
    });
    Object.defineProperty(TemplateState.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            delete this._settings[key];
            // TODO maybe only do this if the value changed ?
            this._template._stateChanged(this._name);
        }
    });
    Object.defineProperty(TemplateState.prototype, "setAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (settings) {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_0__.keys(settings).forEach(function (key) {
                _this._settings[key] = settings[key];
            });
            this._template._stateChanged(this._name);
        }
    });
    Object.defineProperty(TemplateState.prototype, "_apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (other, seen) {
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._settings, function (key, value) {
                if (!seen[key] && !other._userSettings[key]) {
                    seen[key] = true;
                    other.setRaw(key, value);
                }
            });
        }
    });
    return TemplateState;
}());

var TemplateStates = /** @class */ (function () {
    function TemplateStates(template) {
        Object.defineProperty(this, "_template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this._template = template;
    }
    Object.defineProperty(TemplateStates.prototype, "lookup", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            return this._states[name];
        }
    });
    Object.defineProperty(TemplateStates.prototype, "create", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, settings) {
            var state = this._states[name];
            if (state) {
                state.setAll(settings);
                return state;
            }
            else {
                var state_1 = new TemplateState(name, this._template, settings);
                this._states[name] = state_1;
                this._template._stateChanged(name);
                return state_1;
            }
        }
    });
    Object.defineProperty(TemplateStates.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            delete this._states[name];
            this._template._stateChanged(name);
        }
    });
    Object.defineProperty(TemplateStates.prototype, "_apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity, state) {
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._states, function (key, value) {
                var seen = state.states[key];
                if (seen == null) {
                    seen = state.states[key] = {};
                }
                var other = entity.states.create(key, {});
                value._apply(other, seen);
            });
        }
    });
    return TemplateStates;
}());

var TemplateAdapters = /** @class */ (function () {
    function TemplateAdapters() {
        Object.defineProperty(this, "_callbacks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
    }
    Object.defineProperty(TemplateAdapters.prototype, "add", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var callbacks = this._callbacks[key];
            if (callbacks === undefined) {
                callbacks = this._callbacks[key] = [];
            }
            callbacks.push(callback);
        }
    });
    Object.defineProperty(TemplateAdapters.prototype, "_apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity) {
            var disposers = [];
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._callbacks, function (key, callbacks) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(callbacks, function (callback) {
                    disposers.push(entity.adapters.add(key, callback));
                });
            });
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.MultiDisposer(disposers);
        }
    });
    return TemplateAdapters;
}());

// TODO maybe extend from Properties ?
var Template = /** @class */ (function () {
    function Template(settings, isReal) {
        Object.defineProperty(this, "_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_privateSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        // TODO code duplication with Properties
        Object.defineProperty(this, "_settingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_privateSettingEvents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "states", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new TemplateStates(this)
        });
        Object.defineProperty(this, "adapters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new TemplateAdapters()
        });
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher()
        });
        Object.defineProperty(this, "setup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!isReal) {
            throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
        }
        this._settings = settings;
    }
    /**
     * Use this method to create an instance of this class.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
     * @param   root      Root element
     * @param   settings  Settings
     * @param   template  Template
     * @return            Instantiated object
     */
    Object.defineProperty(Template, "new", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (settings) {
            return new Template(settings, true);
        }
    });
    Object.defineProperty(Template.prototype, "get", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._settings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    Object.defineProperty(Template.prototype, "setRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._settings[key] = value;
        }
    });
    Object.defineProperty(Template.prototype, "set", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var _this = this;
            if (this._settings[key] !== value) {
                this.setRaw(key, value);
                this._entities.forEach(function (entity) {
                    entity._setTemplateProperty(_this, key, value);
                });
            }
        }
    });
    Object.defineProperty(Template.prototype, "remove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (key in this._settings) {
                delete this._settings[key];
                this._entities.forEach(function (entity) {
                    entity._removeTemplateProperty(key);
                });
            }
        }
    });
    Object.defineProperty(Template.prototype, "removeAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._settings, function (key, _value) {
                _this.remove(key);
            });
        }
    });
    Object.defineProperty(Template.prototype, "getPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, fallback) {
            var value = this._privateSettings[key];
            if (value !== undefined) {
                return value;
            }
            else {
                return fallback;
            }
        }
    });
    Object.defineProperty(Template.prototype, "setPrivateRaw", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            this._privateSettings[key] = value;
            return value;
        }
    });
    Object.defineProperty(Template.prototype, "setPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, value) {
            var _this = this;
            if (this._privateSettings[key] !== value) {
                this.setPrivateRaw(key, value);
                this._entities.forEach(function (entity) {
                    entity._setTemplatePrivateProperty(_this, key, value);
                });
            }
            return value;
        }
    });
    Object.defineProperty(Template.prototype, "removePrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key) {
            if (key in this._privateSettings) {
                delete this._privateSettings[key];
                this._entities.forEach(function (entity) {
                    entity._removeTemplatePrivateProperty(key);
                });
            }
        }
    });
    Object.defineProperty(Template.prototype, "setAll", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var _this = this;
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(value, function (key, value) {
                _this.set(key, value);
            });
        }
    });
    // TODO code duplication with Properties
    Object.defineProperty(Template.prototype, "on", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var _this = this;
            var events = this._settingEvents[key];
            if (events === undefined) {
                events = this._settingEvents[key] = [];
            }
            events.push(callback);
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.Disposer(function () {
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeFirst(events, callback);
                if (events.length === 0) {
                    delete _this._settingEvents[key];
                }
            });
        }
    });
    // TODO code duplication with Properties
    Object.defineProperty(Template.prototype, "onPrivate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (key, callback) {
            var _this = this;
            var events = this._privateSettingEvents[key];
            if (events === undefined) {
                events = this._privateSettingEvents[key] = [];
            }
            events.push(callback);
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.Disposer(function () {
                _Array__WEBPACK_IMPORTED_MODULE_1__.removeFirst(events, callback);
                if (events.length === 0) {
                    delete _this._privateSettingEvents[key];
                }
            });
        }
    });
    Object.defineProperty(Template.prototype, "_apply", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity, state) {
            var disposers = [];
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._settingEvents, function (key, events) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(events, function (event) {
                    disposers.push(entity.on(key, event));
                });
            });
            _Object__WEBPACK_IMPORTED_MODULE_0__.each(this._privateSettingEvents, function (key, events) {
                _Array__WEBPACK_IMPORTED_MODULE_1__.each(events, function (event) {
                    disposers.push(entity.onPrivate(key, event));
                });
            });
            this.states._apply(entity, state);
            disposers.push(this.adapters._apply(entity));
            disposers.push(entity.events.copyFrom(this.events));
            return new _Disposer__WEBPACK_IMPORTED_MODULE_2__.MultiDisposer(disposers);
        }
    });
    Object.defineProperty(Template.prototype, "_setObjectTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity) {
            this._entities.push(entity);
        }
    });
    Object.defineProperty(Template.prototype, "_removeObjectTemplate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (entity) {
            _Array__WEBPACK_IMPORTED_MODULE_1__.keepIf(this._entities, function (x) { return x !== entity; });
        }
    });
    Object.defineProperty(Template.prototype, "_stateChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            this._entities.forEach(function (entity) {
                entity._applyStateByKey(name);
            });
        }
    });
    return Template;
}());

//# sourceMappingURL=Template.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFormatter": () => (/* binding */ TextFormatter)
/* harmony export */ });
/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");


var TextFormatter = /** @class */ (function () {
    function TextFormatter() {
    }
    /**
     * Replaces brackets with temporary placeholders.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Escaped text
     */
    Object.defineProperty(TextFormatter, "escape", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.
                replace(/\[\[/g, this.prefix + "1").
                replace(/([^\/]{1})\]\]/g, "$1" + this.prefix + "2").
                replace(/\]\]/g, this.prefix + "2").
                replace(/\{\{/g, this.prefix + "3").
                replace(/\}\}/g, this.prefix + "4").
                replace(/\'\'/g, this.prefix + "5");
        }
    });
    /**
     * Replaces placeholders back to brackets.
     *
     * @ignore Exclude from docs
     * @param text  Escaped text
     * @return Unescaped text
     */
    Object.defineProperty(TextFormatter, "unescape", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.
                replace(new RegExp(this.prefix + "1", "g"), "[[").
                replace(new RegExp(this.prefix + "2", "g"), "]]").
                replace(new RegExp(this.prefix + "3", "g"), "{{").
                replace(new RegExp(this.prefix + "4", "g"), "}}").
                replace(new RegExp(this.prefix + "5", "g"), "'");
        }
    });
    /**
     * Cleans up the text text for leftover double square brackets.
     *
     * @ignore Exclude from docs
     * @param text  Input text
     * @return Cleaned up text
     */
    Object.defineProperty(TextFormatter, "cleanUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.
                replace(/\[\[/g, "[").
                replace(/\]\]/g, "]").
                replace(/\{\{/g, "{").
                replace(/\}\}/g, "}").
                replace(/\'\'/g, "'");
        }
    });
    /**
     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
     *
     * If the second parameter `quotedBlocks` is set to `true` this method will
     * also single out text blocks enclosed within single quotes that no
     * formatting should be applied to, and they should be displayed as is.
     *
     * Default for the above is `false`, so that you can use single quote in text
     * without escaping it.
     *
     * If enabled, single quotes can be escaped by doubling it - adding two
     * single quotes, which will be replaced by a one single quote in the final
     * output.
     *
     * @ignore Exclude from docs
     * @param text          Text to chunk
     * @param quotedBlocks  Use quoted blocks
     * @param noFormatting  Formatting blocks will be treated as regular text
     * @return Array of string chunks
     */
    Object.defineProperty(TextFormatter, "chunk", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text, quotedBlocks, noFormatting) {
            if (quotedBlocks === void 0) { quotedBlocks = false; }
            if (noFormatting === void 0) { noFormatting = false; }
            // Init result
            var res = [];
            // Replace double (escaped) square spaces and quotes with temporary codes
            text = this.escape(text);
            // Deal with style blocks
            var chunks = quotedBlocks ? text.split("'") : [text];
            for (var i = 0; i < chunks.length; i++) {
                var chunk = chunks[i];
                // Empty?
                if (chunk === "") {
                    continue;
                }
                if ((i % 2) === 0) {
                    // Text outside quotes
                    // Parse for style blocks which are "text" chunks, the rest chunks are
                    // "value"
                    chunk = chunk.replace(/\]\[/g, "]" + _Type__WEBPACK_IMPORTED_MODULE_0__.PLACEHOLDER + "[");
                    chunk = chunk.replace(/\[\]/g, "[ ]");
                    var chunks2 = chunk.split(/[\[\]]+/);
                    for (var i2 = 0; i2 < chunks2.length; i2++) {
                        var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                        // Placeholder?
                        if (chunk2 === _Type__WEBPACK_IMPORTED_MODULE_0__.PLACEHOLDER) {
                            continue;
                        }
                        // Empty?
                        if (chunk2 === "") {
                            continue;
                        }
                        // Block or value
                        if ((i2 % 2) === 0) {
                            res.push({
                                "type": "value",
                                "text": chunk2
                            });
                        }
                        else {
                            res.push({
                                "type": noFormatting ? "value" : "format",
                                "text": "[" + chunk2 + "]"
                            });
                        }
                    }
                }
                else {
                    // A text within doublequotes
                    // All chunks are "text"
                    var chunks2 = chunk.split(/[\[\]]+/);
                    for (var i2 = 0; i2 < chunks2.length; i2++) {
                        var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                        // Empty?
                        if (chunk2 === "") {
                            continue;
                        }
                        // Block or text
                        if ((i2 % 2) === 0) {
                            res.push({
                                "type": "text",
                                "text": chunk2
                            });
                        }
                        else if (this.isImage(chunk2)) {
                            res.push({
                                "type": "image",
                                "text": "[" + chunk2 + "]"
                            });
                        }
                        else {
                            res.push({
                                "type": "format",
                                "text": "[" + chunk2 + "]"
                            });
                        }
                    }
                }
            }
            return res;
        }
    });
    /**
     * Checks if supplied format contains image information and should be
     * formatted as such.
     * I.e.: `[img: myImage.png]`
     *
     * @ignore
     * @param  text  Format
     * @return true if it is an image
     */
    Object.defineProperty(TextFormatter, "isImage", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (text) {
            return text.match(/img[ ]?:/) ? true : false;
        }
    });
    Object.defineProperty(TextFormatter, "getTextStyle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (style) {
            // let textStyle: string[] = [];
            // let textFill: string | undefined;
            var format = {};
            if (style == "" || style == "[ ]") {
                return {};
            }
            // TODO: cache
            // let cached = registry.getCache("translateStyleShortcuts_" + style);
            // if (cached) {
            // 	return cached;
            // }
            // Pre-process quoted text
            var q = style.match(/('[^']*')|("[^"]*")/gi);
            if (q) {
                for (var i = 0; i < q.length; i++) {
                    style = style.replace(q[i], q[i].replace(/['"]*/g, "").replace(/[ ]+/g, "+"));
                }
            }
            // Get style parts
            var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w]+)|(\/)/gi);
            // Empty?
            if (!b) {
                return {};
            }
            //console.log(b)
            // Check each part
            for (var i = 0; i < b.length; i++) {
                if (b[i].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i)) {
                    format.fontWeight = b[i];
                }
                else if (b[i] == "/") {
                    // Just closing tag
                    // Do nothing
                }
                else if (!b[i].match(/:/)) {
                    // Color
                    format.fill = _Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromString(b[i]);
                }
                else {
                    var p = b[i].split(/:[ ]*/);
                    format[p[0]] = p[1];
                    //textStyle.push(b[i].replace(/^[a-zA-Z]:[ ]*/, ""));
                    //b[i] = b[i].replace(/\+/g, " ");
                }
            }
            // TODO: cache
            // registry.setCache("translateStyleShortcuts_" + style, res);
            return format;
        }
    });
    Object.defineProperty(TextFormatter, "prefix", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "__amcharts__"
    });
    return TextFormatter;
}());

//# sourceMappingURL=TextFormatter.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Throttler.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Throttler.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Throttler": () => (/* binding */ Throttler)
/* harmony export */ });
var Throttler = /** @class */ (function () {
    function Throttler(fn) {
        Object.defineProperty(this, "_ready", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_fn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._fn = fn;
    }
    Object.defineProperty(Throttler.prototype, "run", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this._ready) {
                this._ready = false;
                this._pending = false;
                requestAnimationFrame(function () {
                    _this._ready = true;
                    if (_this._pending) {
                        _this.run();
                    }
                });
                this._fn();
            }
            else {
                this._pending = true;
            }
        }
    });
    return Throttler;
}());

//# sourceMappingURL=Throttler.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Time.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Time.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sleep": () => (/* binding */ sleep),
/* harmony export */   "timeUnitDurations": () => (/* binding */ timeUnitDurations),
/* harmony export */   "getNextUnit": () => (/* binding */ getNextUnit),
/* harmony export */   "getDuration": () => (/* binding */ getDuration),
/* harmony export */   "getIntervalDuration": () => (/* binding */ getIntervalDuration),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "getTime": () => (/* binding */ getTime),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "checkChange": () => (/* binding */ checkChange),
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "setTimezone": () => (/* binding */ setTimezone),
/* harmony export */   "chooseInterval": () => (/* binding */ chooseInterval),
/* harmony export */   "getUnitValue": () => (/* binding */ getUnitValue)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js");

/**
 * ============================================================================
 * IMPORTS
 * ============================================================================
 * @hidden
 */


function sleep(ms) {
    return new Promise(function (resolve, _reject) {
        setTimeout(resolve, ms);
    });
}
/**
 * Maps time period names to their numeric representations in milliseconds.
 *
 * @ignore Exclude from docs
 */
var timeUnitDurations = {
    millisecond: 1,
    second: 1000,
    minute: 60000,
    hour: 3600000,
    day: 86400000,
    week: 604800000,
    month: 2592000000,
    year: 31536000000
};
/**
 * Returns the next time unit that goes after source `unit`.
 *
 * E.g. "hour" is the next unit after "minute", etc.
 *
 * @ignore Exclude from docs
 * @param unit  Source time unit
 * @return Next time unit
 */
function getNextUnit(unit) {
    switch (unit) {
        case "year":
            return;
        case "month":
            return "year";
        case "week":
            return "month";
        case "day":
            return "month"; // not a mistake
        case "hour":
            return "day";
        case "minute":
            return "hour";
        case "second":
            return "minute";
        case "millisecond":
            return "second";
    }
}
/**
 * Returns number of milliseconds in the `count` of time `unit`.
 *
 * Available units: "millisecond", "second", "minute", "hour", "day", "week",
 * "month", and "year".
 *
 * @ignore Exclude from docs
 * @param unit   Time unit
 * @param count  Number of units
 * @return Milliseconds
 */
function getDuration(unit, count) {
    if (count == null) {
        count = 1;
    }
    return timeUnitDurations[unit] * count;
}
/**
 * @ignore
 */
function getIntervalDuration(interval) {
    if (interval) {
        return timeUnitDurations[interval.timeUnit] * interval.count;
    }
    return 0;
}
/**
 * Returns current `Date` object.
 *
 * @return Current date
 */
function now() {
    return new Date();
}
/**
 * Returns current timestamp.
 *
 * @return Current timestamp
 */
function getTime() {
    return now().getTime();
}
/**
 * Returns a copy of the `Date` object.
 *
 * @ignore Exclude from docs
 * @param date  Source date
 * @return Copy
 */
function copy(date) {
    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
}
/**
 * Checks if the `unit` part of two `Date` objects do not match. Two dates
 * represent a "range" of time, rather the same time date.
 *
 * @ignore Exclude from docs
 * @param dateOne  Date 1
 * @param dateTwo  Date 2
 * @param unit     Time unit to check
 * @return Range?
 */
function checkChange(dateOne, dateTwo, unit, utc) {
    var timeOne = dateOne.getTime();
    var timeTwo = dateTwo.getTime();
    // quick
    if ((timeTwo - timeOne) > getDuration(unit, 1.2)) {
        return true;
    }
    dateOne = new Date(timeOne);
    dateTwo = new Date(timeTwo);
    var timeZoneOffset1 = 0;
    var timeZoneOffset2 = 0;
    if (!utc && unit != "millisecond") {
        timeZoneOffset1 = dateOne.getTimezoneOffset();
        dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
        timeZoneOffset2 = dateTwo.getTimezoneOffset();
        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
    }
    var changed = false;
    switch (unit) {
        case "year":
            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                changed = true;
            }
            break;
        case "month":
            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                changed = true;
            }
            else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                changed = true;
            }
            break;
        case "day":
            if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                changed = true;
            }
            else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
                changed = true;
            }
            break;
        case "hour":
            if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
                changed = true;
            }
            break;
        case "minute":
            if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
                changed = true;
            }
            break;
        case "second":
            if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
                changed = true;
            }
            break;
        case "millisecond":
            if (dateOne.getTime() != dateTwo.getTime()) {
                changed = true;
            }
            break;
    }
    if (changed) {
        return true;
    }
    var nextUnit = getNextUnit(unit);
    if (nextUnit) {
        dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);
        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);
        return checkChange(dateOne, dateTwo, nextUnit, utc);
    }
    else {
        return false;
    }
}
/**
 * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.
 *
 * @ignore Exclude from docs
 * @param date   Source date
 * @param unit   Time unit
 * @param count  Number of units to add
 * @return Modified date
 */
function add(date, unit, count, utc) {
    var timeZoneOffset = 0;
    if (!utc && unit != "millisecond") {
        timeZoneOffset = date.getTimezoneOffset();
        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
    }
    switch (unit) {
        case "day":
            var day = date.getUTCDate();
            date.setUTCDate(day + count);
            break;
        case "second":
            var seconds = date.getUTCSeconds();
            date.setUTCSeconds(seconds + count);
            break;
        case "millisecond":
            var milliseconds = date.getUTCMilliseconds();
            date.setUTCMilliseconds(milliseconds + count);
            break;
        case "hour":
            var hours = date.getUTCHours();
            date.setUTCHours(hours + count);
            break;
        case "minute":
            var minutes = date.getUTCMinutes();
            date.setUTCMinutes(minutes + count);
            break;
        case "year":
            var year = date.getUTCFullYear();
            date.setUTCFullYear(year + count);
            break;
        case "month":
            var month = date.getUTCMonth();
            date.setUTCMonth(month + count);
            break;
        case "week":
            var wday = date.getUTCDate();
            date.setUTCDate(wday + count * 7);
            break;
    }
    if (!utc && unit != "millisecond") {
        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
        if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
            var newTimeZoneOffset = date.getTimezoneOffset();
            if (newTimeZoneOffset != timeZoneOffset) {
                var diff = newTimeZoneOffset - timeZoneOffset;
                date.setUTCMinutes(date.getUTCMinutes() + diff);
                // solves issues if newe time falls back to old time zone
                if (date.getTimezoneOffset() != newTimeZoneOffset) {
                    date.setUTCMinutes(date.getUTCMinutes() - diff);
                }
            }
        }
    }
    return date;
}
/**
 * "Rounds" the date to specific time unit.
 *
 * @ignore Exclude from docs
 * @param date             Source date
 * @param unit             Time unit
 * @param count            Number of units to round to
 * @param firstDateOfWeek  First day of week
 * @return New date
 */
function round(date, unit, count, firstDateOfWeek, utc, firstDate) {
    if (!_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber(count)) {
        count = 1;
    }
    var timeZoneOffset = 0;
    if (!utc && unit != "millisecond") {
        timeZoneOffset = date.getTimezoneOffset();
        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
    }
    switch (unit) {
        case "day":
            var day = date.getUTCDate();
            if (count > 1) {
                //	day = Math.floor(day / count) * count;
                if (firstDate) {
                    firstDate = round(firstDate, "day", 1);
                    var difference = date.getTime() - firstDate.getTime();
                    var unitCount = Math.floor(difference / getDuration("day") / count);
                    var duration = getDuration("day", unitCount * count);
                    date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                }
            }
            else {
                date.setUTCDate(day);
            }
            date.setUTCHours(0, 0, 0, 0);
            break;
        case "second":
            var seconds = date.getUTCSeconds();
            if (count > 1) {
                seconds = Math.floor(seconds / count) * count;
            }
            date.setUTCSeconds(seconds, 0);
            break;
        case "millisecond":
            if (count == 1) {
                return date; // much better for perf!
            }
            var milliseconds = date.getUTCMilliseconds();
            milliseconds = Math.floor(milliseconds / count) * count;
            date.setUTCMilliseconds(milliseconds);
            break;
        case "hour":
            var hours = date.getUTCHours();
            if (count > 1) {
                hours = Math.floor(hours / count) * count;
            }
            date.setUTCHours(hours, 0, 0, 0);
            break;
        case "minute":
            var minutes = date.getUTCMinutes();
            milliseconds = date.getUTCMilliseconds();
            if (count > 1) {
                minutes = Math.floor(minutes / count) * count;
            }
            date.setUTCMinutes(minutes, 0, 0);
            break;
        case "month":
            var month = date.getUTCMonth();
            if (count > 1) {
                month = Math.floor(month / count) * count;
            }
            date.setUTCMonth(month, 1);
            date.setUTCHours(0, 0, 0, 0);
            break;
        case "year":
            var year = date.getUTCFullYear();
            if (count > 1) {
                year = Math.floor(year / count) * count;
            }
            date.setUTCFullYear(year, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            //timeZoneOffset = nonUTCDateY.getTimezoneOffset();
            break;
        case "week":
            var wday = date.getUTCDate();
            var weekDay = date.getUTCDay();
            if (!_Type__WEBPACK_IMPORTED_MODULE_0__.isNumber(firstDateOfWeek)) {
                firstDateOfWeek = 1;
            }
            // todo: rounding when count is not 1
            if (weekDay >= firstDateOfWeek) {
                wday = wday - weekDay + firstDateOfWeek;
            }
            else {
                wday = wday - (7 + weekDay) + firstDateOfWeek;
            }
            date.setUTCDate(wday);
            date.setUTCHours(0, 0, 0, 0);
            break;
    }
    if (!utc && unit != "millisecond") {
        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
        if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
            var newTimeZoneOffset = date.getTimezoneOffset();
            if (newTimeZoneOffset != timeZoneOffset) {
                var diff = newTimeZoneOffset - timeZoneOffset;
                date.setUTCMinutes(date.getUTCMinutes() + diff);
            }
        }
    }
    return date;
}
/**
 * Returns a new `Date` object which corresponds to the source date in a
 * specific timezone.
 *
 * @since 4.10.1
 * @param   date      Source date
 * @param   timezone  Timezone identifier
 * @return            Recalculated new Date
 */
function setTimezone(date, timezone) {
    var d = new Date(date.toLocaleString("en-US", { timeZone: timezone }));
    return d;
}
/**
 * @ignore
 */
function chooseInterval(index, duration, gridCount, intervals) {
    var gridInterval = intervals[index];
    var intervalDuration = getIntervalDuration(gridInterval);
    var lastIndex = intervals.length - 1;
    if (index >= lastIndex) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, intervals[lastIndex]);
    }
    var count = Math.ceil(duration / intervalDuration);
    if (duration < intervalDuration && index > 0) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, intervals[index - 1]);
    }
    if (count <= gridCount) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, intervals[index]);
    }
    else {
        if (index + 1 < intervals.length) {
            return chooseInterval(index + 1, duration, gridCount, intervals);
        }
        else {
            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, intervals[index]);
        }
    }
}
/**
 * @ignore
 */
function getUnitValue(date, unit) {
    switch (unit) {
        case "day":
            return date.getDate();
        case "second":
            return date.getSeconds();
        case "millisecond":
            return date.getMilliseconds();
        case "hour":
            return date.getHours();
        case "minute":
            return date.getMinutes();
        case "month":
            return date.getMonth();
        case "year":
            return date.getFullYear();
        case "week":
            return _Utils__WEBPACK_IMPORTED_MODULE_2__.getWeek(date);
    }
}
//# sourceMappingURL=Time.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaN": () => (/* binding */ isNaN),
/* harmony export */   "getType": () => (/* binding */ getType),
/* harmony export */   "toNumber": () => (/* binding */ toNumber),
/* harmony export */   "toDate": () => (/* binding */ toDate),
/* harmony export */   "numberToString": () => (/* binding */ numberToString),
/* harmony export */   "repeat": () => (/* binding */ repeat),
/* harmony export */   "isDate": () => (/* binding */ isDate),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "isObject": () => (/* binding */ isObject),
/* harmony export */   "isArray": () => (/* binding */ isArray),
/* harmony export */   "PLACEHOLDER": () => (/* binding */ PLACEHOLDER),
/* harmony export */   "PLACEHOLDER2": () => (/* binding */ PLACEHOLDER2)
/* harmony export */ });
/**
 * A collection of utility functions for various type checks and conversion
 * @hidden
 */
/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Returns `true` if value is not a number (NaN).
 *
 * @param value Input value
 * @return Is NaN?
 */
function isNaN(value) {
    return Number(value) !== value;
}
/**
 * Returns a type of the value.
 *
 * @param value  Input value
 * @return Type of the value
 * @ignore
 */
function getType(value) {
    return ({}).toString.call(value);
}
/**
 * ============================================================================
 * QUICK CONVERSION
 * ============================================================================
 * @hidden
 */
/**
 * Converts any value into a `number`.
 *
 * @param value  Source value
 * @return Number representation of value
 */
function toNumber(value) {
    if (value != null && !isNumber(value)) {
        var converted = Number(value);
        if (isNaN(converted) && isString(value) && value != "") {
            return toNumber(value.replace(/[^0-9.\-]+/g, ''));
        }
        return converted;
    }
    return value;
}
/**
 * Converts anything to Date object.
 *
 * @param value  A value of any type
 * @return Date object representing a value
 */
function toDate(value) {
    if (isDate(value)) {
        // TODO maybe don't create a new Date ?
        return new Date(value);
    }
    else if (isNumber(value)) {
        return new Date(value);
    }
    else {
        // Try converting to number (assuming timestamp)
        var num = Number(value);
        if (!isNumber(num)) {
            return new Date(value);
        }
        else {
            return new Date(num);
        }
    }
}
/**
 * Converts numeric value into string. Deals with large or small numbers that
 * would otherwise use exponents.
 *
 * @param value  Numeric value
 * @return Numeric value as string
 */
function numberToString(value) {
    // TODO handle Infinity and -Infinity
    if (isNaN(value)) {
        return "NaN";
    }
    if (value === Infinity) {
        return "Infinity";
    }
    if (value === -Infinity) {
        return "-Infinity";
    }
    // Negative 0
    if ((value === 0) && (1 / value === -Infinity)) {
        return "-0";
    }
    // Preserve negative and deal with absoute values
    var negative = value < 0;
    value = Math.abs(value);
    // TODO test this
    var parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
    var digits = parsed[1];
    var decimals = parsed[2] || "";
    var res;
    // Leave the nummber as it is if it does not use exponents
    if (parsed[3] === undefined) {
        res = (decimals === "" ? digits : digits + "." + decimals);
    }
    else {
        var exponent = +parsed[3];
        // Deal with decimals
        if (value < 1) {
            var zeros = exponent - 1;
            res = "0." + repeat("0", zeros) + digits + decimals;
            // Deal with integers
        }
        else {
            var zeros = exponent - decimals.length;
            if (zeros === 0) {
                res = digits + decimals;
            }
            else if (zeros < 0) {
                res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
            }
            else {
                res = digits + decimals + repeat("0", zeros);
            }
        }
    }
    return negative ? "-" + res : res;
}
/**
 * Repeats a `string` number of times as set in `amount`.
 *
 * @ignore Exclude from docs
 * @todo Make this faster
 * @param string  Source string
 * @param amount  Number of times to repeat string
 * @return New string
 */
function repeat(string, amount) {
    return new Array(amount + 1).join(string);
}
/**
 * ============================================================================
 * TYPE CHECK
 * ============================================================================
 * @hidden
 */
/**
 * Checks if parameter is `Date`.
 *
 * @param value  Input value
 * @return Is Date?
 */
function isDate(value) {
    return getType(value) === "[object Date]";
}
/**
 * Checks if parameter is `string`.
 *
 * @param value  Input value
 * @return Is string?
 */
function isString(value) {
    return typeof value === "string";
}
/**
 * Checks if parameter is `number`.
 *
 * @param value  Input value
 * @return Is number?
 */
function isNumber(value) {
    return typeof value === "number" && Number(value) == value;
}
/**
 * Checks if parameter is `object`.
 *
 * @param value  Input value
 * @return Is object?
 */
function isObject(value) {
    return typeof value === "object" && value !== null;
}
/**
 * Checks if parameter is `Array`.
 *
 * @param value  Input value
 * @return Is Array?
 */
function isArray(value) {
    return Array.isArray(value);
}
/**
 * ============================================================================
 * STATIC CONSTANTS
 * ============================================================================
 * @hidden
 */
/**
 * @ignore Exclude from docs
 */
var PLACEHOLDER = "__§§§__";
/**
 * @ignore Exclude from docs
 */
var PLACEHOLDER2 = "__§§§§__";
//# sourceMappingURL=Type.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "removeElement": () => (/* binding */ removeElement),
/* harmony export */   "addEventListener": () => (/* binding */ addEventListener),
/* harmony export */   "supports": () => (/* binding */ supports),
/* harmony export */   "getPointerId": () => (/* binding */ getPointerId),
/* harmony export */   "blur": () => (/* binding */ blur),
/* harmony export */   "getRendererEvent": () => (/* binding */ getRendererEvent),
/* harmony export */   "isTouchEvent": () => (/* binding */ isTouchEvent),
/* harmony export */   "setStyle": () => (/* binding */ setStyle),
/* harmony export */   "getStyle": () => (/* binding */ getStyle),
/* harmony export */   "contains": () => (/* binding */ contains),
/* harmony export */   "setInteractive": () => (/* binding */ setInteractive),
/* harmony export */   "getShadowRoot": () => (/* binding */ getShadowRoot),
/* harmony export */   "StyleRule": () => (/* binding */ StyleRule),
/* harmony export */   "relativeToValue": () => (/* binding */ relativeToValue),
/* harmony export */   "decimalPlaces": () => (/* binding */ decimalPlaces),
/* harmony export */   "padString": () => (/* binding */ padString),
/* harmony export */   "trimLeft": () => (/* binding */ trimLeft),
/* harmony export */   "trimRight": () => (/* binding */ trimRight),
/* harmony export */   "trim": () => (/* binding */ trim),
/* harmony export */   "getFormat": () => (/* binding */ getFormat),
/* harmony export */   "cleanFormat": () => (/* binding */ cleanFormat),
/* harmony export */   "stripTags": () => (/* binding */ stripTags),
/* harmony export */   "plainText": () => (/* binding */ plainText),
/* harmony export */   "escapeForRgex": () => (/* binding */ escapeForRgex),
/* harmony export */   "getYearDay": () => (/* binding */ getYearDay),
/* harmony export */   "getWeek": () => (/* binding */ getWeek),
/* harmony export */   "getMonthWeek": () => (/* binding */ getMonthWeek),
/* harmony export */   "getDayFromWeek": () => (/* binding */ getDayFromWeek),
/* harmony export */   "get12Hours": () => (/* binding */ get12Hours),
/* harmony export */   "getTimeZone": () => (/* binding */ getTimeZone),
/* harmony export */   "capitalizeFirst": () => (/* binding */ capitalizeFirst),
/* harmony export */   "hslToRgb": () => (/* binding */ hslToRgb),
/* harmony export */   "rgbToHsl": () => (/* binding */ rgbToHsl),
/* harmony export */   "lighten": () => (/* binding */ lighten),
/* harmony export */   "getLightnessStep": () => (/* binding */ getLightnessStep),
/* harmony export */   "brighten": () => (/* binding */ brighten),
/* harmony export */   "getBrightnessStep": () => (/* binding */ getBrightnessStep),
/* harmony export */   "isLight": () => (/* binding */ isLight),
/* harmony export */   "saturate": () => (/* binding */ saturate),
/* harmony export */   "alternativeColor": () => (/* binding */ alternativeColor),
/* harmony export */   "mergeTags": () => (/* binding */ mergeTags),
/* harmony export */   "sameBounds": () => (/* binding */ sameBounds)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Type */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js");
/* harmony import */ var _Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Array */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js");
/* harmony import */ var _Object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Object */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js");
/* harmony import */ var _Disposer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Disposer */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js");





/**
 * ============================================================================
 * DOM FUNCTIONS
 * ============================================================================
 * @hidden
 */
function removeElement(el) {
    if (el.parentNode) {
        el.parentNode.removeChild(el);
    }
}
/**
 * Function that adds a disposable event listener directly to a DOM element.
 *
 * @ignore Exclude from docs
 * @param dom       A DOM element to add event to
 * @param type      Event type
 * @param listener  Event listener
 * @returns Disposable event
 */
function addEventListener(dom, type, listener, options) {
    //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
    //console.log(type, dom);
    dom.addEventListener(type, listener, options || false);
    return new _Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer(function () {
        dom.removeEventListener(type, listener, options || false);
    });
}
/**
 * @ignore
 */
function supports(cap) {
    switch (cap) {
        case "touchevents":
            //return "ontouchstart" in document.documentElement;
            return window.hasOwnProperty("TouchEvent");
        case "pointerevents":
            return window.hasOwnProperty("PointerEvent");
        case "mouseevents":
            return window.hasOwnProperty("MouseEvent");
        case "wheelevents":
            return window.hasOwnProperty("WheelEvent");
        case "keyboardevents":
            return window.hasOwnProperty("KeyboardEvent");
    }
    return false;
}
/**
 * @ignore
 */
function getPointerId(event) {
    var id = event.pointerId || 0;
    //console.log(event);
    return id;
}
/**
 * Removes focus from any element by shifting focus to body.
 *
 * @ignore Exclude from docs
 */
function blur() {
    if (document.activeElement && document.activeElement != document.body) {
        if (document.activeElement.blur) {
            document.activeElement.blur();
        }
        else {
            var input = document.createElement("button");
            input.style.position = "fixed";
            input.style.top = "0px";
            input.style.left = "-10000px";
            document.body.appendChild(input);
            input.focus();
            input.blur();
            document.body.removeChild(input);
        }
    }
}
/**
 * @ignore
 */
function getRendererEvent(key) {
    if (supports("pointerevents")) {
        return key;
    }
    else if (supports("touchevents")) {
        switch (key) {
            case "pointerover": return "touchstart";
            case "pointerout": return "touchend";
            case "pointerdown": return "touchstart";
            case "pointermove": return "touchmove";
            case "pointerup": return "touchend";
            case "click": return "click";
            case "dblclick": return "dblclick";
        }
    }
    else if (supports("mouseevents")) {
        switch (key) {
            case "pointerover": return "mouseover";
            case "pointerout": return "mouseout";
            case "pointerdown": return "mousedown";
            case "pointermove": return "mousemove";
            case "pointerup": return "mouseup";
            case "click": return "click";
            case "dblclick": return "dblclick";
        }
    }
    return key;
}
/**
 * Determines if pointer event originated from a touch pointer or mouse.
 *
 * @param ev  Original event
 * @return Touch pointer?
 */
function isTouchEvent(ev) {
    if (typeof Touch !== "undefined" && ev instanceof Touch) {
        return true;
    }
    else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && ev.pointerType != null) {
        switch (ev.pointerType) {
            case "touch":
            case "pen":
            case 2:
                return true;
            case "mouse":
            case 4:
                return false;
            default:
                return !(ev instanceof MouseEvent);
        }
    }
    else if (ev.type != null) {
        if (ev.type.match(/^mouse/)) {
            return false;
        }
    }
    return true;
}
/**
 * Sets style property on DOM element.
 *
 * @ignore Exclude from docs
 */
function setStyle(dom, property, value) {
    dom.style[property] = value;
}
function getStyle(dom, property) {
    return dom.style[property];
}
/**
 * Checks of element `a` contains element `b`.
 *
 * @param a  Aleged ascendant
 * @param b  Aleged descendant
 * @return Contains?
 */
function contains(a, b) {
    var cursor = b;
    while (true) {
        if (a === cursor) {
            return true;
        }
        else if (cursor.parentNode === null) {
            // TODO better ShadowRoot detection
            if (cursor.host == null) {
                return false;
            }
            else {
                cursor = cursor.host;
            }
        }
        else {
            cursor = cursor.parentNode;
        }
    }
}
/**
 * Disables or enables interactivity of a DOM element.
 *
 * @param  target       Target element
 * @param  interactive  Interactive?
 */
function setInteractive(target, interactive) {
    if (interactive) {
        target.style.pointerEvents = "";
    }
    else {
        target.style.pointerEvents = "none";
    }
}
/**
 * Returns the shadow root of the element or null
 *
 * @param a  Node
 * @return Root
 */
function getShadowRoot(a) {
    var cursor = a;
    while (true) {
        if (cursor.parentNode === null) {
            // TODO better ShadowRoot detection
            if (cursor.host != null) {
                return cursor;
            }
            else {
                return null;
            }
        }
        else {
            cursor = cursor.parentNode;
        }
    }
}
/**
 * [rootStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 */
var rootStylesheet;
/**
 * [getStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @return [description]
 */
function getStylesheet(element, nonce) {
    if (nonce === void 0) { nonce = ""; }
    if (element === null) {
        if (rootStylesheet == null) {
            // TODO use createElementNS ?
            var e = document.createElement("style");
            e.type = "text/css";
            if (nonce != "") {
                e.setAttribute("nonce", nonce);
            }
            document.head.appendChild(e);
            rootStylesheet = e.sheet;
        }
        return rootStylesheet;
    }
    else {
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        if (nonce != "") {
            e.setAttribute("nonce", nonce);
        }
        element.appendChild(e);
        return e.sheet;
    }
}
/**
 * [makeStylesheet description]
 *
 * @ignore Exclude from docs
 * @todo Description
 * @param selector  [description]
 * @return [description]
 */
function appendStylesheet(root, selector) {
    var index = root.cssRules.length;
    root.insertRule(selector + "{}", index);
    return root.cssRules[index];
}
/**
 * Defines a class for a CSS rule.
 *
 * Can be used to dynamically add CSS to the document.
 */
var StyleRule = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(StyleRule, _super);
    /**
     * Constructor.
     *
     * @param selector  CSS selector
     * @param styles    An object of style attribute - value pairs
     */
    function StyleRule(element, selector, styles, nonce) {
        if (nonce === void 0) { nonce = ""; }
        var _this = this;
        var root = getStylesheet(element, nonce);
        // TODO test this
        _this = _super.call(this, function () {
            // TODO a bit hacky
            var index = _Array__WEBPACK_IMPORTED_MODULE_2__.indexOf(root.cssRules, _this._rule);
            if (index === -1) {
                throw new Error("Could not dispose StyleRule");
            }
            else {
                // TODO if it's empty remove it from the DOM ?
                root.deleteRule(index);
            }
        }) || this;
        /**
         * CSS rule.
         */
        Object.defineProperty(_this, "_rule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        _this._rule = appendStylesheet(root, selector);
        _Object__WEBPACK_IMPORTED_MODULE_3__.each(styles, function (key, value) {
            _this.setStyle(key, value);
        });
        return _this;
    }
    Object.defineProperty(StyleRule.prototype, "selector", {
        /**
         * @return CSS selector
         */
        get: function () {
            return this._rule.selectorText;
        },
        /**
         * A CSS selector text.
         *
         * E.g.: `.myClass p`
         *
         * @param selector  CSS selector
         */
        set: function (selector) {
            this._rule.selectorText = selector;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the same style properties with browser-specific prefixes.
     *
     * @param name   Attribute name
     * @param value  Attribute value
     */
    Object.defineProperty(StyleRule.prototype, "_setVendorPrefixName", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, value) {
            var style = this._rule.style;
            style.setProperty("-webkit-" + name, value, "");
            style.setProperty("-moz-" + name, value, "");
            style.setProperty("-ms-" + name, value, "");
            style.setProperty("-o-" + name, value, "");
            style.setProperty(name, value, "");
        }
    });
    /**
     * Sets a value for specific style attribute.
     *
     * @param name   Attribute
     * @param value  Value
     */
    Object.defineProperty(StyleRule.prototype, "setStyle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, value) {
            if (name === "transition") {
                this._setVendorPrefixName(name, value);
            }
            else {
                this._rule.style.setProperty(name, value, "");
            }
        }
    });
    return StyleRule;
}(_Disposer__WEBPACK_IMPORTED_MODULE_0__.Disposer));

// /**
//  * Applies a set of styles to an element. Stores the original styles so they
//  * can be restored later.
//  *
//  * @ignore
//  * @param io      Element
//   */
// export function prepElementForDrag(dom: HTMLElement): void {
// 	// @todo: save current values
// 	// Define possible props
// 	let props = [
// 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
// 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
// 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
// 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
// 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
// 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
// 	];
// 	for (let i = 0; i < props.length; i++) {
// 		if (props[i] in dom.style) {
// 			setStyle(dom, props[i], "none");
// 		}
// 	}
// 	// Remove iOS-specific selection;
// 	setStyle(dom, "tapHighlightColor", "rgba(0, 0, 0, 0)");
// }
// /**
//  * Restores replaced styles
//  *
//  * @ignore
//  * @param  io  Element
//  */
// export function unprepElementForDrag(dom: HTMLElement): void {
// 	// Define possible props
// 	let props = [
// 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
// 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
// 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
// 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
// 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
// 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
// 	];
// 	for (let i = 0; i < props.length; i++) {
// 		if (props[i] in dom.style) {
// 			setStyle(dom, props[i], "");
// 		}
// 	}
// 	// Remove iOS-specific selection;
// 	setStyle(dom, "tapHighlightColor", "");
// }
function relativeToValue(percent, full) {
    if (_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(percent)) {
        return percent;
    }
    else if (percent != null && _Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(percent.value) && _Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(full)) {
        return full * percent.value;
    }
    else {
        return 0;
    }
}
/**
 * Returns number of decimals
 *
 * @ignore Exclude from docs
 * @param number  Input number
 * @return Number of decimals
 */
function decimalPlaces(number) {
    var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
        return 0;
    }
    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
/**
 * ============================================================================
 * STRING FORMATTING FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Pads a string with additional characters to certain length.
 *
 * @param value  A numeric value
 * @param len    Result string length in characters
 * @param char   A character to use for padding
 * @return Padded value as string
 */
function padString(value, len, char) {
    if (len === void 0) { len = 0; }
    if (char === void 0) { char = "0"; }
    if (typeof value !== "string") {
        value = value.toString();
    }
    return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
}
function trimLeft(text) {
    return text.replace(/^[\n \t]+/, "");
}
function trimRight(text) {
    return text.replace(/^[\n \t]+$/, "");
}
function trim(text) {
    return trimLeft(trimRight(text));
}
/**
 * Tries to determine format type.
 *
 * @ignore Exclude from docs
 * @param format  Format string
 * @return Format type ("string" | "number" | "date" | "duration")
 */
function getFormat(format) {
    // Undefined?
    if (typeof format === "undefined") {
        return "string";
    }
    // Cleanup and lowercase format
    format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
    // Remove style tags
    format = format.replace(/\[[^\]]+\]/, "");
    // Trim
    format = format.trim();
    // Check for any explicit format hints (i.e. /Date)
    var hints = format.match(/\/(date|number|duration)$/);
    if (hints) {
        return hints[1];
    }
    // Check for explicit hints
    if (format === "number") {
        return "number";
    }
    if (format === "date") {
        return "date";
    }
    if (format === "duration") {
        return "duration";
    }
    // Detect number formatting symbols
    if (format.match(/[#0]/)) {
        return "number";
    }
    // Detect date formatting symbols
    if (format.match(/[ymwdhnsqaxkzgtei]/)) {
        return "date";
    }
    // Nothing? Let's display as string
    return "string";
}
/**
 * Cleans up format:
 * * Strips out formatter hints
 *
 * @ignore Exclude from docs
 * @param format  Format
 * @return Cleaned format
 */
function cleanFormat(format) {
    return format.replace(/\/(date|number|duration)$/i, "");
}
/**
 * Strips all tags from the string.
 *
 * @param text  Source string
 * @return String without tags
 */
function stripTags(text) {
    return text ? text.replace(/<[^>]*>/g, "") : text;
}
/**
 * Removes new lines and tags from a string.
 *
 * @param text  String to conver
 * @return Converted string
 */
function plainText(text) {
    return text ? stripTags(("" + text).replace(/[\n\r]+/g, ". ")) : text;
}
/**
 * Escapes string so it can safely be used in a Regex.
 *
 * @param value  Unsescaped string
 * @return Escaped string
 */
function escapeForRgex(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
/**
 * ============================================================================
 * DATE-RELATED FUNCTIONS
 * ============================================================================
 * @hidden
 */
/**
 * Returns a year day.
 *
 * @param date  Date
 * @param utc   Assume UTC dates?
 * @return Year day
 * @todo Account for UTC
 */
function getYearDay(date, utc) {
    if (utc === void 0) { utc = false; }
    // TODO: utc needed?
    utc;
    var start = new Date(date.getFullYear(), 0, 0);
    var diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);
    var oneDay = 1000 * 60 * 60 * 24;
    return Math.floor(diff / oneDay);
}
/**
 * Returns week number for a given date.
 *
 * @param date  Date
 * @param utc   Assume UTC dates?
 * @return Week number
 * @todo Account for UTC
 */
function getWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var day = getYearDay(date, utc) - 1;
    var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);
    if (week === 0) {
        week = 53;
    }
    else if (week === 53) {
        week = 1;
    }
    return week;
}
/**
 * Returns a week number in the month.
 *
 * @param date  Source Date
 * @param utc   Assume UTC dates?
 * @return Week number in month
 */
function getMonthWeek(date, utc) {
    if (utc === void 0) { utc = false; }
    var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
    var currentWeek = getWeek(date, utc);
    if (currentWeek == 1) {
        currentWeek = 53;
    }
    return currentWeek - firstWeek + 1;
}
/**
 * Returns a year day out of the given week number.
 *
 * @param week     Week
 * @param year     Year
 * @param weekday  Weekday
 * @param utc      Assume UTC dates
 * @return Day in a year
 */
function getDayFromWeek(week, year, weekday, utc) {
    if (weekday === void 0) { weekday = 1; }
    if (utc === void 0) { utc = false; }
    var date = new Date(year, 0, 4, 0, 0, 0, 0);
    if (utc) {
        date.setUTCFullYear(year);
    }
    var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
    return day;
}
/**
 * Returns 12-hour representation out of the 24-hour hours.
 *
 * @param hours  24-hour number
 * @return 12-hour number
 */
function get12Hours(hours, base) {
    if (hours > 12) {
        hours -= 12;
    }
    else if (hours === 0) {
        hours = 12;
    }
    return base != null ? hours + (base - 1) : hours;
}
/**
 * Returns a string name of the tome zone.
 *
 * @param date     Date object
 * @param long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
 * @param savings  Include information if it's in daylight savings mode
 * @param utc      Assume UTC dates
 * @return Time zone name
 */
function getTimeZone(date, long, savings, utc) {
    if (long === void 0) { long = false; }
    if (savings === void 0) { savings = false; }
    if (utc === void 0) { utc = false; }
    if (utc) {
        return long ? "Coordinated Universal Time" : "UTC";
    }
    var wotz = date.toLocaleString("UTC");
    var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
    //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
    if (savings === false) {
        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
    }
    return wtz;
}
function capitalizeFirst(text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
}
/**
 * The functions below are taken and adapted from Garry Tan's blog post:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * The further attributions go mjijackson.com, which now seems to be defunct.
 */
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param h       The hue
 * @param s       The saturation
 * @param l       The lightness
 * @return The RGB representation
 */
function hslToRgb(color) {
    var r, g, b;
    var h = color.h;
    var s = color.s;
    var l = color.l;
    if (s == 0) {
        r = g = b = l; // achromatic
    }
    else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
    };
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * Function adapted from:
 * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 *
 * @ignore Exclude from docs
 * @param r       The red color value
 * @param g       The green color value
 * @param b       The blue color value
 * @return The HSL representation
 */
function rgbToHsl(color) {
    var r = color.r / 255;
    var g = color.g / 255;
    var b = color.b / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
/**
 * Returns a color that is `percent` brighter than the reference color.
 *
 * @ignore Exclude from docs
 * @param color    Reference color
 * @param percent  Brightness percent
 * @return Hex code of the new color
 */
function lighten(rgb, percent) {
    if (rgb) {
        return {
            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Gets lightness step.
 *
 * @ignore Exclude from docs
 * @param value    Value
 * @param percent  Percent
 * @return Step
 */
function getLightnessStep(value, percent) {
    var base = percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns a color that is `percent` brighter than the source `color`.
 *
 * @ignore Exclude from docs
 * @param color    Source color
 * @param percent  Brightness percent
 * @return New color
 */
function brighten(rgb, percent) {
    if (rgb) {
        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
        //let base = Math.max(rgb.r, rgb.g, rgb.b);
        var step = getLightnessStep(base, percent);
        return {
            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
            a: rgb.a
        };
    }
    else {
        // TODO is this correct ?
        return rgb;
    }
}
;
/**
 * Returns brightness step.
 *
 * @ignore Exclude from docs
 * @param value    Value
 * @param percent  Percent
 * @return Step
 */
function getBrightnessStep(_value, percent) {
    var base = 255; //percent > 0 ? 255 - value : value;
    return Math.round(base * percent);
}
/**
 * Returns `true` if color is "light". Useful indetermining which contrasting
 * color to use for elements over this color. E.g.: you would want to use
 * black text over light background, and vice versa.
 *
 * @ignore Exclude from docs
 * @param color  Source color
 * @return Light?
 */
function isLight(color) {
    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;
}
/**
 * Returns a new [[iRGB]] object based on `rgb` parameter with specific
 * saturation applied.
 *
 * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
 * saturated).
 *
 * @ignore Exclude from docs
 * @param color       Base color
 * @param saturation  Saturation (0-1)
 * @return New color
 */
function saturate(rgb, saturation) {
    if (rgb === undefined || saturation == 1) {
        return rgb;
    }
    var hsl = rgbToHsl(rgb);
    hsl.s = saturation;
    return hslToRgb(hsl);
}
function alternativeColor(color, lightAlternative, darkAlternative) {
    if (lightAlternative === void 0) { lightAlternative = { r: 255, g: 255, b: 255 }; }
    if (darkAlternative === void 0) { darkAlternative = { r: 255, g: 255, b: 255 }; }
    var light = lightAlternative;
    var dark = darkAlternative;
    if (isLight(darkAlternative)) {
        light = darkAlternative;
        dark = lightAlternative;
    }
    return isLight(color) ? dark : light;
}
/**
 * @ignore
 * @deprecated
 */
// export function unshiftThemeClass(settings: any, themeClass: string) {
// 	let themeClasses = settings.themeClasses;
// 	if (!themeClasses) {
// 		themeClasses = [];
// 	}
// 	themeClasses.unshift(themeClass);
// 	settings.themeClasses = themeClasses;
// }
/**
 * @ignore
 * @deprecated
 */
// export function pushThemeClass(settings: any, themeClass: string) {
// 	let themeClasses = settings.themeClasses;
// 	if (!themeClasses) {
// 		themeClasses = [];
// 	}
// 	themeClasses.push(themeClass);
// 	settings.themeClasses = themeClasses;
// }
/**
 * @ignore
 */
function mergeTags(tags1, tags2) {
    if (!tags1) {
        tags1 = [];
    }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(tags1)), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(tags2)).filter(function (value, index, self) {
        return self.indexOf(value) === index;
    });
}
/**
 * @ignore
 */
function sameBounds(a, b) {
    if (!b) {
        return false;
    }
    if (a.left != b.left) {
        return false;
    }
    if (a.right != b.right) {
        return false;
    }
    if (a.top != b.top) {
        return false;
    }
    if (a.bottom != b.bottom) {
        return false;
    }
    return true;
}
//# sourceMappingURL=Utils.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/themes/AnimatedTheme.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/themes/AnimatedTheme.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimatedTheme": () => (/* binding */ AnimatedTheme)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_Theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/Theme */ "./node_modules/@amcharts/amcharts5/.internal/core/Theme.js");


/**
 * @ignore
 */
var AnimatedTheme = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AnimatedTheme, _super);
    function AnimatedTheme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnimatedTheme.prototype, "setupDefaultRules", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.setupDefaultRules.call(this);
            this.rule("Component").setAll({
                interpolationDuration: 600
            });
            this.rule("Hierarchy").set("animationDuration", 600);
            this.rule("Scrollbar").set("animationDuration", 600);
            this.rule("Tooltip").set("animationDuration", 300);
            this.rule("MapChart").set("animationDuration", 1000);
            this.rule("MapChart").set("wheelDuration", 300);
            this.rule("Entity").setAll({
                stateAnimationDuration: 600
            });
            this.rule("Sprite").states.create("default", { stateAnimationDuration: 600 });
            this.rule("Tooltip", ["axis"]).setAll({
                animationDuration: 200
            });
            this.rule("WordCloud").set("animationDuration", 500);
        }
    });
    return AnimatedTheme;
}(_core_Theme__WEBPACK_IMPORTED_MODULE_1__.Theme));

//# sourceMappingURL=AnimatedTheme.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setColor": () => (/* binding */ setColor),
/* harmony export */   "DefaultTheme": () => (/* binding */ DefaultTheme)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _core_Theme__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/Theme */ "./node_modules/@amcharts/amcharts5/.internal/core/Theme.js");
/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/util/Percent */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js");
/* harmony import */ var _core_util_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/util/Color */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _core_render_GridLayout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/render/GridLayout */ "./node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js");
/* harmony import */ var _core_util_Ease__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/util/Ease */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js");






/**
 * @ignore
 */
function setColor(rule, key, ic, name) {
    // TODO this shouldn't use get, figure out a better way
    rule.set(key, ic.get(name));
    ic.on(name, function (value) {
        rule.set(key, value);
    });
}
/**
 * @ignore
 */
var DefaultTheme = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(DefaultTheme, _super);
    function DefaultTheme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DefaultTheme.prototype, "setupDefaultRules", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.setupDefaultRules.call(this);
            var language = this._root.language;
            var ic = this._root.interfaceColors;
            var horizontalLayout = this._root.horizontalLayout;
            var verticalLayout = this._root.verticalLayout;
            var r = this.rule.bind(this);
            /**
             * ========================================================================
             * core
             * ========================================================================
             */
            r("InterfaceColors").setAll({
                stroke: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xe5e5e5),
                fill: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xf3f3f3),
                primaryButton: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x6794dc),
                primaryButtonHover: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x6771dc),
                primaryButtonDown: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x68dc76),
                primaryButtonActive: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x68dc76),
                primaryButtonText: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff),
                primaryButtonStroke: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff),
                secondaryButton: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xd9d9d9),
                secondaryButtonHover: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xa3a3a3),
                secondaryButtonDown: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x8d8d8d),
                secondaryButtonActive: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xe6e6e6),
                secondaryButtonText: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x000000),
                secondaryButtonStroke: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff),
                grid: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x000000),
                background: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff),
                alternativeBackground: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x000000),
                text: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x000000),
                alternativeText: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff),
                disabled: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xadadad),
                positive: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x50b300),
                negative: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xb30000)
            });
            {
                var rule = r("ColorSet");
                rule.setAll({
                    passOptions: {
                        hue: 0.05,
                        saturation: 0,
                        lightness: 0
                    },
                    colors: [
                        _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0x67b7dc)
                    ],
                    step: 1,
                    //baseColor: Color.fromRGB(103, 183, 220),
                    //count: 20,
                    reuse: false,
                    startIndex: 0
                });
                rule.setPrivate("currentStep", 0);
                rule.setPrivate("currentPass", 0);
            }
            r("Entity").setAll({
                stateAnimationDuration: 0,
                stateAnimationEasing: _core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.out(_core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.cubic)
            });
            r("Component").setAll({
                interpolationDuration: 0,
                interpolationEasing: _core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.out(_core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.cubic)
            });
            r("Sprite").setAll({
                visible: true,
                scale: 1,
                opacity: 1,
                rotation: 0,
                position: "relative",
                tooltipX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                tooltipY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                tooltipPosition: "fixed",
                isMeasured: true
            });
            r("Sprite").states.create("default", { "visible": true, opacity: 1 });
            r("Container").setAll({
                interactiveChildren: true,
                setStateOnChildren: false
            });
            r("Graphics").setAll({
                strokeWidth: 1
            });
            r("Chart").setAll({
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            /**
             * ------------------------------------------------------------------------
             * core: alignment
             * ------------------------------------------------------------------------
             */
            r("Sprite", ["horizontal", "center"]).setAll({
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50
            });
            r("Sprite", ["vertical", "center"]).setAll({
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50
            });
            r("Container", ["horizontal", "layout"]).setAll({
                layout: horizontalLayout
            });
            r("Container", ["vertical", "layout"]).setAll({
                layout: verticalLayout
            });
            /**
             * ------------------------------------------------------------------------
             * core: patterns
             * ------------------------------------------------------------------------
             */
            r("Pattern").setAll({
                repetition: "repeat",
                width: 50,
                height: 50,
                rotation: 0,
                fillOpacity: 1
            });
            r("LinePattern").setAll({
                gap: 6,
                colorOpacity: 1,
                width: 49,
                height: 49
            });
            r("RectanglePattern").setAll({
                gap: 6,
                checkered: false,
                centered: true,
                maxWidth: 5,
                maxHeight: 5,
                width: 48,
                height: 48,
                strokeWidth: 0
            });
            r("CirclePattern").setAll({
                gap: 5,
                checkered: false,
                centered: false,
                radius: 3,
                strokeWidth: 0,
                width: 45,
                height: 45
            });
            /**
             * ------------------------------------------------------------------------
             * core: gradients
             * ------------------------------------------------------------------------
             */
            r("LinearGradient").setAll({
                rotation: 90
            });
            /**
             * ------------------------------------------------------------------------
             * core: Legend
             * ------------------------------------------------------------------------
             */
            r("Legend").setAll({
                fillField: "fill",
                strokeField: "stroke",
                nameField: "name",
                layout: _core_render_GridLayout__WEBPACK_IMPORTED_MODULE_4__.GridLayout["new"](this._root, {}),
                layer: 30
            });
            // Class: Container
            r("Container", ["legend", "item", "itemcontainer"]).setAll({
                toggleKey: "disabled",
                paddingLeft: 5,
                paddingRight: 5,
                paddingBottom: 5,
                paddingTop: 5,
                layout: horizontalLayout,
                setStateOnChildren: true,
                interactiveChildren: false,
                ariaChecked: true,
                focusable: true,
                cursorOverStyle: "pointer",
                ariaLabel: language.translate("Press ENTER to toggle")
            });
            {
                var rule = r("Rectangle", ["legend", "item", "background"]);
                rule.setAll({
                    fillOpacity: 0,
                });
                setColor(rule, "fill", ic, "background");
            }
            r("Container", ["legend", "marker"]).setAll({
                setStateOnChildren: true,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                paddingLeft: 0,
                paddingRight: 0,
                paddingBottom: 0,
                paddingTop: 0,
                width: 18,
                height: 18
            });
            r("RoundedRectangle", ["legend", "marker", "rectangle"]).setAll({
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                cornerRadiusBL: 3,
                cornerRadiusTL: 3,
                cornerRadiusBR: 3,
                cornerRadiusTR: 3
            });
            {
                var rule = r("RoundedRectangle", ["legend", "marker", "rectangle"]).states.create("disabled", {});
                setColor(rule, "fill", ic, "disabled");
                setColor(rule, "stroke", ic, "disabled");
            }
            r("Label", ["legend", "label"]).setAll({
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                marginLeft: 5,
                paddingRight: 0,
                paddingLeft: 0,
                paddingTop: 0,
                paddingBottom: 0,
                populateText: true
            });
            {
                var rule = r("Label", ["legend", "label"]).states.create("disabled", {});
                setColor(rule, "fill", ic, "disabled");
            }
            r("Label", ["legend", "value", "label"]).setAll({
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                marginLeft: 5,
                paddingRight: 0,
                paddingLeft: 0,
                paddingTop: 0,
                paddingBottom: 0,
                width: 50,
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                populateText: true
            });
            {
                var rule = r("Label", ["legend", "value", "label"]).states.create("disabled", {});
                setColor(rule, "fill", ic, "disabled");
            }
            /**
             * ------------------------------------------------------------------------
             * core: HeatLegend
             * ------------------------------------------------------------------------
             */
            r("HeatLegend").setAll({
                stepCount: 1
            });
            r("RoundedRectangle", ["heatlegend", "marker"]).setAll({
                cornerRadiusTR: 0,
                cornerRadiusBR: 0,
                cornerRadiusTL: 0,
                cornerRadiusBL: 0
            });
            r("RoundedRectangle", ["vertical", "heatlegend", "marker"]).setAll({
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                width: 15
            });
            r("RoundedRectangle", ["horizontal", "heatlegend", "marker"]).setAll({
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                height: 15
            });
            r("HeatLegend", ["vertical"]).setAll({
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("HeatLegend", ["horizontal"]).setAll({
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("Label", ["heatlegend", "start"]).setAll({
                paddingLeft: 5,
                paddingRight: 5,
                paddingTop: 5,
                paddingBottom: 5
            });
            r("Label", ["heatlegend", "end"]).setAll({
                paddingLeft: 5,
                paddingRight: 5,
                paddingTop: 5,
                paddingBottom: 5
            });
            /**
             * ------------------------------------------------------------------------
             * core: Labels
             * ------------------------------------------------------------------------
             */
            {
                var rule = r("Label");
                rule.setAll({
                    paddingTop: 8,
                    paddingBottom: 8,
                    paddingLeft: 10,
                    paddingRight: 10,
                    fontFamily: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
                    fontSize: "1em",
                    populateText: false
                });
                setColor(rule, "fill", ic, "text");
            }
            r("RadialLabel").setAll({
                textType: "regular",
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                inside: false,
                radius: 0,
                orientation: "auto",
                textAlign: "center"
            });
            /**
             * ------------------------------------------------------------------------
             * core: Elements and shapes
             * ------------------------------------------------------------------------
             */
            r("RoundedRectangle").setAll({
                cornerRadiusTL: 8,
                cornerRadiusBL: 8,
                cornerRadiusTR: 8,
                cornerRadiusBR: 8
            });
            r("PointedRectangle").setAll({
                pointerBaseWidth: 15,
                pointerLength: 10,
                cornerRadius: 8
            });
            r("Slice").setAll({
                shiftRadius: 0,
                dRadius: 0,
                dInnerRadius: 0
            });
            {
                var rule = r("Tick");
                rule.setAll({
                    strokeOpacity: .15,
                    isMeasured: false,
                    length: 5,
                    position: "absolute"
                });
                setColor(rule, "stroke", ic, "grid");
            }
            r("Bullet").setAll({
                locationX: 0.5,
                locationY: 0.5
            });
            /**
             * ------------------------------------------------------------------------
             * core: Tooltip
             * ------------------------------------------------------------------------
             */
            r("Tooltip").setAll({
                position: "absolute",
                getFillFromSprite: true,
                getStrokeFromSprite: false,
                autoTextColor: true,
                paddingTop: 9,
                paddingBottom: 8,
                paddingLeft: 10,
                paddingRight: 10,
                marginBottom: 5,
                pointerOrientation: "vertical",
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                animationEasing: _core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.out(_core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.cubic),
                exportable: false
                //layer: 100
            });
            {
                var rule = r("PointedRectangle", ["tooltip", "background"]);
                rule.setAll({
                    strokeOpacity: 0.9,
                    cornerRadius: 4,
                    pointerLength: 4,
                    pointerBaseWidth: 8,
                    fillOpacity: 0.9,
                    stroke: _core_util_Color__WEBPACK_IMPORTED_MODULE_1__.Color.fromHex(0xffffff)
                });
            }
            {
                var rule = r("Label", ["tooltip"]);
                rule.setAll({
                    role: "tooltip",
                    populateText: true,
                    paddingRight: 0,
                    paddingTop: 0,
                    paddingLeft: 0,
                    paddingBottom: 0
                });
                setColor(rule, "fill", ic, "alternativeText");
            }
            /**
             * ------------------------------------------------------------------------
             * core: Button
             * ------------------------------------------------------------------------
             */
            r("Button").setAll({
                paddingTop: 8,
                paddingBottom: 8,
                paddingLeft: 10,
                paddingRight: 10,
                interactive: true,
                layout: horizontalLayout,
                interactiveChildren: false,
                setStateOnChildren: true,
                focusable: true
            });
            r("Button").states.create("hover", {});
            r("Button").states.create("down", { stateAnimationDuration: 0 });
            r("Button").states.create("active", {});
            {
                var rule = r("RoundedRectangle", ["button", "background"]);
                setColor(rule, "fill", ic, "primaryButton");
                setColor(rule, "stroke", ic, "primaryButtonStroke");
            }
            {
                var rule = r("RoundedRectangle", ["button", "background"]).states.create("hover", {});
                setColor(rule, "fill", ic, "primaryButtonHover");
            }
            {
                var rule = r("RoundedRectangle", ["button", "background"]).states.create("down", { stateAnimationDuration: 0 });
                setColor(rule, "fill", ic, "primaryButtonDown");
            }
            {
                var rule = r("RoundedRectangle", ["button", "background"]).states.create("active", {});
                setColor(rule, "fill", ic, "primaryButtonActive");
            }
            {
                var rule = r("Graphics", ["button", "icon"]);
                setColor(rule, "stroke", ic, "primaryButtonText");
            }
            {
                var rule = r("Label", ["button"]);
                setColor(rule, "fill", ic, "primaryButtonText");
            }
            /**
             * ------------------------------------------------------------------------
             * charts/xy: ZoomOutButton
             * ------------------------------------------------------------------------
             */
            r("Button", ["zoom"]).setAll({
                paddingTop: 18,
                paddingBottom: 18,
                paddingLeft: 12,
                paddingRight: 12,
                centerX: 46,
                centerY: -10,
                y: 0,
                x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                role: "button",
                ariaLabel: language.translate("Zoom Out"),
                layer: 40
            });
            {
                var rule = r("RoundedRectangle", ["background", "button", "zoom"]);
                rule.setAll({
                    cornerRadiusBL: 40,
                    cornerRadiusBR: 40,
                    cornerRadiusTL: 40,
                    cornerRadiusTR: 40
                });
                setColor(rule, "fill", ic, "primaryButton");
            }
            {
                var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("hover", {});
                setColor(rule, "fill", ic, "primaryButtonHover");
            }
            {
                var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("down", { stateAnimationDuration: 0 });
                setColor(rule, "fill", ic, "primaryButtonDown");
            }
            {
                var rule = r("Graphics", ["icon", "button", "zoom"]);
                rule.setAll({
                    strokeOpacity: 0.7,
                    draw: function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(12, 0);
                    }
                });
                setColor(rule, "stroke", ic, "primaryButtonText");
            }
            /**
             * ------------------------------------------------------------------------
             * core: ResizeButton
             * ------------------------------------------------------------------------
             */
            r("Button", ["resize"]).setAll({
                paddingTop: 9,
                paddingBottom: 9,
                paddingLeft: 13,
                paddingRight: 13,
                draggable: true,
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                position: "absolute",
                role: "slider",
                ariaLabel: language.translate("Use up and down arrows to move selection")
            });
            {
                var rule = r("RoundedRectangle", ["background", "resize", "button"]);
                rule.setAll({
                    cornerRadiusBL: 40,
                    cornerRadiusBR: 40,
                    cornerRadiusTL: 40,
                    cornerRadiusTR: 40
                });
                setColor(rule, "fill", ic, "secondaryButton");
            }
            {
                var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("hover", {});
                setColor(rule, "fill", ic, "secondaryButtonHover");
            }
            {
                var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("down", { stateAnimationDuration: 0 });
                setColor(rule, "fill", ic, "secondaryButtonDown");
            }
            {
                var rule = r("Graphics", ["resize", "button", "icon"]);
                rule.setAll({
                    strokeOpacity: 0.7,
                    draw: function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(0, 12);
                        display.moveTo(4, 0);
                        display.lineTo(4, 12);
                    }
                });
                setColor(rule, "stroke", ic, "secondaryButtonText");
            }
            r("Button", ["resize", "vertical"]).setAll({
                rotation: 90,
                cursorOverStyle: "ns-resize"
            });
            r("Button", ["resize", "horizontal"]).setAll({
                cursorOverStyle: "ew-resize"
            });
            /**
             * ------------------------------------------------------------------------
             * core: PlayButton
             * ------------------------------------------------------------------------
             */
            r("Button", ["play"]).setAll({
                paddingTop: 13,
                paddingBottom: 13,
                paddingLeft: 14,
                paddingRight: 14,
                ariaLabel: language.translate("Play"),
                toggleKey: "active"
            });
            {
                var rule = r("RoundedRectangle", ["play", "background"]);
                rule.setAll({
                    strokeOpacity: 0.5,
                    cornerRadiusBL: 100,
                    cornerRadiusBR: 100,
                    cornerRadiusTL: 100,
                    cornerRadiusTR: 100
                });
                setColor(rule, "fill", ic, "primaryButton");
            }
            {
                var rule = r("Graphics", ["play", "icon"]);
                rule.setAll({
                    stateAnimationDuration: 0,
                    dx: 1,
                    draw: function (display) {
                        display.moveTo(0, -5);
                        display.lineTo(8, 0);
                        display.lineTo(0, 5);
                        display.lineTo(0, -5);
                    }
                });
                setColor(rule, "fill", ic, "primaryButtonText");
            }
            r("Graphics", ["play", "icon"]).states.create("default", {
                stateAnimationDuration: 0
            });
            r("Graphics", ["play", "icon"]).states.create("active", {
                stateAnimationDuration: 0,
                draw: function (display) {
                    display.moveTo(-4, -5);
                    display.lineTo(-1, -5);
                    display.lineTo(-1, 5);
                    display.lineTo(-4, 5);
                    display.lineTo(-4, -5);
                    display.moveTo(4, -5);
                    display.lineTo(1, -5);
                    display.lineTo(1, 5);
                    display.lineTo(4, 5);
                    display.lineTo(4, -5);
                }
            });
            /**
             * ------------------------------------------------------------------------
             * core: SwitchButton
             * ------------------------------------------------------------------------
             */
            r("Button", ["switch"]).setAll({
                paddingTop: 4,
                paddingBottom: 4,
                paddingLeft: 4,
                paddingRight: 4,
                ariaLabel: language.translate("Press ENTER to toggle"),
                toggleKey: "active",
                width: 40,
                height: 24,
                layout: null
            });
            {
                var rule = r("RoundedRectangle", ["switch", "background"]);
                rule.setAll({
                    strokeOpacity: 0.5,
                    cornerRadiusBL: 100,
                    cornerRadiusBR: 100,
                    cornerRadiusTL: 100,
                    cornerRadiusTR: 100
                });
                setColor(rule, "fill", ic, "primaryButton");
            }
            {
                var rule = r("Circle", ["switch", "icon"]);
                rule.setAll({
                    radius: 8,
                    centerY: 0,
                    centerX: 0,
                    dx: 0
                });
                setColor(rule, "fill", ic, "primaryButtonText");
            }
            r("Graphics", ["switch", "icon"]).states.create("active", {
                dx: 16
            });
            /**
             * ------------------------------------------------------------------------
             * core: Scrollbar
             * ------------------------------------------------------------------------
             */
            r("Scrollbar").setAll({
                start: 0,
                end: 1,
                layer: 40,
                animationEasing: _core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.out(_core_util_Ease__WEBPACK_IMPORTED_MODULE_2__.cubic)
            });
            r("Scrollbar", ["vertical"]).setAll({
                marginRight: 13,
                marginLeft: 13,
                minWidth: 12,
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            r("Scrollbar", ["horizontal"]).setAll({
                marginTop: 13,
                marginBottom: 13,
                minHeight: 12,
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100
            });
            this.rule("Button", ["scrollbar"]).setAll({
                exportable: false
            });
            {
                var rule = r("RoundedRectangle", ["scrollbar", "main", "background"]);
                rule.setAll({
                    cornerRadiusTL: 8,
                    cornerRadiusBL: 8,
                    cornerRadiusTR: 8,
                    cornerRadiusBR: 8,
                    fillOpacity: 0.8,
                });
                setColor(rule, "fill", ic, "fill");
            }
            {
                var rule = r("RoundedRectangle", ["scrollbar", "thumb"]);
                rule.setAll({
                    role: "slider",
                    ariaLive: "polite",
                    position: "absolute",
                    draggable: true
                });
                setColor(rule, "fill", ic, "secondaryButton");
            }
            {
                var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("hover", {});
                setColor(rule, "fill", ic, "secondaryButtonHover");
            }
            {
                var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("down", { stateAnimationDuration: 0 });
                setColor(rule, "fill", ic, "secondaryButtonDown");
            }
            r("RoundedRectangle", ["scrollbar", "thumb", "vertical"]).setAll({
                x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                ariaLabel: language.translate("Use up and down arrows to move selection")
            });
            r("RoundedRectangle", ["scrollbar", "thumb", "horizontal"]).setAll({
                y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p50,
                height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,
                ariaLabel: language.translate("Use left and right arrows to move selection")
            });
            // @todo: is this needed? used to be "ContentScrollbar"
            // r("Scrollbar", ["content?"]).setAll({
            // 	marginRight: 0,
            // 	marginLeft: 5,
            // 	layer: 5
            // });
            /**
             * ========================================================================
             * charts/xy
             * ========================================================================
             *
             * This needs to be in DefaultTheme because it's the only theme that is
             * automatically applied to Root, and tooltips different ancestors
             * than actual charts using them.
             */
            {
                var rule = r("PointedRectangle", ["axis", "tooltip", "background"]);
                rule.setAll({
                    cornerRadius: 0
                });
                setColor(rule, "fill", ic, "alternativeBackground");
            }
            r("Label", ["axis", "tooltip"]).setAll({
                role: undefined
            });
            r("Label", ["axis", "tooltip", "y"]).setAll({
                textAlign: "right"
            });
            r("Label", ["axis", "tooltip", "y", "opposite"]).setAll({
                textAlign: "left"
            });
            r("Label", ["axis", "tooltip", "x"]).setAll({
                textAlign: "center"
            });
            r("Tooltip", ["categoryaxis"]).setAll({
                labelText: "{category}"
            });
            /**
             * ------------------------------------------------------------------------
             * Shapes
             * ------------------------------------------------------------------------
             */
            // Class: Graphics
            r("Star").setAll({
                spikes: 5,
                innerRadius: 5,
                radius: 10
            });
        }
    });
    return DefaultTheme;
}(_core_Theme__WEBPACK_IMPORTED_MODULE_5__.Theme));

//# sourceMappingURL=DefaultTheme.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/locales/en.js":
/*!********************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/locales/en.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * amCharts 5 locale
 *
 * Locale: en
 * Language: International English
 * Author: Martynas Majeris
 *
 * Follow instructions in [on this page](https://www.amcharts.com/docs/v5/tutorials/creating-translations/) to make corrections or add new translations.
 *
 * ---
 * Edit but leave the header section above this line. You can remove any
 * subsequent comment sections.
 * ---
 *
 * Use this file as a template to create translations. Leave the key part in
 * English intact. Fill the value with a translation.
 *
 * Empty string means no translation, so default "International English"
 * will be used.
 *
 * If you need the translation to literally be an empty string, use `null`
 * instead.
 *
 * IMPORTANT:
 * When translating make good effort to keep the translation length
 * at least the same chartcount as the English, especially for short prompts.
 *
 * Having significantly longer prompts may distort the actual charts.
 *
 * NOTE:
 * Some prompts - like months or weekdays - come in two versions: full and
 * shortened.
 *
 * If there's no official shortened version of these in your language, and it
 * would not be possible to invent such short versions that don't seem weird
 * to native speakers of that language, fill those with the same as full
 * version.
 *
 * PLACEHOLDERS:
 * Some prompts have placeholders like "%1". Those will be replaced by actual
 * values during translation and should be retained in the translated prompts.
 *
 * Placeholder positions may be changed to better suit structure of the
 * sentence.
 *
 * For example "From %1 to %2", when actually used will replace "%1" with an
 * actual value representing range start, and "%2" will be replaced by end
 * value.
 *
 * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
 * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
 * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
 * places where they will make sense.
 *
 * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    "firstDayOfWeek": 1,
    // Number formatting options.
    // 
    // Please check with the local standards which separator is accepted to be
    // used for separating decimals, and which for thousands.
    "_decimalSeparator": ".",
    "_thousandSeparator": ",",
    // Suffixes for numbers
    // When formatting numbers, big or small numers might be reformatted to
    // shorter version, by applying a suffix.
    // 
    // For example, 1000000 might become "1m".
    // Or 1024 might become "1KB" if we're formatting byte numbers.
    // 
    // This section defines such suffixes for all such cases.
    "_big_number_suffix_3": "k",
    "_big_number_suffix_6": "M",
    "_big_number_suffix_9": "G",
    "_big_number_suffix_12": "T",
    "_big_number_suffix_15": "P",
    "_big_number_suffix_18": "E",
    "_big_number_suffix_21": "Z",
    "_big_number_suffix_24": "Y",
    "_small_number_suffix_3": "m",
    "_small_number_suffix_6": "μ",
    "_small_number_suffix_9": "n",
    "_small_number_suffix_12": "p",
    "_small_number_suffix_15": "f",
    "_small_number_suffix_18": "a",
    "_small_number_suffix_21": "z",
    "_small_number_suffix_24": "y",
    "_byte_suffix_B": "B",
    "_byte_suffix_KB": "KB",
    "_byte_suffix_MB": "MB",
    "_byte_suffix_GB": "GB",
    "_byte_suffix_TB": "TB",
    "_byte_suffix_PB": "PB",
    // Default date formats for various periods.
    // 
    // This should reflect official or de facto formatting universally accepted
    // in the country translation is being made for
    // Available format codes here:
    // https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#Format_codes
    // 
    // This will be used when formatting date/time for particular granularity,
    // e.g. "_date_hour" will be shown whenever we need to show time as hours.
    // 
    // "date" is used as in default date format when showing standalone dates.
    "_date": "yyyy-MM-dd",
    "_date_millisecond": "mm:ss SSS",
    "_date_second": "HH:mm:ss",
    "_date_minute": "HH:mm",
    "_date_hour": "HH:mm",
    "_date_day": "MMM dd",
    "_date_week": "ww",
    "_date_month": "MMM",
    "_date_year": "yyyy",
    // Default duration formats for various base units.
    // 
    // This will be used by DurationFormatter to format numeric values into
    // duration.
    // 
    // Notice how each duration unit comes in several versions. This is to ensure
    // that each base unit is shown correctly.
    // 
    // For example, if we have baseUnit set to "second", meaning our duration is
    // in seconds.
    // 
    // If we pass in `50` to formatter, it will know that we have just 50 seconds
    // (less than a minute) so it will use format in `"_duration_second"` ("ss"),
    // and the formatted result will be in like `"50"`.
    // 
    // If we pass in `70`, which is more than a minute, the formatter will switch
    // to `"_duration_second_minute"` ("mm:ss"), resulting in "01:10" formatted
    // text.
    // 
    // Available codes here:
    // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes
    "_duration_millisecond": "SSS",
    "_duration_millisecond_second": "ss.SSS",
    "_duration_millisecond_minute": "mm:ss SSS",
    "_duration_millisecond_hour": "hh:mm:ss SSS",
    "_duration_millisecond_day": "d'd' mm:ss SSS",
    "_duration_millisecond_week": "d'd' mm:ss SSS",
    "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
    "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
    "_duration_second": "ss",
    "_duration_second_minute": "mm:ss",
    "_duration_second_hour": "hh:mm:ss",
    "_duration_second_day": "d'd' hh:mm:ss",
    "_duration_second_week": "d'd' hh:mm:ss",
    "_duration_second_month": "M'm' dd'd' hh:mm:ss",
    "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
    "_duration_minute": "mm",
    "_duration_minute_hour": "hh:mm",
    "_duration_minute_day": "d'd' hh:mm",
    "_duration_minute_week": "d'd' hh:mm",
    "_duration_minute_month": "M'm' dd'd' hh:mm",
    "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
    "_duration_hour": "hh'h'",
    "_duration_hour_day": "d'd' hh'h'",
    "_duration_hour_week": "d'd' hh'h'",
    "_duration_hour_month": "M'm' dd'd' hh'h'",
    "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
    "_duration_day": "d'd'",
    "_duration_day_week": "d'd'",
    "_duration_day_month": "M'm' dd'd'",
    "_duration_day_year": "y'y' MM'm' dd'd'",
    "_duration_week": "w'w'",
    "_duration_week_month": "w'w'",
    "_duration_week_year": "w'w'",
    "_duration_month": "M'm'",
    "_duration_month_year": "y'y' MM'm'",
    "_duration_year": "y'y'",
    // Era translations
    "_era_ad": "AD",
    "_era_bc": "BC",
    // Day part, used in 12-hour formats, e.g. 5 P.M.
    // Please note that these come in 3 variants:
    // * one letter (e.g. "A")
    // * two letters (e.g. "AM")
    // * two letters with dots (e.g. "A.M.")
    // 
    // All three need to to be translated even if they are all the same. Some
    // users might use one, some the other.
    "A": "",
    "P": "",
    "AM": "",
    "PM": "",
    "A.M.": "",
    "P.M.": "",
    // Date-related stuff.
    // 
    // When translating months, if there's a difference, use the form which is
    // best for a full date, e.g. as you would use it in "2018 January 1".
    // 
    // Note that May is listed twice. This is because in English May is the same
    // in both long and short forms, while in other languages it may not be the
    // case. Translate "May" to full word, while "May(short)" to shortened
    // version.
    // 
    // Should month names and weekdays be capitalized or not?
    // 
    // Rule of thumb is this: if the names should always be capitalized,
    // regardless of name position within date ("January", "21st January 2018",
    // etc.) use capitalized names. Otherwise enter all lowercase.
    // 
    // The date formatter will automatically capitalize names if they are the
    // first (or only) word in resulting date.
    "January": "",
    "February": "",
    "March": "",
    "April": "",
    "May": "",
    "June": "",
    "July": "",
    "August": "",
    "September": "",
    "October": "",
    "November": "",
    "December": "",
    "Jan": "",
    "Feb": "",
    "Mar": "",
    "Apr": "",
    "May(short)": "May",
    "Jun": "",
    "Jul": "",
    "Aug": "",
    "Sep": "",
    "Oct": "",
    "Nov": "",
    "Dec": "",
    // Weekdays.
    "Sunday": "",
    "Monday": "",
    "Tuesday": "",
    "Wednesday": "",
    "Thursday": "",
    "Friday": "",
    "Saturday": "",
    "Sun": "",
    "Mon": "",
    "Tue": "",
    "Wed": "",
    "Thu": "",
    "Fri": "",
    "Sat": "",
    // Date ordinal function.
    // 
    // This is used when adding number ordinal when formatting days in dates.
    // 
    // E.g. "January 1st", "February 2nd".
    // 
    // The function accepts day number, and returns a string to be added to the
    // day, like in default English translation, if we pass in 2, we will receive
    // "nd" back.
    "_dateOrd": function (day) {
        var res = "th";
        if ((day < 11) || (day > 13)) {
            switch (day % 10) {
                case 1:
                    res = "st";
                    break;
                case 2:
                    res = "nd";
                    break;
                case 3:
                    res = "rd";
                    break;
            }
        }
        return res;
    },
    // Various chart controls.
    // Shown as a tooltip on zoom out button.
    "Zoom Out": "",
    // Timeline buttons
    "Play": "",
    "Stop": "",
    // Chart's Legend screen reader title.
    "Legend": "",
    // Legend's item screen reader indicator.
    "Press ENTER to toggle": "",
    // Shown when the chart is busy loading something.
    "Loading": "",
    // Shown as the first button in the breadcrumb navigation, e.g.:
    // Home > First level > ...
    "Home": "",
    // Chart types.
    // Those are used as default screen reader titles for the main chart element
    // unless developer has set some more descriptive title.
    "Chart": "",
    "Serial chart": "",
    "X/Y chart": "",
    "Pie chart": "",
    "Gauge chart": "",
    "Radar chart": "",
    "Sankey diagram": "",
    "Flow diagram": "",
    "Chord diagram": "",
    "TreeMap chart": "",
    "Force directed tree": "",
    "Sliced chart": "",
    // Series types.
    // Used to name series by type for screen readers if they do not have their
    // name set.
    "Series": "",
    "Candlestick Series": "",
    "OHLC Series": "",
    "Column Series": "",
    "Line Series": "",
    "Pie Slice Series": "",
    "Funnel Series": "",
    "Pyramid Series": "",
    "X/Y Series": "",
    // Map-related stuff.
    "Map": "",
    "Press ENTER to zoom in": "",
    "Press ENTER to zoom out": "",
    "Use arrow keys to zoom in and out": "",
    "Use plus and minus keys on your keyboard to zoom in and out": "",
    // Export-related stuff.
    // These prompts are used in Export menu labels.
    // 
    // "Export" is the top-level menu item.
    // 
    // "Image", "Data", "Print" as second-level indicating type of export
    // operation.
    // 
    // Leave actual format untranslated, unless you absolutely know that they
    // would convey more meaning in some other way.
    "Export": "",
    "Image": "",
    "Data": "",
    "Print": "",
    "Press ENTER or use arrow keys to navigate": "",
    "Press ENTER to open": "",
    "Press ENTER to print.": "",
    "Press ENTER to export as %1.": "",
    "(Press ESC to close this message)": "",
    "Image Export Complete": "",
    "Export operation took longer than expected. Something might have gone wrong.": "",
    "Saved from": "",
    "PNG": "",
    "JPG": "",
    "GIF": "",
    "SVG": "",
    "PDF": "",
    "JSON": "",
    "CSV": "",
    "XLSX": "",
    "HTML": "",
    // Scrollbar-related stuff.
    // 
    // Scrollbar is a control which can zoom and pan the axes on the chart.
    // 
    // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
    // upper and lower (for vertical one).
    // 
    // Prompts change in relation to whether Scrollbar is vertical or horizontal.
    // 
    // The final section is used to indicate the current range of selection.
    "Use TAB to select grip buttons or left and right arrows to change selection": "",
    "Use left and right arrows to move selection": "",
    "Use left and right arrows to move left selection": "",
    "Use left and right arrows to move right selection": "",
    "Use TAB select grip buttons or up and down arrows to change selection": "",
    "Use up and down arrows to move selection": "",
    "Use up and down arrows to move lower selection": "",
    "Use up and down arrows to move upper selection": "",
    "From %1 to %2": "",
    "From %1": "",
    "To %1": "",
    // Data loader-related.
    "No parser available for file: %1": "",
    "Error parsing file: %1": "",
    "Unable to load file: %1": "",
    "Invalid date": "",
    // Common actions
    "Close": "",
    "Minimize": ""
});
//# sourceMappingURL=en.js.map

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/themes/Animated.js":
/*!*************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/themes/Animated.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _internal_themes_AnimatedTheme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../.internal/themes/AnimatedTheme */ "./node_modules/@amcharts/amcharts5/.internal/themes/AnimatedTheme.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_internal_themes_AnimatedTheme__WEBPACK_IMPORTED_MODULE_0__.AnimatedTheme);
//# sourceMappingURL=Animated.js.map

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator),
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__["default"])
/* harmony export */ });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference.contextElement) : [],
          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(modifiers);

          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ contains)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
/* harmony export */ });
// import { isHTMLElement } from './instanceOf';
function getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars
includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1; // FIXME:
  // `offsetWidth` returns an integer while `getBoundingClientRect`
  // returns a float. This results in `scaleX` or `scaleY` being
  // non-1 when it should be for elements that aren't a full pixel in
  // width or height.
  // if (isHTMLElement(element) && includeScale) {
  //   const offsetHeight = element.offsetHeight;
  //   const offsetWidth = element.offsetWidth;
  //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
  //   // Fallback to 1 in case both values are `0`
  //   if (offsetWidth > 0) {
  //     scaleX = rect.width / offsetWidth || 1;
  //   }
  //   if (offsetHeight > 0) {
  //     scaleY = rect.height / offsetHeight || 1;
  //   }
  // }

  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getClippingRect)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element) {
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(element) : element;

  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);
    accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);
    accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);
    accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCompositeRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");








function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = rect.width / element.offsetWidth || 1;
  var scaleY = rect.height / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent);
  var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent);
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_4__["default"])(documentElement)) {
      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent);
    }

    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(offsetParent)) {
      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_6__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getComputedStyle)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentElement)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentRect)
/* harmony export */ });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var y = -winScroll.scrollTop;

  if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(body || html).direction === 'rtl') {
    x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
/* harmony export */ });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLayoutRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeName)
/* harmony export */ });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeScroll)
/* harmony export */ });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
  } else {
    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOffsetParent)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");







function getTrueOffsetParent(element) {
  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);

  while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(currentNode)) < 0) {
    var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_4__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getParentNode)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getScrollParent)
/* harmony export */ });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
    return node;
  }

  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportRect)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



function getViewportRect(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindow)
/* harmony export */ });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScroll)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement),
/* harmony export */   "isShadowRoot": () => (/* binding */ isShadowRoot)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isScrollParent)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isTableElement)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listScrollParents)
/* harmony export */ });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(target)));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "end": () => (/* binding */ end),
/* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
/* harmony export */   "viewport": () => (/* binding */ viewport),
/* harmony export */   "popper": () => (/* binding */ popper),
/* harmony export */   "reference": () => (/* binding */ reference),
/* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
/* harmony export */   "placements": () => (/* binding */ placements),
/* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "afterRead": () => (/* binding */ afterRead),
/* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
/* harmony export */   "main": () => (/* binding */ main),
/* harmony export */   "afterMain": () => (/* binding */ afterMain),
/* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
/* harmony export */   "write": () => (/* binding */ write),
/* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
/* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases)
/* harmony export */ });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "afterMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterMain),
/* harmony export */   "afterRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterRead),
/* harmony export */   "afterWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterWrite),
/* harmony export */   "auto": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.auto),
/* harmony export */   "basePlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements),
/* harmony export */   "beforeMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeMain),
/* harmony export */   "beforeRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeRead),
/* harmony export */   "beforeWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeWrite),
/* harmony export */   "bottom": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom),
/* harmony export */   "clippingParents": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents),
/* harmony export */   "end": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.end),
/* harmony export */   "left": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.left),
/* harmony export */   "main": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.main),
/* harmony export */   "modifierPhases": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases),
/* harmony export */   "placements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements),
/* harmony export */   "popper": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper),
/* harmony export */   "read": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.read),
/* harmony export */   "reference": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference),
/* harmony export */   "right": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.right),
/* harmony export */   "start": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.start),
/* harmony export */   "top": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.top),
/* harmony export */   "variationPlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements),
/* harmony export */   "viewport": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport),
/* harmony export */   "write": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.write),
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.computeStyles),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.offset),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.preventOverflow),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.popperGenerator),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "createPopperBase": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.createPopper),
/* harmony export */   "createPopper": () => (/* reexport safe */ _popper_js__WEBPACK_IMPORTED_MODULE_4__.createPopper),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__.createPopper)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popper.js */ "./node_modules/@popperjs/core/lib/popper.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state.placement);
  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__["default"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");







 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr) || 0,
    y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)((0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;
  var win = window;

  if (adaptive) {
    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) {
      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper);

      if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.placement),
    variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
    return [];
  }

  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    }

    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyStyles": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "arrow": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "flip": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "hide": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "offset": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");










/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

      var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__["default"])(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(_min, tetherMin) : _min, _offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");










var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
/* harmony export */ });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeOffsets)
/* harmony export */ });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debounce)
/* harmony export */ });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ detectOverflow)
/* harmony export */ });
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.reference);
  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ expandToHashMap)
/* harmony export */ });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ format)
/* harmony export */ });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAltAxis)
/* harmony export */ });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBasePlacement)
/* harmony export */ });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFreshSideObject)
/* harmony export */ });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
/* harmony export */ });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositePlacement)
/* harmony export */ });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
/* harmony export */ });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getVariation)
/* harmony export */ });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "round": () => (/* binding */ round)
/* harmony export */ });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeByName)
/* harmony export */ });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergePaddingObject)
/* harmony export */ });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ orderModifiers)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rectToClientRect)
/* harmony export */ });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ uniqueBy)
/* harmony export */ });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ validateModifiers)
/* harmony export */ });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    .filter(function (value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

          break;

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (modifier.effect != null && typeof modifier.effect !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ within)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));
}

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/Root.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/util/DataProcessor.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Bullet.js");
/* harmony import */ var _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @amcharts/amcharts5 */ "./node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChart.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/DateAxis.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererX.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererY.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/ValueAxis.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedXLineSeries.js");
/* harmony import */ var _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @amcharts/amcharts5/xy */ "./node_modules/@amcharts/amcharts5/.internal/charts/xy/XYCursor.js");
/* harmony import */ var _amcharts_amcharts5_themes_Animated__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amcharts/amcharts5/themes/Animated */ "./node_modules/@amcharts/amcharts5/themes/Animated.js");
__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");

__webpack_require__(/*! bootstrap/js/dist/dropdown */ "./node_modules/bootstrap/js/dist/dropdown.js");




document.addEventListener("DOMContentLoaded", function (event) {
  // графики
  var graphs = document.querySelectorAll('[data-graph-json]');
  graphs.forEach(function (graph) {
    createGraph(graph, graph.dataset.reverse);
  }); // табы

  var tabs = document.querySelectorAll('.tabs');
  tabs.forEach(function (tab) {
    Tabs.init(tab);
  }); // "покупаю"

  var btn_buying = document.querySelectorAll('a[data-buying]');

  if (btn_buying) {
    btn_buying.forEach(function (btn) {
      btn.addEventListener('click', function () {
        return buying(this.dataset.uuid);
      });
    });
  } // мобильный просмотр таблиц


  var tables = document.querySelectorAll('table.table');

  if (tables.length) {
    tables.forEach(function (table) {
      if (table.querySelector('thead')) {
        mobileTable(table);
      }
    });
  }

  $('select[multiple]').selectize({
    render: {
      option: function option(item, escape) {
        // кнопка подписаться в выпадающем списке
        if (item.value === 'subscribe') {
          return '<a href="' + item.url + '" class="subscribe">' + item.text + '</a>';
        }

        return '<div data-value="' + item.value + '" class="option">' + escape(item.text) + '</div>';
      }
    },
    onItemAdd: function onItemAdd(value) {
      if (value !== 'subscribe') {
        return;
      } // убираем из выбранных элементов subscribe


      var values = [];
      var currentValues = this.getValue();
      var subscribeIndex = currentValues.indexOf('subscribe');

      if (subscribeIndex !== -1) {
        if (currentValues.length > 0) {
          currentValues.forEach(function (val, index) {
            if (subscribeIndex !== index) {
              values.push(val);
            }
          });
          this.setValue(values, true);
        }
      }

      this.close();
      this.refreshOptions(); // перенаправляем пользователя по ссылке subscribe

      var subscribeLink = this.$dropdown[0].querySelector('.subscribe');
      document.location.href = subscribeLink.href;
      return;
    }
  }); // анимация рейтинга alteco

  stepsProgress(document.querySelectorAll('.step-progress')); // анимация чисел

  numberAnimation(document.querySelectorAll('[data-counter-step]'));
});
/**
 *
 * @param table
 */

function mobileTable(table) {
  var header = table.querySelector('thead');
  var body = table.querySelector('tbody');
  var main_index = null;
  var columns = [];

  if (header.querySelectorAll('td').length) {
    header.querySelectorAll('td').forEach(function (column, index) {
      columns.push(column.innerText.trim());

      if (!main_index && column.classList.contains('main')) {
        main_index = index;
      }
    });
  }

  if (header.querySelectorAll('th').length) {
    header.querySelectorAll('th').forEach(function (column, index) {
      columns.push(column.innerText.trim());

      if (!main_index && column.classList.contains('main')) {
        main_index = index;
      }
    });
  }

  body.querySelectorAll('tr').forEach(function (row) {
    row.querySelectorAll('td').forEach(function (column, index) {
      if (!column.dataset.label) {
        column.dataset.label = columns[index];
      }

      if (index === main_index) column.classList.add('main');
    });
  });
}
/**
 * Покупаю или перестал покупать эту монету
 * @param uuid
 * @returns {boolean}
 */


function buying(uuid) {
  axios.post('/users/coin/buying', {
    uuid: uuid
  }).then(function (response) {
    if (response.data.ok) {
      var btn = document.querySelector('a[data-buying][data-uuid="' + uuid + '"]');
      var message = document.createElement('span');
      message.classList.add('text-success');
      message.innerText = 'OK';
      btn.after(message);
      btn.parentNode.removeChild(btn);
    } else {
      alert('Error');
    }
  });
  return false;
}
/**
 * Соберет JSON из <script type="application/json" id="{container}">
 * @returns {*[]}
 * @param json
 * @param reverse
 */


function jsonToGraphData(json, reverse) {
  var data = [];
  Object.keys(json).forEach(function (date) {
    var value = parseFloat(json[date]);
    if (reverse) value = json[date] * -1;
    data.push({
      date: date,
      default_value: json[date],
      value: value
    });
  });
  return data;
}
/**
 * @param container
 */


function createGraph(container, reverse) {
  var _container$dataset$pr;

  if (!container) return;
  var data = JSON.parse(container.dataset.graphJson);
  if (!data) return; // -------

  var root = _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_0__.Root["new"](container);
  root.setThemes([_amcharts_amcharts5_themes_Animated__WEBPACK_IMPORTED_MODULE_1__["default"]["new"](root)]);
  root.dateFormatter.setAll({
    dateFormat: "yyyy-mm-dd",
    dateFields: ["valueX"]
  });
  var chart = root.container.children.push(_amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_2__.XYChart["new"](root, {
    focusable: true,
    panX: true,
    panY: true,
    wheelX: 'panX',
    wheelY: 'zoomX'
  })); // let easing = am5.ease.linear;

  var xAxis = chart.xAxes.push(_amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_3__.DateAxis["new"](root, {
    maxDeviation: 0,
    tooltipDateFormat: "d MMM",
    groupData: false,
    baseInterval: {
      timeUnit: "day",
      count: 1
    },
    renderer: _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_4__.AxisRendererX["new"](root, {}),
    tooltip: _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_5__.Tooltip["new"](root, {})
  }));
  var data_clean = [];
  Object.keys(data).forEach(function (index) {
    data_clean.push(parseFloat(data[index]));
  });
  console.log(data_clean);
  var configAxisY = {
    strictMinMax: true,
    renderer: _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_6__.AxisRendererY["new"](root, {})
  };

  if (reverse) {
    configAxisY.numberFormat = "#s"; // "s" - убирает минусовые значения в плюс
  }

  var yAxis = chart.yAxes.push(_amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_7__.ValueAxis["new"](root, configAxisY));
  var series = chart.series.push(_amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_8__.SmoothedXLineSeries["new"](root, {
    // noRisers: true,
    minBulletDistance: 20,
    xAxis: xAxis,
    yAxis: yAxis,
    valueYField: 'value',
    valueXField: 'date',
    fill: _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_9__.color(0xf52e2e),
    stroke: _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_9__.color(0xf52e2e),
    tooltip: _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_5__.Tooltip["new"](root, {
      // pointerOrientation: "horizontal",
      labelText: ((_container$dataset$pr = container.dataset.prefix) !== null && _container$dataset$pr !== void 0 ? _container$dataset$pr : '') + "{default_value}"
    })
  }));
  series.fills.template.setAll({
    // fill: am5.color(0xf52e2e),
    // fillOpacity: 0.2,
    visible: false
  });
  series.strokes.template.setAll({
    strokeWidth: 2
  });
  series.data.processor = _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_10__.DataProcessor["new"](root, {
    dateFormat: "yyyy-MM-dd",
    dateFields: ["date"]
  });
  series.data.setAll(jsonToGraphData(data, reverse));
  series.bullets.push(function () {
    var circle = _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_11__.Circle["new"](root, {
      radius: 4,
      fill: root.interfaceColors.get("background"),
      stroke: series.get("fill"),
      strokeWidth: 2
    });
    return _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_12__.Bullet["new"](root, {
      fill: root.interfaceColors.get("background"),
      sprite: circle
    });
  });
  var cursor = chart.set("cursor", _amcharts_amcharts5_xy__WEBPACK_IMPORTED_MODULE_13__.XYCursor["new"](root, {
    xAxis: xAxis,
    behavior: "zoomX"
  }));
  cursor.lineY.set("visible", false);
  chart.set("scrollbarX", _amcharts_amcharts5__WEBPACK_IMPORTED_MODULE_14__.Scrollbar["new"](root, {
    orientation: "horizontal"
  }));
  chart.appear(1000, 100);
} // alteco рейтинг


function stepsProgress(elements) {
  elements.forEach(function (progress) {
    var value = progress.dataset.value;
    if (!value) return;

    if (value < 0 || isNaN(parseInt(value))) {
      value = 0;
      progress.dataset.value = 0;
    }

    if (value > 100) {
      value = 100;
      progress.dataset.value = 100;
    }

    var label = progress.querySelector('.label');
    var steps = progress.querySelectorAll('.step');
    var size = 100 / steps.length;
    var active = Math.ceil(value / size);
    steps.forEach(function (step, index) {
      if (index + 1 <= active) {
        step.classList.add('active');
      }
    });
    label.style.left = value + '%';
    var delay = 500;
    var stepDelay = delay / steps.length;
    var stepsCount = steps.length;

    var _loop = function _loop(i) {
      setTimeout(function () {
        label.textContent = stepsCount === i ? value : parseInt(value / stepsCount * i);
      }, stepDelay * i);
    };

    for (var i = 1; i <= stepsCount; i++) {
      _loop(i);
    }
  });
}

function numberAnimation(elements) {
  elements.forEach(function (item) {
    var _item$dataset$number, _item$dataset$decimal;

    var steps = item.dataset.counterStep;
    var defaultContent = item.textContent.trim();
    var value = (_item$dataset$number = item.dataset.number) !== null && _item$dataset$number !== void 0 ? _item$dataset$number : defaultContent;
    var decimals = (_item$dataset$decimal = item.dataset.decimals) !== null && _item$dataset$decimal !== void 0 ? _item$dataset$decimal : 2;
    if (!steps || isNaN(parseInt(steps)) || isNaN(value)) return null;
    item.style.opacity = 0; // item.textContent = 0

    var iterationValue = value / steps;
    var delay = 500;
    var delayIteration = delay / steps;
    var numberFormat = new Intl.NumberFormat();
    var pseudo = document.createElement('span');
    pseudo.style.position = 'absolute';
    pseudo.style.marginLeft = '-' + item.offsetWidth + 'px';
    item.parentNode.appendChild(pseudo);

    var _loop2 = function _loop2(i) {
      setTimeout(function () {
        if (i === parseInt(steps)) {
          pseudo.remove();
          item.style.opacity = 1;
        } else {
          pseudo.textContent = numberFormat.format((iterationValue * i).toFixed(decimals));
        }
      }, delayIteration * i);
    };

    for (var i = 1; i <= steps; i++) {
      _loop2(i);
    }

    item.parentNode.style.removeProperty('width');
  });
}

var Tabs = {
  init: function init(navigation) {
    var tabs = navigation.querySelectorAll('.tab');
    tabs.forEach(function (tab) {
      //
      tab.addEventListener('click', function (e) {
        e.preventDefault();
        navigation.querySelector('.tab.show').classList.remove('show');
        tab.classList.add('show');
        Tabs.update(navigation);
      });
      Tabs.update(navigation);
    });
  },
  update: function update(navigation) {
    var tabs = navigation.querySelectorAll('.tab');
    tabs.forEach(function (tab) {
      var container = document.querySelector('#' + tab.dataset["for"]);

      if (tab.classList.contains('show')) {
        container.style.display = 'block';
      } else {
        container.style.display = 'none';
      }
    });
  }
};

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
window.axios.defaults.headers.common['X-CSRF-TOKEN'] = document.head.querySelector('meta[name="csrf-token"]').content;
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     forceTLS: true
// });

/***/ }),

/***/ "./node_modules/bootstrap/js/dist/base-component.js":
/*!**********************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/base-component.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
  * Bootstrap base-component.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(/*! ./dom/data.js */ "./node_modules/bootstrap/js/dist/dom/data.js"), __webpack_require__(/*! ./dom/event-handler.js */ "./node_modules/bootstrap/js/dist/dom/event-handler.js")) :
  0;
})(this, (function (Data, EventHandler) { 'use strict';

  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

  const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);
  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const MILLISECONDS_MULTIPLIER = 1000;
  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  const getTransitionDurationFromElement = element => {
    if (!element) {
      return 0;
    } // Get transition-duration of the element


    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    } // If multiple durations are defined, take the first


    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };

  const triggerTransitionEnd = element => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };

  const isElement = obj => {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (typeof obj.jquery !== 'undefined') {
      obj = obj[0];
    }

    return typeof obj.nodeType !== 'undefined';
  };

  const getElement = obj => {
    if (isElement(obj)) {
      // it's a jQuery object or a node element
      return obj.jquery ? obj[0] : obj;
    }

    if (typeof obj === 'string' && obj.length > 0) {
      return document.querySelector(obj);
    }

    return null;
  };

  const execute = callback => {
    if (typeof callback === 'function') {
      callback();
    }
  };

  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }

    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;

    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }

      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };

    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const VERSION = '5.1.3';

  class BaseComponent {
    constructor(element) {
      element = getElement(element);

      if (!element) {
        return;
      }

      this._element = element;
      Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
    }

    dispose() {
      Data__default.default.remove(this._element, this.constructor.DATA_KEY);
      EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);
      Object.getOwnPropertyNames(this).forEach(propertyName => {
        this[propertyName] = null;
      });
    }

    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    /** Static */


    static getInstance(element) {
      return Data__default.default.get(getElement(element), this.DATA_KEY);
    }

    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
    }

    static get VERSION() {
      return VERSION;
    }

    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }

    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }

    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }

  }

  return BaseComponent;

}));
//# sourceMappingURL=base-component.js.map


/***/ }),

/***/ "./node_modules/bootstrap/js/dist/dom/data.js":
/*!****************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/dom/data.js ***!
  \****************************************************/
/***/ (function(module) {

/*!
  * Bootstrap data.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */
  const elementMap = new Map();
  const data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }

      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used

      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }

      instanceMap.set(key, instance);
    },

    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }

      return null;
    },

    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }

      const instanceMap = elementMap.get(element);
      instanceMap.delete(key); // free up element references if there are no instances left for an element

      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }

  };

  return data;

}));
//# sourceMappingURL=data.js.map


/***/ }),

/***/ "./node_modules/bootstrap/js/dist/dom/event-handler.js":
/*!*************************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/dom/event-handler.js ***!
  \*************************************************************/
/***/ (function(module) {

/*!
  * Bootstrap event-handler.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const getjQuery = () => {
    const {
      jQuery
    } = window;

    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return jQuery;
    }

    return null;
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  const stripNameRegex = /\..*/;
  const stripUidRegex = /::\d+$/;
  const eventRegistry = {}; // Events storage

  let uidEvent = 1;
  const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };
  const customEventsRegex = /^(mouseenter|mouseleave)/i;
  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
  /**
   * ------------------------------------------------------------------------
   * Private methods
   * ------------------------------------------------------------------------
   */

  function getUidEvent(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }

  function getEvent(element) {
    const uid = getUidEvent(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }

  function bootstrapHandler(element, fn) {
    return function handler(event) {
      event.delegateTarget = element;

      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }

      return fn.apply(element, [event]);
    };
  }

  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);

      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (let i = domElements.length; i--;) {
          if (domElements[i] === target) {
            event.delegateTarget = target;

            if (handler.oneOff) {
              EventHandler.off(element, event.type, selector, fn);
            }

            return fn.apply(target, [event]);
          }
        }
      } // To please ESLint


      return null;
    };
  }

  function findHandler(events, handler, delegationSelector = null) {
    const uidEventList = Object.keys(events);

    for (let i = 0, len = uidEventList.length; i < len; i++) {
      const event = events[uidEventList[i]];

      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
        return event;
      }
    }

    return null;
  }

  function normalizeParams(originalTypeEvent, handler, delegationFn) {
    const delegation = typeof handler === 'string';
    const originalHandler = delegation ? delegationFn : handler;
    let typeEvent = getTypeEvent(originalTypeEvent);
    const isNative = nativeEvents.has(typeEvent);

    if (!isNative) {
      typeEvent = originalTypeEvent;
    }

    return [delegation, originalHandler, typeEvent];
  }

  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    if (!handler) {
      handler = delegationFn;
      delegationFn = null;
    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does


    if (customEventsRegex.test(originalTypeEvent)) {
      const wrapFn = fn => {
        return function (event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn.call(this, event);
          }
        };
      };

      if (delegationFn) {
        delegationFn = wrapFn(delegationFn);
      } else {
        handler = wrapFn(handler);
      }
    }

    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
    const events = getEvent(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

    if (previousFn) {
      previousFn.oneOff = previousFn.oneOff && oneOff;
      return;
    }

    const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
    const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
    fn.delegationSelector = delegation ? handler : null;
    fn.originalHandler = originalHandler;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;
    element.addEventListener(typeEvent, fn, delegation);
  }

  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);

    if (!fn) {
      return;
    }

    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }

  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    Object.keys(storeElementEvent).forEach(handlerKey => {
      if (handlerKey.includes(namespace)) {
        const event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
      }
    });
  }

  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event;
  }

  const EventHandler = {
    on(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, false);
    },

    one(element, event, handler, delegationFn) {
      addHandler(element, event, handler, delegationFn, true);
    },

    off(element, originalTypeEvent, handler, delegationFn) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return;
      }

      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getEvent(element);
      const isNamespace = originalTypeEvent.startsWith('.');

      if (typeof originalHandler !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!events || !events[typeEvent]) {
          return;
        }

        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
        return;
      }

      if (isNamespace) {
        Object.keys(events).forEach(elementEvent => {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        });
      }

      const storeElementEvent = events[typeEvent] || {};
      Object.keys(storeElementEvent).forEach(keyHandlers => {
        const handlerKey = keyHandlers.replace(stripUidRegex, '');

        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          const event = storeElementEvent[keyHandlers];
          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
        }
      });
    },

    trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null;
      }

      const $ = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      const isNative = nativeEvents.has(typeEvent);
      let jQueryEvent;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      let evt = null;

      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);
        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }

      if (isNative) {
        evt = document.createEvent('HTMLEvents');
        evt.initEvent(typeEvent, bubbles, true);
      } else {
        evt = new CustomEvent(event, {
          bubbles,
          cancelable: true
        });
      } // merge custom information in our event


      if (typeof args !== 'undefined') {
        Object.keys(args).forEach(key => {
          Object.defineProperty(evt, key, {
            get() {
              return args[key];
            }

          });
        });
      }

      if (defaultPrevented) {
        evt.preventDefault();
      }

      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }

      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
        jQueryEvent.preventDefault();
      }

      return evt;
    }

  };

  return EventHandler;

}));
//# sourceMappingURL=event-handler.js.map


/***/ }),

/***/ "./node_modules/bootstrap/js/dist/dom/manipulator.js":
/*!***********************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/dom/manipulator.js ***!
  \***********************************************************/
/***/ (function(module) {

/*!
  * Bootstrap manipulator.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  function normalizeData(val) {
    if (val === 'true') {
      return true;
    }

    if (val === 'false') {
      return false;
    }

    if (val === Number(val).toString()) {
      return Number(val);
    }

    if (val === '' || val === 'null') {
      return null;
    }

    return val;
  }

  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
  }

  const Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },

    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },

    getDataAttributes(element) {
      if (!element) {
        return {};
      }

      const attributes = {};
      Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {
        let pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      });
      return attributes;
    },

    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    },

    offset(element) {
      const rect = element.getBoundingClientRect();
      return {
        top: rect.top + window.pageYOffset,
        left: rect.left + window.pageXOffset
      };
    },

    position(element) {
      return {
        top: element.offsetTop,
        left: element.offsetLeft
      };
    }

  };

  return Manipulator;

}));
//# sourceMappingURL=manipulator.js.map


/***/ }),

/***/ "./node_modules/bootstrap/js/dist/dom/selector-engine.js":
/*!***************************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/dom/selector-engine.js ***!
  \***************************************************************/
/***/ (function(module) {

/*!
  * Bootstrap selector-engine.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const isElement = obj => {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (typeof obj.jquery !== 'undefined') {
      obj = obj[0];
    }

    return typeof obj.nodeType !== 'undefined';
  };

  const isVisible = element => {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }

    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
  };

  const isDisabled = element => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }

    if (element.classList.contains('disabled')) {
      return true;
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  const NODE_TEXT = 3;
  const SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },

    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },

    children(element, selector) {
      return [].concat(...element.children).filter(child => child.matches(selector));
    },

    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode;

      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
        if (ancestor.matches(selector)) {
          parents.push(ancestor);
        }

        ancestor = ancestor.parentNode;
      }

      return parents;
    },

    prev(element, selector) {
      let previous = element.previousElementSibling;

      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }

        previous = previous.previousElementSibling;
      }

      return [];
    },

    next(element, selector) {
      let next = element.nextElementSibling;

      while (next) {
        if (next.matches(selector)) {
          return [next];
        }

        next = next.nextElementSibling;
      }

      return [];
    },

    focusableChildren(element) {
      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(', ');
      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
    }

  };

  return SelectorEngine;

}));
//# sourceMappingURL=selector-engine.js.map


/***/ }),

/***/ "./node_modules/bootstrap/js/dist/dropdown.js":
/*!****************************************************!*\
  !*** ./node_modules/bootstrap/js/dist/dropdown.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
  * Bootstrap dropdown.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/index.js"), __webpack_require__(/*! ./dom/event-handler.js */ "./node_modules/bootstrap/js/dist/dom/event-handler.js"), __webpack_require__(/*! ./dom/manipulator.js */ "./node_modules/bootstrap/js/dist/dom/manipulator.js"), __webpack_require__(/*! ./dom/selector-engine.js */ "./node_modules/bootstrap/js/dist/dom/selector-engine.js"), __webpack_require__(/*! ./base-component.js */ "./node_modules/bootstrap/js/dist/base-component.js")) :
  0;
})(this, (function (Popper, EventHandler, Manipulator, SelectorEngine, BaseComponent) { 'use strict';

  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    const n = Object.create(null);
    if (e) {
      for (const k in e) {
        if (k !== 'default') {
          const d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    }
    n.default = e;
    return Object.freeze(n);
  }

  const Popper__namespace = /*#__PURE__*/_interopNamespace(Popper);
  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
  const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);
  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
  const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const toType = obj => {
    if (obj === null || obj === undefined) {
      return `${obj}`;
    }

    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  };

  const getSelector = element => {
    let selector = element.getAttribute('data-bs-target');

    if (!selector || selector === '#') {
      let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273

      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
        return null;
      } // Just in case some CMS puts out a full URL with the anchor appended


      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
        hrefAttr = `#${hrefAttr.split('#')[1]}`;
      }

      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
    }

    return selector;
  };

  const getElementFromSelector = element => {
    const selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };

  const isElement = obj => {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (typeof obj.jquery !== 'undefined') {
      obj = obj[0];
    }

    return typeof obj.nodeType !== 'undefined';
  };

  const getElement = obj => {
    if (isElement(obj)) {
      // it's a jQuery object or a node element
      return obj.jquery ? obj[0] : obj;
    }

    if (typeof obj === 'string' && obj.length > 0) {
      return document.querySelector(obj);
    }

    return null;
  };

  const typeCheckConfig = (componentName, config, configTypes) => {
    Object.keys(configTypes).forEach(property => {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = value && isElement(value) ? 'element' : toType(value);

      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      }
    });
  };

  const isVisible = element => {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false;
    }

    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
  };

  const isDisabled = element => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }

    if (element.classList.contains('disabled')) {
      return true;
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled;
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
  };

  const noop = () => {};

  const getjQuery = () => {
    const {
      jQuery
    } = window;

    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return jQuery;
    }

    return null;
  };

  const DOMContentLoadedCallbacks = [];

  const onDOMContentLoaded = callback => {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', () => {
          DOMContentLoadedCallbacks.forEach(callback => callback());
        });
      }

      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };

  const isRTL = () => document.documentElement.dir === 'rtl';

  const defineJQueryPlugin = plugin => {
    onDOMContentLoaded(() => {
      const $ = getjQuery();
      /* istanbul ignore if */

      if ($) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;

        $.fn[name].noConflict = () => {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */


  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

    if (index === -1) {
      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
    }

    const listLength = list.length;
    index += shouldGetNext ? 1 : -1;

    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }

    return list[Math.max(0, Math.min(index, listLength - 1))];
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME = 'dropdown';
  const DATA_KEY = 'bs.dropdown';
  const EVENT_KEY = `.${DATA_KEY}`;
  const DATA_API_KEY = '.data-api';
  const ESCAPE_KEY = 'Escape';
  const SPACE_KEY = 'Space';
  const TAB_KEY = 'Tab';
  const ARROW_UP_KEY = 'ArrowUp';
  const ARROW_DOWN_KEY = 'ArrowDown';
  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY}`);
  const EVENT_HIDE = `hide${EVENT_KEY}`;
  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  const EVENT_SHOW = `show${EVENT_KEY}`;
  const EVENT_SHOWN = `shown${EVENT_KEY}`;
  const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`;
  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`;
  const CLASS_NAME_SHOW = 'show';
  const CLASS_NAME_DROPUP = 'dropup';
  const CLASS_NAME_DROPEND = 'dropend';
  const CLASS_NAME_DROPSTART = 'dropstart';
  const CLASS_NAME_NAVBAR = 'navbar';
  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="dropdown"]';
  const SELECTOR_MENU = '.dropdown-menu';
  const SELECTOR_NAVBAR_NAV = '.navbar-nav';
  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  const Default = {
    offset: [0, 2],
    boundary: 'clippingParents',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null,
    autoClose: true
  };
  const DefaultType = {
    offset: '(array|string|function)',
    boundary: '(string|element)',
    reference: '(string|element|object)',
    display: 'string',
    popperConfig: '(null|object|function)',
    autoClose: '(boolean|string)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Dropdown extends BaseComponent__default.default {
    constructor(element, config) {
      super(element);
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();
    } // Getters


    static get Default() {
      return Default;
    }

    static get DefaultType() {
      return DefaultType;
    }

    static get NAME() {
      return NAME;
    } // Public


    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }

    show() {
      if (isDisabled(this._element) || this._isShown(this._menu)) {
        return;
      }

      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW, relatedTarget);

      if (showEvent.defaultPrevented) {
        return;
      }

      const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

      if (this._inNavbar) {
        Manipulator__default.default.setDataAttribute(this._menu, 'popper', 'none');
      } else {
        this._createPopper(parent);
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
        [].concat(...document.body.children).forEach(elem => EventHandler__default.default.on(elem, 'mouseover', noop));
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      this._menu.classList.add(CLASS_NAME_SHOW);

      this._element.classList.add(CLASS_NAME_SHOW);

      EventHandler__default.default.trigger(this._element, EVENT_SHOWN, relatedTarget);
    }

    hide() {
      if (isDisabled(this._element) || !this._isShown(this._menu)) {
        return;
      }

      const relatedTarget = {
        relatedTarget: this._element
      };

      this._completeHide(relatedTarget);
    }

    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }

      super.dispose();
    }

    update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper) {
        this._popper.update();
      }
    } // Private


    _completeHide(relatedTarget) {
      const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE, relatedTarget);

      if (hideEvent.defaultPrevented) {
        return;
      } // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support


      if ('ontouchstart' in document.documentElement) {
        [].concat(...document.body.children).forEach(elem => EventHandler__default.default.off(elem, 'mouseover', noop));
      }

      if (this._popper) {
        this._popper.destroy();
      }

      this._menu.classList.remove(CLASS_NAME_SHOW);

      this._element.classList.remove(CLASS_NAME_SHOW);

      this._element.setAttribute('aria-expanded', 'false');

      Manipulator__default.default.removeDataAttribute(this._menu, 'popper');
      EventHandler__default.default.trigger(this._element, EVENT_HIDDEN, relatedTarget);
    }

    _getConfig(config) {
      config = { ...this.constructor.Default,
        ...Manipulator__default.default.getDataAttributes(this._element),
        ...config
      };
      typeCheckConfig(NAME, config, this.constructor.DefaultType);

      if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
        // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }

      return config;
    }

    _createPopper(parent) {
      if (typeof Popper__namespace === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
      }

      let referenceElement = this._element;

      if (this._config.reference === 'parent') {
        referenceElement = parent;
      } else if (isElement(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === 'object') {
        referenceElement = this._config.reference;
      }

      const popperConfig = this._getPopperConfig();

      const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);
      this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);

      if (isDisplayStatic) {
        Manipulator__default.default.setDataAttribute(this._menu, 'popper', 'static');
      }
    }

    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW);
    }

    _getMenuElement() {
      return SelectorEngine__default.default.next(this._element, SELECTOR_MENU)[0];
    }

    _getPlacement() {
      const parentDropdown = this._element.parentNode;

      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      } // We need to trim the value because custom properties can also include spaces


      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }

      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }

    _detectNavbar() {
      return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;
    }

    _getOffset() {
      const {
        offset
      } = this._config;

      if (typeof offset === 'string') {
        return offset.split(',').map(val => Number.parseInt(val, 10));
      }

      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element);
      }

      return offset;
    }

    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }]
      }; // Disable Popper if we have a static display

      if (this._config.display === 'static') {
        defaultBsPopperConfig.modifiers = [{
          name: 'applyStyles',
          enabled: false
        }];
      }

      return { ...defaultBsPopperConfig,
        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
      };
    }

    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine__default.default.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

      if (!items.length) {
        return;
      } // if target isn't included in items (e.g. when expanding the dropdown)
      // allow cycling to get the last item in case key equals ARROW_UP_KEY


      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
    } // Static


    static jQueryInterface(config) {
      return this.each(function () {
        const data = Dropdown.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      });
    }

    static clearMenus(event) {
      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY)) {
        return;
      }

      const toggles = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);

      for (let i = 0, len = toggles.length; i < len; i++) {
        const context = Dropdown.getInstance(toggles[i]);

        if (!context || context._config.autoClose === false) {
          continue;
        }

        if (!context._isShown()) {
          continue;
        }

        const relatedTarget = {
          relatedTarget: context._element
        };

        if (event) {
          const composedPath = event.composedPath();
          const isMenuTarget = composedPath.includes(context._menu);

          if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
            continue;
          } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


          if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY || /input|select|option|textarea|form/i.test(event.target.tagName))) {
            continue;
          }

          if (event.type === 'click') {
            relatedTarget.clickEvent = event;
          }
        }

        context._completeHide(relatedTarget);
      }
    }

    static getParentFromElement(element) {
      return getElementFromSelector(element) || element.parentNode;
    }

    static dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
        return;
      }

      const isActive = this.classList.contains(CLASS_NAME_SHOW);

      if (!isActive && event.key === ESCAPE_KEY) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (isDisabled(this)) {
        return;
      }

      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ? this : SelectorEngine__default.default.prev(this, SELECTOR_DATA_TOGGLE)[0];
      const instance = Dropdown.getOrCreateInstance(getToggleButton);

      if (event.key === ESCAPE_KEY) {
        instance.hide();
        return;
      }

      if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
        if (!isActive) {
          instance.show();
        }

        instance._selectMenuItem(event);

        return;
      }

      if (!isActive || event.key === SPACE_KEY) {
        Dropdown.clearMenus();
      }
    }

  }
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  EventHandler__default.default.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler);
  EventHandler__default.default.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus);
  EventHandler__default.default.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Dropdown to jQuery only if jQuery is present
   */

  defineJQueryPlugin(Dropdown);

  return Dropdown;

}));
//# sourceMappingURL=dropdown.js.map


/***/ }),

/***/ "./node_modules/d3-path/src/path.js":
/*!******************************************!*\
  !*** ./node_modules/d3-path/src/path.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon));

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (path);


/***/ }),

/***/ "./node_modules/d3-shape/src/area.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/area.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-path */ "./node_modules/d3-path/src/path.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-shape/src/array.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-shape/src/constant.js");
/* harmony import */ var _curve_linear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve/linear.js */ "./node_modules/d3-shape/src/curve/linear.js");
/* harmony import */ var _line_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./line.js */ "./node_modules/d3-shape/src/line.js");
/* harmony import */ var _point_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./point.js */ "./node_modules/d3-shape/src/point.js");







/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x0, y0, y1) {
  var x1 = null,
      defined = (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(true),
      context = null,
      curve = _curve_linear_js__WEBPACK_IMPORTED_MODULE_1__["default"],
      output = null;

  x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? _point_js__WEBPACK_IMPORTED_MODULE_2__.x : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+x0);
  y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(0) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+y0);
  y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? _point_js__WEBPACK_IMPORTED_MODULE_2__.y : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = (0,_array_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = (0,d3_path__WEBPACK_IMPORTED_MODULE_4__["default"])());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0,_line_js__WEBPACK_IMPORTED_MODULE_5__["default"])().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}


/***/ }),

/***/ "./node_modules/d3-shape/src/array.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/array.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice": () => (/* binding */ slice),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var slice = Array.prototype.slice;

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}


/***/ }),

/***/ "./node_modules/d3-shape/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-shape/src/constant.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return function constant() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/d3-shape/src/curve/linear.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/linear.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  return new Linear(context);
}


/***/ }),

/***/ "./node_modules/d3-shape/src/line.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/line.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-path */ "./node_modules/d3-path/src/path.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-shape/src/array.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-shape/src/constant.js");
/* harmony import */ var _curve_linear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve/linear.js */ "./node_modules/d3-shape/src/curve/linear.js");
/* harmony import */ var _point_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./point.js */ "./node_modules/d3-shape/src/point.js");






/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x, y) {
  var defined = (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(true),
      context = null,
      curve = _curve_linear_js__WEBPACK_IMPORTED_MODULE_1__["default"],
      output = null;

  x = typeof x === "function" ? x : (x === undefined) ? _point_js__WEBPACK_IMPORTED_MODULE_2__.x : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(x);
  y = typeof y === "function" ? y : (y === undefined) ? _point_js__WEBPACK_IMPORTED_MODULE_2__.y : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(y);

  function line(data) {
    var i,
        n = (data = (0,_array_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data)).length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = (0,d3_path__WEBPACK_IMPORTED_MODULE_4__["default"])());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), line) : x;
  };

  line.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(+_), line) : y;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}


/***/ }),

/***/ "./node_modules/d3-shape/src/point.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/point.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ x),
/* harmony export */   "y": () => (/* binding */ y)
/* harmony export */ });
function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./resources/source/src/sass/main.sass":
/*!*********************************************!*\
  !*** ./resources/source/src/sass/main.sass ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/svg-arc-to-cubic-bezier/modules/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/svg-arc-to-cubic-bezier/modules/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var TAU = Math.PI * 2;

var mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
  var x = _ref.x,
      y = _ref.y;

  x *= rx;
  y *= ry;

  var xp = cosphi * x - sinphi * y;
  var yp = sinphi * x + cosphi * y;

  return {
    x: xp + centerx,
    y: yp + centery
  };
};

var approxUnitArc = function approxUnitArc(ang1, ang2) {
  // If 90 degree circular arc, use a constant
  // as derived from http://spencermortensen.com/articles/bezier-circle
  var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);

  var x1 = Math.cos(ang1);
  var y1 = Math.sin(ang1);
  var x2 = Math.cos(ang1 + ang2);
  var y2 = Math.sin(ang1 + ang2);

  return [{
    x: x1 - y1 * a,
    y: y1 + x1 * a
  }, {
    x: x2 + y2 * a,
    y: y2 - x2 * a
  }, {
    x: x2,
    y: y2
  }];
};

var vectorAngle = function vectorAngle(ux, uy, vx, vy) {
  var sign = ux * vy - uy * vx < 0 ? -1 : 1;

  var dot = ux * vx + uy * vy;

  if (dot > 1) {
    dot = 1;
  }

  if (dot < -1) {
    dot = -1;
  }

  return sign * Math.acos(dot);
};

var getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
  var rxsq = Math.pow(rx, 2);
  var rysq = Math.pow(ry, 2);
  var pxpsq = Math.pow(pxp, 2);
  var pypsq = Math.pow(pyp, 2);

  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;

  if (radicant < 0) {
    radicant = 0;
  }

  radicant /= rxsq * pypsq + rysq * pxpsq;
  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);

  var centerxp = radicant * rx / ry * pyp;
  var centeryp = radicant * -ry / rx * pxp;

  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;

  var vx1 = (pxp - centerxp) / rx;
  var vy1 = (pyp - centeryp) / ry;
  var vx2 = (-pxp - centerxp) / rx;
  var vy2 = (-pyp - centeryp) / ry;

  var ang1 = vectorAngle(1, 0, vx1, vy1);
  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);

  if (sweepFlag === 0 && ang2 > 0) {
    ang2 -= TAU;
  }

  if (sweepFlag === 1 && ang2 < 0) {
    ang2 += TAU;
  }

  return [centerx, centery, ang1, ang2];
};

var arcToBezier = function arcToBezier(_ref2) {
  var px = _ref2.px,
      py = _ref2.py,
      cx = _ref2.cx,
      cy = _ref2.cy,
      rx = _ref2.rx,
      ry = _ref2.ry,
      _ref2$xAxisRotation = _ref2.xAxisRotation,
      xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,
      _ref2$largeArcFlag = _ref2.largeArcFlag,
      largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,
      _ref2$sweepFlag = _ref2.sweepFlag,
      sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;

  var curves = [];

  if (rx === 0 || ry === 0) {
    return [];
  }

  var sinphi = Math.sin(xAxisRotation * TAU / 360);
  var cosphi = Math.cos(xAxisRotation * TAU / 360);

  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;

  if (pxp === 0 && pyp === 0) {
    return [];
  }

  rx = Math.abs(rx);
  ry = Math.abs(ry);

  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);

  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }

  var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),
      _getArcCenter2 = _slicedToArray(_getArcCenter, 4),
      centerx = _getArcCenter2[0],
      centery = _getArcCenter2[1],
      ang1 = _getArcCenter2[2],
      ang2 = _getArcCenter2[3];

  // If 'ang2' == 90.0000000001, then `ratio` will evaluate to
  // 1.0000000001. This causes `segments` to be greater than one, which is an
  // unecessary split, and adds extra points to the bezier curve. To alleviate
  // this issue, we round to 1.0 when the ratio is close to 1.0.


  var ratio = Math.abs(ang2) / (TAU / 4);
  if (Math.abs(1.0 - ratio) < 0.0000001) {
    ratio = 1.0;
  }

  var segments = Math.max(Math.ceil(ratio), 1);

  ang2 /= segments;

  for (var i = 0; i < segments; i++) {
    curves.push(approxUnitArc(ang1, ang2));
    ang1 += ang2;
  }

  return curves.map(function (curve) {
    var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),
        x1 = _mapToEllipse.x,
        y1 = _mapToEllipse.y;

    var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),
        x2 = _mapToEllipse2.x,
        y2 = _mapToEllipse2.y;

    var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),
        x = _mapToEllipse3.x,
        y = _mapToEllipse3.y;

    return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arcToBezier);

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ "./node_modules/axios/package.json":
/*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/main"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/main"], () => (__webpack_require__("./resources/source/src/sass/main.sass")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;